   1               		.file	"bmp180.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	bmp_temp_ready:
  12               	.LFB8:
  13               		.file 1 "../drivers/bmp180.c"
   1:../drivers/bmp180.c **** #include <util/delay.h>
   2:../drivers/bmp180.c **** #include "config.h"
   3:../drivers/bmp180.c **** #include "TWI.h"
   4:../drivers/bmp180.c **** #include "timer.h"
   5:../drivers/bmp180.c **** #include "bmp180.h"
   6:../drivers/bmp180.c **** 
   7:../drivers/bmp180.c **** #define REG_AC1 0xAA
   8:../drivers/bmp180.c **** #define REG_AC2 0xAC
   9:../drivers/bmp180.c **** #define REG_AC3 0xAE
  10:../drivers/bmp180.c **** #define REG_AC4 0xB0
  11:../drivers/bmp180.c **** #define REG_AC5 0xB2
  12:../drivers/bmp180.c **** #define REG_AC6 0xB4
  13:../drivers/bmp180.c **** #define REG_B1 0xB6
  14:../drivers/bmp180.c **** #define REG_B2 0xB8
  15:../drivers/bmp180.c **** #define REG_MB 0xBA
  16:../drivers/bmp180.c **** #define REG_MC 0xBC
  17:../drivers/bmp180.c **** #define REG_MD 0xBE
  18:../drivers/bmp180.c **** #define REG_ID 0xD0
  19:../drivers/bmp180.c **** #define REG_SOFT_RESET 0xE0
  20:../drivers/bmp180.c **** #define REG_CTRL_MEAS 0xF4
  21:../drivers/bmp180.c **** #define REG_OUT_MSB 0xF6
  22:../drivers/bmp180.c **** #define REG_OUT_LSB 0xF7
  23:../drivers/bmp180.c **** #define REG_OUT_XLSB 0xF8
  24:../drivers/bmp180.c **** 
  25:../drivers/bmp180.c **** #define BMP_PRES_OSS 3
  26:../drivers/bmp180.c **** #define CMD_TEMP_CONVERSION 0x2E
  27:../drivers/bmp180.c **** #define CMD_PRES_CONVERSION (0x34|(BMP_PRES_OSS<<6))
  28:../drivers/bmp180.c **** #define CMD_SOFT_RESET 0xB6
  29:../drivers/bmp180.c **** 
  30:../drivers/bmp180.c **** #define BMPx8x_ADDRESS (0x77 << 1)
  31:../drivers/bmp180.c **** 
  32:../drivers/bmp180.c **** static int16_t bmp_ac1;
  33:../drivers/bmp180.c **** static int16_t bmp_ac2;
  34:../drivers/bmp180.c **** static int16_t bmp_ac3;
  35:../drivers/bmp180.c **** static uint16_t bmp_ac4;
  36:../drivers/bmp180.c **** static uint16_t bmp_ac5;
  37:../drivers/bmp180.c **** static uint16_t bmp_ac6;
  38:../drivers/bmp180.c **** static int16_t bmp_b1;
  39:../drivers/bmp180.c **** static int16_t bmp_b2;
  40:../drivers/bmp180.c **** static int16_t bmp_b5;
  41:../drivers/bmp180.c **** static int16_t bmp_mb;
  42:../drivers/bmp180.c **** static int16_t bmp_mc;
  43:../drivers/bmp180.c **** static int16_t bmp_md;
  44:../drivers/bmp180.c **** 
  45:../drivers/bmp180.c **** typedef enum {
  46:../drivers/bmp180.c ****     BMP_IDLE = 0,
  47:../drivers/bmp180.c ****     BMP_TEMP_CONVERSION,
  48:../drivers/bmp180.c ****     BMP_TEMP_READ,
  49:../drivers/bmp180.c ****     BMP_PRES_CONVERSION,
  50:../drivers/bmp180.c ****     BMP_PRES_READ,
  51:../drivers/bmp180.c ****     BMP_PRES_READY
  52:../drivers/bmp180.c **** } bmp_state_t;
  53:../drivers/bmp180.c **** 
  54:../drivers/bmp180.c **** static uint8_t bmp_buf[3];
  55:../drivers/bmp180.c **** static uint8_t bmp_state=BMP_IDLE;
  56:../drivers/bmp180.c **** static bmp180_temperature_cb temperature_cb;
  57:../drivers/bmp180.c **** static bmp180_pressure_cb pressure_cb;
  58:../drivers/bmp180.c **** 
  59:../drivers/bmp180.c **** static void bmp_read(void)
  60:../drivers/bmp180.c **** {
  61:../drivers/bmp180.c ****     timer_stop(BMP180_TIMER_ID);
  62:../drivers/bmp180.c ****     bmp_state = BMP_TEMP_CONVERSION;
  63:../drivers/bmp180.c **** }
  64:../drivers/bmp180.c **** 
  65:../drivers/bmp180.c **** static void bmp_temp_read(void)
  66:../drivers/bmp180.c **** {
  67:../drivers/bmp180.c ****     timer_stop(BMP180_TIMER_ID);
  68:../drivers/bmp180.c ****     bmp_state = BMP_TEMP_READ;
  69:../drivers/bmp180.c **** }
  70:../drivers/bmp180.c **** 
  71:../drivers/bmp180.c **** static void bmp_temp_ready(void)
  72:../drivers/bmp180.c **** {
  14               		.loc 1 72 0
  15               		.cfi_startproc
  16               	/* prologue: function */
  17               	/* frame size = 0 */
  18               	/* stack size = 0 */
  19               	.L__stack_usage = 0
  73:../drivers/bmp180.c ****     bmp_state = BMP_PRES_CONVERSION;
  20               		.loc 1 73 0
  21 0000 83E0      		ldi r24,lo8(3)
  22 0002 8093 0000 		sts bmp_state,r24
  23 0006 0895      		ret
  24               		.cfi_endproc
  25               	.LFE8:
  28               	bmp_pres_ready:
  29               	.LFB10:
  74:../drivers/bmp180.c **** }
  75:../drivers/bmp180.c **** 
  76:../drivers/bmp180.c **** static void bmp_pres_read(void)
  77:../drivers/bmp180.c **** {
  78:../drivers/bmp180.c ****     timer_stop(BMP180_TIMER_ID);
  79:../drivers/bmp180.c ****     bmp_state = BMP_PRES_READ;
  80:../drivers/bmp180.c **** }
  81:../drivers/bmp180.c **** 
  82:../drivers/bmp180.c **** static void bmp_pres_ready(void)
  83:../drivers/bmp180.c **** {
  30               		.loc 1 83 0
  31               		.cfi_startproc
  32               	/* prologue: function */
  33               	/* frame size = 0 */
  34               	/* stack size = 0 */
  35               	.L__stack_usage = 0
  84:../drivers/bmp180.c ****     bmp_state = BMP_PRES_READY;
  36               		.loc 1 84 0
  37 0008 85E0      		ldi r24,lo8(5)
  38 000a 8093 0000 		sts bmp_state,r24
  39 000e 0895      		ret
  40               		.cfi_endproc
  41               	.LFE10:
  44               	bmp_read:
  45               	.LFB6:
  60:../drivers/bmp180.c ****     timer_stop(BMP180_TIMER_ID);
  46               		.loc 1 60 0
  47               		.cfi_startproc
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 0 */
  51               	.L__stack_usage = 0
  61:../drivers/bmp180.c ****     bmp_state = BMP_TEMP_CONVERSION;
  52               		.loc 1 61 0
  53 0010 84E0      		ldi r24,lo8(4)
  54 0012 0E94 0000 		call timer_stop
  55               	.LVL0:
  62:../drivers/bmp180.c **** }
  56               		.loc 1 62 0
  57 0016 81E0      		ldi r24,lo8(1)
  58 0018 8093 0000 		sts bmp_state,r24
  59 001c 0895      		ret
  60               		.cfi_endproc
  61               	.LFE6:
  64               	bmp_pres_read:
  65               	.LFB9:
  77:../drivers/bmp180.c ****     timer_stop(BMP180_TIMER_ID);
  66               		.loc 1 77 0
  67               		.cfi_startproc
  68               	/* prologue: function */
  69               	/* frame size = 0 */
  70               	/* stack size = 0 */
  71               	.L__stack_usage = 0
  78:../drivers/bmp180.c ****     bmp_state = BMP_PRES_READ;
  72               		.loc 1 78 0
  73 001e 84E0      		ldi r24,lo8(4)
  74 0020 0E94 0000 		call timer_stop
  75               	.LVL1:
  79:../drivers/bmp180.c **** }
  76               		.loc 1 79 0
  77 0024 84E0      		ldi r24,lo8(4)
  78 0026 8093 0000 		sts bmp_state,r24
  79 002a 0895      		ret
  80               		.cfi_endproc
  81               	.LFE9:
  84               	bmp_temp_read:
  85               	.LFB7:
  66:../drivers/bmp180.c ****     timer_stop(BMP180_TIMER_ID);
  86               		.loc 1 66 0
  87               		.cfi_startproc
  88               	/* prologue: function */
  89               	/* frame size = 0 */
  90               	/* stack size = 0 */
  91               	.L__stack_usage = 0
  67:../drivers/bmp180.c ****     bmp_state = BMP_TEMP_READ;
  92               		.loc 1 67 0
  93 002c 84E0      		ldi r24,lo8(4)
  94 002e 0E94 0000 		call timer_stop
  95               	.LVL2:
  68:../drivers/bmp180.c **** }
  96               		.loc 1 68 0
  97 0032 82E0      		ldi r24,lo8(2)
  98 0034 8093 0000 		sts bmp_state,r24
  99 0038 0895      		ret
 100               		.cfi_endproc
 101               	.LFE7:
 103               	.global	bmp180_init
 105               	bmp180_init:
 106               	.LFB11:
  85:../drivers/bmp180.c **** }
  86:../drivers/bmp180.c **** 
  87:../drivers/bmp180.c **** void bmp180_init(bmp180_temperature_cb t_cb, bmp180_pressure_cb p_cb)
  88:../drivers/bmp180.c **** {
 107               		.loc 1 88 0
 108               		.cfi_startproc
 109               	.LVL3:
 110 003a AF92      		push r10
 111               	.LCFI0:
 112               		.cfi_def_cfa_offset 3
 113               		.cfi_offset 10, -2
 114 003c BF92      		push r11
 115               	.LCFI1:
 116               		.cfi_def_cfa_offset 4
 117               		.cfi_offset 11, -3
 118 003e CF92      		push r12
 119               	.LCFI2:
 120               		.cfi_def_cfa_offset 5
 121               		.cfi_offset 12, -4
 122 0040 DF92      		push r13
 123               	.LCFI3:
 124               		.cfi_def_cfa_offset 6
 125               		.cfi_offset 13, -5
 126 0042 EF92      		push r14
 127               	.LCFI4:
 128               		.cfi_def_cfa_offset 7
 129               		.cfi_offset 14, -6
 130 0044 FF92      		push r15
 131               	.LCFI5:
 132               		.cfi_def_cfa_offset 8
 133               		.cfi_offset 15, -7
 134 0046 0F93      		push r16
 135               	.LCFI6:
 136               		.cfi_def_cfa_offset 9
 137               		.cfi_offset 16, -8
 138 0048 CF93      		push r28
 139               	.LCFI7:
 140               		.cfi_def_cfa_offset 10
 141               		.cfi_offset 28, -9
 142 004a DF93      		push r29
 143               	.LCFI8:
 144               		.cfi_def_cfa_offset 11
 145               		.cfi_offset 29, -10
 146 004c CDB7      		in r28,__SP_L__
 147 004e DEB7      		in r29,__SP_H__
 148               	.LCFI9:
 149               		.cfi_def_cfa_register 28
 150 0050 6697      		sbiw r28,22
 151               	.LCFI10:
 152               		.cfi_def_cfa_offset 33
 153 0052 0FB6      		in __tmp_reg__,__SREG__
 154 0054 F894      		cli
 155 0056 DEBF      		out __SP_H__,r29
 156 0058 0FBE      		out __SREG__,__tmp_reg__
 157 005a CDBF      		out __SP_L__,r28
 158               	/* prologue: function */
 159               	/* frame size = 22 */
 160               	/* stack size = 31 */
 161               	.L__stack_usage = 31
 162 005c 5C01      		movw r10,r24
 163 005e 6B01      		movw r12,r22
 164               	.LVL4:
 165               	.L7:
  89:../drivers/bmp180.c ****     uint8_t tmp_buf[22];
  90:../drivers/bmp180.c ****     while (!twi_ready());
 166               		.loc 1 90 0 discriminator 1
 167 0060 0E94 0000 		call twi_ready
 168               	.LVL5:
 169 0064 8823      		tst r24
 170 0066 01F0      		breq .L7
  91:../drivers/bmp180.c ****     tmp_buf[0] = REG_SOFT_RESET;
 171               		.loc 1 91 0
 172 0068 80EE      		ldi r24,lo8(-32)
 173 006a 8983      		std Y+1,r24
  92:../drivers/bmp180.c ****     tmp_buf[1] = CMD_SOFT_RESET;
 174               		.loc 1 92 0
 175 006c 86EB      		ldi r24,lo8(-74)
 176 006e 8A83      		std Y+2,r24
  93:../drivers/bmp180.c ****     if (twi_master_send(BMPx8x_ADDRESS, tmp_buf, 2, 0) != 0)
 177               		.loc 1 93 0
 178 0070 E12C      		mov r14,__zero_reg__
 179 0072 F12C      		mov r15,__zero_reg__
 180 0074 00E0      		ldi r16,0
 181 0076 22E0      		ldi r18,lo8(2)
 182 0078 40E0      		ldi r20,0
 183 007a 50E0      		ldi r21,0
 184 007c BE01      		movw r22,r28
 185 007e 6F5F      		subi r22,-1
 186 0080 7F4F      		sbci r23,-1
 187 0082 8EEE      		ldi r24,lo8(-18)
 188 0084 0E94 0000 		call twi_master_transfer
 189               	.LVL6:
 190 0088 8111      		cpse r24,__zero_reg__
 191 008a 00C0      		rjmp .L6
 192               	.L9:
  94:../drivers/bmp180.c ****     {
  95:../drivers/bmp180.c ****         return;
  96:../drivers/bmp180.c ****     }
  97:../drivers/bmp180.c ****     while (!twi_ready());
 193               		.loc 1 97 0 discriminator 1
 194 008c 0E94 0000 		call twi_ready
 195               	.LVL7:
 196 0090 8823      		tst r24
 197 0092 01F0      		breq .L9
 198               	.LVL8:
 199               	.LBB4:
 200               	.LBB5:
 201               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 202               		.loc 2 187 0
 203 0094 8FE1      		ldi r24,lo8(19999)
 204 0096 9EE4      		ldi r25,hi8(19999)
 205 0098 0197      	1:	sbiw r24,1
 206 009a 01F4      		brne 1b
 207 009c 00C0      		rjmp .
 208 009e 0000      		nop
 209               	.LVL9:
 210               	.LBE5:
 211               	.LBE4:
  98:../drivers/bmp180.c ****     _delay_ms(5);
  99:../drivers/bmp180.c ****     tmp_buf[0] = REG_AC1;
 212               		.loc 1 99 0
 213 00a0 8AEA      		ldi r24,lo8(-86)
 214 00a2 8983      		std Y+1,r24
 100:../drivers/bmp180.c ****     if (twi_master_transfer(BMPx8x_ADDRESS, tmp_buf, tmp_buf, 1, 22, 0) != 0)
 215               		.loc 1 100 0
 216 00a4 E12C      		mov r14,__zero_reg__
 217 00a6 F12C      		mov r15,__zero_reg__
 218 00a8 06E1      		ldi r16,lo8(22)
 219 00aa 21E0      		ldi r18,lo8(1)
 220 00ac AE01      		movw r20,r28
 221 00ae 4F5F      		subi r20,-1
 222 00b0 5F4F      		sbci r21,-1
 223 00b2 BA01      		movw r22,r20
 224 00b4 8EEE      		ldi r24,lo8(-18)
 225 00b6 0E94 0000 		call twi_master_transfer
 226               	.LVL10:
 227 00ba 8111      		cpse r24,__zero_reg__
 228 00bc 00C0      		rjmp .L6
 229               	.L10:
 101:../drivers/bmp180.c ****     {
 102:../drivers/bmp180.c ****         return;
 103:../drivers/bmp180.c ****     }
 104:../drivers/bmp180.c ****     while (!twi_ready());
 230               		.loc 1 104 0 discriminator 1
 231 00be 0E94 0000 		call twi_ready
 232               	.LVL11:
 233 00c2 8823      		tst r24
 234 00c4 01F0      		breq .L10
 105:../drivers/bmp180.c ****     bmp_ac1 = ((tmp_buf[0]<<8) | tmp_buf[1]);
 235               		.loc 1 105 0
 236 00c6 8981      		ldd r24,Y+1
 237 00c8 9A81      		ldd r25,Y+2
 238 00ca 9827      		eor r25,r24
 239 00cc 8927      		eor r24,r25
 240 00ce 9827      		eor r25,r24
 241 00d0 9093 0000 		sts bmp_ac1+1,r25
 242 00d4 8093 0000 		sts bmp_ac1,r24
 106:../drivers/bmp180.c ****     bmp_ac2 = ((tmp_buf[2]<<8) | tmp_buf[3]);
 243               		.loc 1 106 0
 244 00d8 8B81      		ldd r24,Y+3
 245 00da 9C81      		ldd r25,Y+4
 246 00dc 9827      		eor r25,r24
 247 00de 8927      		eor r24,r25
 248 00e0 9827      		eor r25,r24
 249 00e2 9093 0000 		sts bmp_ac2+1,r25
 250 00e6 8093 0000 		sts bmp_ac2,r24
 107:../drivers/bmp180.c ****     bmp_ac3 = ((tmp_buf[4]<<8) | tmp_buf[5]);
 251               		.loc 1 107 0
 252 00ea 8D81      		ldd r24,Y+5
 253 00ec 9E81      		ldd r25,Y+6
 254 00ee 9827      		eor r25,r24
 255 00f0 8927      		eor r24,r25
 256 00f2 9827      		eor r25,r24
 257 00f4 9093 0000 		sts bmp_ac3+1,r25
 258 00f8 8093 0000 		sts bmp_ac3,r24
 108:../drivers/bmp180.c ****     bmp_ac4 = ((tmp_buf[6]<<8) | tmp_buf[7]);
 259               		.loc 1 108 0
 260 00fc 8F81      		ldd r24,Y+7
 261 00fe 9885      		ldd r25,Y+8
 262 0100 9827      		eor r25,r24
 263 0102 8927      		eor r24,r25
 264 0104 9827      		eor r25,r24
 265 0106 9093 0000 		sts bmp_ac4+1,r25
 266 010a 8093 0000 		sts bmp_ac4,r24
 109:../drivers/bmp180.c ****     bmp_ac5 = ((tmp_buf[8]<<8) | tmp_buf[9]);
 267               		.loc 1 109 0
 268 010e 8985      		ldd r24,Y+9
 269 0110 9A85      		ldd r25,Y+10
 270 0112 9827      		eor r25,r24
 271 0114 8927      		eor r24,r25
 272 0116 9827      		eor r25,r24
 273 0118 9093 0000 		sts bmp_ac5+1,r25
 274 011c 8093 0000 		sts bmp_ac5,r24
 110:../drivers/bmp180.c ****     bmp_ac6 = ((tmp_buf[10]<<8) | tmp_buf[11]);
 275               		.loc 1 110 0
 276 0120 8B85      		ldd r24,Y+11
 277 0122 9C85      		ldd r25,Y+12
 278 0124 9827      		eor r25,r24
 279 0126 8927      		eor r24,r25
 280 0128 9827      		eor r25,r24
 281 012a 9093 0000 		sts bmp_ac6+1,r25
 282 012e 8093 0000 		sts bmp_ac6,r24
 111:../drivers/bmp180.c ****     bmp_b1 = ((tmp_buf[12]<<8) | tmp_buf[13]);
 283               		.loc 1 111 0
 284 0132 8D85      		ldd r24,Y+13
 285 0134 9E85      		ldd r25,Y+14
 286 0136 9827      		eor r25,r24
 287 0138 8927      		eor r24,r25
 288 013a 9827      		eor r25,r24
 289 013c 9093 0000 		sts bmp_b1+1,r25
 290 0140 8093 0000 		sts bmp_b1,r24
 112:../drivers/bmp180.c ****     bmp_b2 = ((tmp_buf[14]<<8) | tmp_buf[15]);
 291               		.loc 1 112 0
 292 0144 8F85      		ldd r24,Y+15
 293 0146 9889      		ldd r25,Y+16
 294 0148 9827      		eor r25,r24
 295 014a 8927      		eor r24,r25
 296 014c 9827      		eor r25,r24
 297 014e 9093 0000 		sts bmp_b2+1,r25
 298 0152 8093 0000 		sts bmp_b2,r24
 113:../drivers/bmp180.c ****     bmp_mb = ((tmp_buf[16]<<8) | tmp_buf[17]);
 114:../drivers/bmp180.c ****     bmp_mc = ((tmp_buf[18]<<8) | tmp_buf[19]);
 299               		.loc 1 114 0
 300 0156 8B89      		ldd r24,Y+19
 301 0158 9C89      		ldd r25,Y+20
 302 015a 9827      		eor r25,r24
 303 015c 8927      		eor r24,r25
 304 015e 9827      		eor r25,r24
 305 0160 9093 0000 		sts bmp_mc+1,r25
 306 0164 8093 0000 		sts bmp_mc,r24
 115:../drivers/bmp180.c ****     bmp_md = ((tmp_buf[20]<<8) | tmp_buf[21]);
 307               		.loc 1 115 0
 308 0168 8D89      		ldd r24,Y+21
 309 016a 9E89      		ldd r25,Y+22
 310 016c 9827      		eor r25,r24
 311 016e 8927      		eor r24,r25
 312 0170 9827      		eor r25,r24
 313 0172 9093 0000 		sts bmp_md+1,r25
 314 0176 8093 0000 		sts bmp_md,r24
 116:../drivers/bmp180.c ****     temperature_cb = t_cb;
 315               		.loc 1 116 0
 316 017a B092 0000 		sts temperature_cb+1,r11
 317 017e A092 0000 		sts temperature_cb,r10
 117:../drivers/bmp180.c ****     pressure_cb = p_cb;
 318               		.loc 1 117 0
 319 0182 D092 0000 		sts pressure_cb+1,r13
 320 0186 C092 0000 		sts pressure_cb,r12
 118:../drivers/bmp180.c ****     timer_register(BMP180_TIMER_ID, BMP180_READ_PERIOD_S*10, bmp_read);
 321               		.loc 1 118 0
 322 018a 40E0      		ldi r20,lo8(gs(bmp_read))
 323 018c 50E0      		ldi r21,hi8(gs(bmp_read))
 324 018e 68EC      		ldi r22,lo8(-56)
 325 0190 84E0      		ldi r24,lo8(4)
 326 0192 0E94 0000 		call timer_register
 327               	.LVL12:
 328               	.L6:
 329               	/* epilogue start */
 119:../drivers/bmp180.c **** }
 330               		.loc 1 119 0
 331 0196 6696      		adiw r28,22
 332 0198 0FB6      		in __tmp_reg__,__SREG__
 333 019a F894      		cli
 334 019c DEBF      		out __SP_H__,r29
 335 019e 0FBE      		out __SREG__,__tmp_reg__
 336 01a0 CDBF      		out __SP_L__,r28
 337 01a2 DF91      		pop r29
 338 01a4 CF91      		pop r28
 339 01a6 0F91      		pop r16
 340 01a8 FF90      		pop r15
 341 01aa EF90      		pop r14
 342 01ac DF90      		pop r13
 343 01ae CF90      		pop r12
 344               	.LVL13:
 345 01b0 BF90      		pop r11
 346 01b2 AF90      		pop r10
 347               	.LVL14:
 348 01b4 0895      		ret
 349               		.cfi_endproc
 350               	.LFE11:
 352               	.global	bmp180_handler
 354               	bmp180_handler:
 355               	.LFB14:
 120:../drivers/bmp180.c **** 
 121:../drivers/bmp180.c **** static void calculate_temperature(void)
 122:../drivers/bmp180.c **** {
 123:../drivers/bmp180.c ****     int32_t x1, x2;
 124:../drivers/bmp180.c ****     x1 = (uint16_t)((bmp_buf[0]<<8) | bmp_buf[1]);
 125:../drivers/bmp180.c ****     x1 -= (int32_t)bmp_ac6;
 126:../drivers/bmp180.c ****     x1 *= (int32_t)bmp_ac5;
 127:../drivers/bmp180.c ****     x1 >>= 15;
 128:../drivers/bmp180.c ****     x2 = bmp_mc;
 129:../drivers/bmp180.c ****     x2 <<= 11;
 130:../drivers/bmp180.c ****     x2 /= x1 + bmp_md;
 131:../drivers/bmp180.c ****     bmp_b5 = x1 + x2;
 132:../drivers/bmp180.c ****     int16_t t = ((bmp_b5 + 8) >> 4);  // temp in 0.1
 133:../drivers/bmp180.c ****     if (temperature_cb)
 134:../drivers/bmp180.c ****     {
 135:../drivers/bmp180.c ****         temperature_cb(t);
 136:../drivers/bmp180.c ****     }
 137:../drivers/bmp180.c **** }
 138:../drivers/bmp180.c **** 
 139:../drivers/bmp180.c **** static void calculate_pressure(void)
 140:../drivers/bmp180.c **** {
 141:../drivers/bmp180.c ****     int32_t up, x1, x2, x3, b3, b6, p;
 142:../drivers/bmp180.c ****     uint32_t b4, b7;
 143:../drivers/bmp180.c ****     up = bmp_buf[0];
 144:../drivers/bmp180.c ****     up <<= 8;
 145:../drivers/bmp180.c ****     up |= bmp_buf[1];
 146:../drivers/bmp180.c ****     up <<= 8;
 147:../drivers/bmp180.c ****     up |= bmp_buf[2];
 148:../drivers/bmp180.c ****     up >>= 8 - BMP_PRES_OSS;
 149:../drivers/bmp180.c **** 
 150:../drivers/bmp180.c ****     b6 = bmp_b5 - 4000;
 151:../drivers/bmp180.c ****     x1 = (bmp_b2 * (b6 * b6) >> 12) >> 11;
 152:../drivers/bmp180.c ****     x2 = (bmp_ac2 * b6) >> 11;
 153:../drivers/bmp180.c ****     x3 = x1 + x2;
 154:../drivers/bmp180.c ****     b3 = (((((int32_t)bmp_ac1) * 4 + x3) << BMP_PRES_OSS) + 2) >> 2;
 155:../drivers/bmp180.c **** 
 156:../drivers/bmp180.c ****     x1 = (bmp_ac3 * b6) >> 13;
 157:../drivers/bmp180.c ****     x2 = (bmp_b1 * ((b6 * b6) >> 12)) >> 16;
 158:../drivers/bmp180.c ****     x3 = ((x1 + x2) + 2) >> 2;
 159:../drivers/bmp180.c ****     b4 = (bmp_ac4 * (uint32_t)(x3 + 32768)) >> 15;
 160:../drivers/bmp180.c **** 
 161:../drivers/bmp180.c ****     b7 = ((uint32_t)(up - b3) * (50000 >> BMP_PRES_OSS));
 162:../drivers/bmp180.c ****     if (b7 < 0x80000000)
 163:../drivers/bmp180.c ****     {
 164:../drivers/bmp180.c ****         p = (b7 << 1) / b4;
 165:../drivers/bmp180.c ****     }
 166:../drivers/bmp180.c ****     else
 167:../drivers/bmp180.c ****     {
 168:../drivers/bmp180.c ****         p = (b7 / b4) << 1;
 169:../drivers/bmp180.c ****     }
 170:../drivers/bmp180.c **** 
 171:../drivers/bmp180.c ****     x1 = (p >> 8) * (p >> 8);
 172:../drivers/bmp180.c ****     x1 = (x1 * 3038) >> 16;
 173:../drivers/bmp180.c ****     x2 = (-7357 * p) >> 16;
 174:../drivers/bmp180.c ****     p += (x1 + x2 + 3791) >> 4;
 175:../drivers/bmp180.c ****     if (pressure_cb)
 176:../drivers/bmp180.c ****     {
 177:../drivers/bmp180.c ****         pressure_cb(p);
 178:../drivers/bmp180.c ****     }
 179:../drivers/bmp180.c **** }
 180:../drivers/bmp180.c **** 
 181:../drivers/bmp180.c **** void bmp180_handler(void)
 182:../drivers/bmp180.c **** {
 356               		.loc 1 182 0
 357               		.cfi_startproc
 358 01b6 2F92      		push r2
 359               	.LCFI11:
 360               		.cfi_def_cfa_offset 3
 361               		.cfi_offset 2, -2
 362 01b8 3F92      		push r3
 363               	.LCFI12:
 364               		.cfi_def_cfa_offset 4
 365               		.cfi_offset 3, -3
 366 01ba 4F92      		push r4
 367               	.LCFI13:
 368               		.cfi_def_cfa_offset 5
 369               		.cfi_offset 4, -4
 370 01bc 5F92      		push r5
 371               	.LCFI14:
 372               		.cfi_def_cfa_offset 6
 373               		.cfi_offset 5, -5
 374 01be 6F92      		push r6
 375               	.LCFI15:
 376               		.cfi_def_cfa_offset 7
 377               		.cfi_offset 6, -6
 378 01c0 7F92      		push r7
 379               	.LCFI16:
 380               		.cfi_def_cfa_offset 8
 381               		.cfi_offset 7, -7
 382 01c2 8F92      		push r8
 383               	.LCFI17:
 384               		.cfi_def_cfa_offset 9
 385               		.cfi_offset 8, -8
 386 01c4 9F92      		push r9
 387               	.LCFI18:
 388               		.cfi_def_cfa_offset 10
 389               		.cfi_offset 9, -9
 390 01c6 AF92      		push r10
 391               	.LCFI19:
 392               		.cfi_def_cfa_offset 11
 393               		.cfi_offset 10, -10
 394 01c8 BF92      		push r11
 395               	.LCFI20:
 396               		.cfi_def_cfa_offset 12
 397               		.cfi_offset 11, -11
 398 01ca CF92      		push r12
 399               	.LCFI21:
 400               		.cfi_def_cfa_offset 13
 401               		.cfi_offset 12, -12
 402 01cc DF92      		push r13
 403               	.LCFI22:
 404               		.cfi_def_cfa_offset 14
 405               		.cfi_offset 13, -13
 406 01ce EF92      		push r14
 407               	.LCFI23:
 408               		.cfi_def_cfa_offset 15
 409               		.cfi_offset 14, -14
 410 01d0 FF92      		push r15
 411               	.LCFI24:
 412               		.cfi_def_cfa_offset 16
 413               		.cfi_offset 15, -15
 414 01d2 0F93      		push r16
 415               	.LCFI25:
 416               		.cfi_def_cfa_offset 17
 417               		.cfi_offset 16, -16
 418 01d4 1F93      		push r17
 419               	.LCFI26:
 420               		.cfi_def_cfa_offset 18
 421               		.cfi_offset 17, -17
 422 01d6 CF93      		push r28
 423               	.LCFI27:
 424               		.cfi_def_cfa_offset 19
 425               		.cfi_offset 28, -18
 426 01d8 DF93      		push r29
 427               	.LCFI28:
 428               		.cfi_def_cfa_offset 20
 429               		.cfi_offset 29, -19
 430               	/* prologue: function */
 431               	/* frame size = 0 */
 432               	/* stack size = 18 */
 433               	.L__stack_usage = 18
 183:../drivers/bmp180.c ****     if (!twi_ready())
 434               		.loc 1 183 0
 435 01da 0E94 0000 		call twi_ready
 436               	.LVL15:
 437 01de 8823      		tst r24
 438 01e0 01F4      		brne .+2
 439 01e2 00C0      		rjmp .L19
 184:../drivers/bmp180.c ****     {
 185:../drivers/bmp180.c ****         return;
 186:../drivers/bmp180.c ****     }
 187:../drivers/bmp180.c ****     switch (bmp_state)
 440               		.loc 1 187 0
 441 01e4 8091 0000 		lds r24,bmp_state
 442 01e8 8330      		cpi r24,lo8(3)
 443 01ea 01F4      		brne .+2
 444 01ec 00C0      		rjmp .L22
 445 01ee 00F4      		brsh .L23
 446 01f0 8130      		cpi r24,lo8(1)
 447 01f2 01F0      		breq .L24
 448 01f4 8230      		cpi r24,lo8(2)
 449 01f6 01F0      		breq .+2
 450 01f8 00C0      		rjmp .L19
 188:../drivers/bmp180.c ****     {
 189:../drivers/bmp180.c ****         case BMP_IDLE:
 190:../drivers/bmp180.c ****             return;
 191:../drivers/bmp180.c ****         case BMP_TEMP_CONVERSION:
 192:../drivers/bmp180.c ****             bmp_buf[0] = REG_CTRL_MEAS;
 193:../drivers/bmp180.c ****             bmp_buf[1] = CMD_TEMP_CONVERSION;
 194:../drivers/bmp180.c ****             if (twi_master_send(BMPx8x_ADDRESS, bmp_buf, 2, 0) != 0)
 195:../drivers/bmp180.c ****             {
 196:../drivers/bmp180.c ****                 return;
 197:../drivers/bmp180.c ****             }
 198:../drivers/bmp180.c ****             bmp_state = BMP_IDLE;
 199:../drivers/bmp180.c ****             timer_register(BMP180_TIMER_ID, 1, bmp_temp_read);
 200:../drivers/bmp180.c ****             return;
 201:../drivers/bmp180.c ****         case BMP_TEMP_READ:
 202:../drivers/bmp180.c ****             bmp_buf[0] = REG_OUT_MSB;
 451               		.loc 1 202 0
 452 01fa 86EF      		ldi r24,lo8(-10)
 453 01fc 8093 0000 		sts bmp_buf,r24
 203:../drivers/bmp180.c ****             if (twi_master_transfer(BMPx8x_ADDRESS, bmp_buf, bmp_buf, 1, 2, bmp_temp_ready) != 0)
 454               		.loc 1 203 0
 455 0200 30E0      		ldi r19,lo8(gs(bmp_temp_ready))
 456 0202 E32E      		mov r14,r19
 457 0204 30E0      		ldi r19,hi8(gs(bmp_temp_ready))
 458 0206 F32E      		mov r15,r19
 459 0208 02E0      		ldi r16,lo8(2)
 460 020a 00C0      		rjmp .L41
 461               	.L23:
 187:../drivers/bmp180.c ****     {
 462               		.loc 1 187 0
 463 020c 8430      		cpi r24,lo8(4)
 464 020e 01F0      		breq .L26
 465 0210 8530      		cpi r24,lo8(5)
 466 0212 01F4      		brne .+2
 467 0214 00C0      		rjmp .L27
 468 0216 00C0      		rjmp .L19
 469               	.L24:
 192:../drivers/bmp180.c ****             bmp_buf[1] = CMD_TEMP_CONVERSION;
 470               		.loc 1 192 0
 471 0218 84EF      		ldi r24,lo8(-12)
 472 021a 8093 0000 		sts bmp_buf,r24
 193:../drivers/bmp180.c ****             if (twi_master_send(BMPx8x_ADDRESS, bmp_buf, 2, 0) != 0)
 473               		.loc 1 193 0
 474 021e 8EE2      		ldi r24,lo8(46)
 475 0220 8093 0000 		sts bmp_buf+1,r24
 194:../drivers/bmp180.c ****             {
 476               		.loc 1 194 0
 477 0224 E12C      		mov r14,__zero_reg__
 478 0226 F12C      		mov r15,__zero_reg__
 479 0228 00E0      		ldi r16,0
 480 022a 22E0      		ldi r18,lo8(2)
 481 022c 40E0      		ldi r20,0
 482 022e 50E0      		ldi r21,0
 483 0230 60E0      		ldi r22,lo8(bmp_buf)
 484 0232 70E0      		ldi r23,hi8(bmp_buf)
 485 0234 8EEE      		ldi r24,lo8(-18)
 486 0236 0E94 0000 		call twi_master_transfer
 487               	.LVL16:
 488 023a 8111      		cpse r24,__zero_reg__
 489 023c 00C0      		rjmp .L19
 198:../drivers/bmp180.c ****             timer_register(BMP180_TIMER_ID, 1, bmp_temp_read);
 490               		.loc 1 198 0
 491 023e 1092 0000 		sts bmp_state,__zero_reg__
 199:../drivers/bmp180.c ****             return;
 492               		.loc 1 199 0
 493 0242 40E0      		ldi r20,lo8(gs(bmp_temp_read))
 494 0244 50E0      		ldi r21,hi8(gs(bmp_temp_read))
 495 0246 00C0      		rjmp .L43
 496               	.L26:
 204:../drivers/bmp180.c ****             {
 205:../drivers/bmp180.c ****                 return;
 206:../drivers/bmp180.c ****             }
 207:../drivers/bmp180.c ****             bmp_state = BMP_IDLE;
 208:../drivers/bmp180.c ****             return;
 209:../drivers/bmp180.c ****         case BMP_PRES_CONVERSION:
 210:../drivers/bmp180.c ****             calculate_temperature();
 211:../drivers/bmp180.c ****             bmp_buf[0] = REG_CTRL_MEAS;
 212:../drivers/bmp180.c ****             bmp_buf[1] = CMD_PRES_CONVERSION;
 213:../drivers/bmp180.c ****             if (twi_master_send(BMPx8x_ADDRESS, bmp_buf, 2, 0) != 0)
 214:../drivers/bmp180.c ****             {
 215:../drivers/bmp180.c ****                 return;
 216:../drivers/bmp180.c ****             }
 217:../drivers/bmp180.c ****             bmp_state = BMP_IDLE;
 218:../drivers/bmp180.c ****             timer_register(BMP180_TIMER_ID, 1, bmp_pres_read);
 219:../drivers/bmp180.c ****             return;
 220:../drivers/bmp180.c ****         case BMP_PRES_READ:
 221:../drivers/bmp180.c ****             bmp_buf[0] = REG_OUT_MSB;
 497               		.loc 1 221 0
 498 0248 86EF      		ldi r24,lo8(-10)
 499 024a 8093 0000 		sts bmp_buf,r24
 222:../drivers/bmp180.c ****             if (twi_master_transfer(BMPx8x_ADDRESS, bmp_buf, bmp_buf, 1, 3, bmp_pres_ready) != 0)
 500               		.loc 1 222 0
 501 024e D0E0      		ldi r29,lo8(gs(bmp_pres_ready))
 502 0250 ED2E      		mov r14,r29
 503 0252 D0E0      		ldi r29,hi8(gs(bmp_pres_ready))
 504 0254 FD2E      		mov r15,r29
 505 0256 03E0      		ldi r16,lo8(3)
 506               	.L41:
 203:../drivers/bmp180.c ****             {
 507               		.loc 1 203 0
 508 0258 21E0      		ldi r18,lo8(1)
 509 025a 40E0      		ldi r20,lo8(bmp_buf)
 510 025c 50E0      		ldi r21,hi8(bmp_buf)
 511 025e BA01      		movw r22,r20
 512 0260 8EEE      		ldi r24,lo8(-18)
 513 0262 0E94 0000 		call twi_master_transfer
 514               	.LVL17:
 515 0266 8111      		cpse r24,__zero_reg__
 516 0268 00C0      		rjmp .L19
 517 026a 00C0      		rjmp .L42
 518               	.L22:
 519               	.LBB10:
 520               	.LBB11:
 124:../drivers/bmp180.c ****     x1 -= (int32_t)bmp_ac6;
 521               		.loc 1 124 0
 522 026c 2091 0000 		lds r18,bmp_buf
 523 0270 3091 0000 		lds r19,bmp_buf+1
 524 0274 3227      		eor r19,r18
 525 0276 2327      		eor r18,r19
 526 0278 3227      		eor r19,r18
 527 027a A901      		movw r20,r18
 528 027c 60E0      		ldi r22,0
 529 027e 70E0      		ldi r23,0
 530               	.LVL18:
 125:../drivers/bmp180.c ****     x1 *= (int32_t)bmp_ac5;
 531               		.loc 1 125 0
 532 0280 8091 0000 		lds r24,bmp_ac6
 533 0284 9091 0000 		lds r25,bmp_ac6+1
 534 0288 9A01      		movw r18,r20
 535 028a AB01      		movw r20,r22
 536 028c 281B      		sub r18,r24
 537 028e 390B      		sbc r19,r25
 538 0290 4109      		sbc r20,__zero_reg__
 539 0292 5109      		sbc r21,__zero_reg__
 540               	.LVL19:
 126:../drivers/bmp180.c ****     x1 >>= 15;
 541               		.loc 1 126 0
 542 0294 A091 0000 		lds r26,bmp_ac5
 543 0298 B091 0000 		lds r27,bmp_ac5+1
 544 029c 0E94 0000 		call __muluhisi3
 545               	.LVL20:
 127:../drivers/bmp180.c ****     x2 = bmp_mc;
 546               		.loc 1 127 0
 547 02a0 6B01      		movw r12,r22
 548 02a2 7C01      		movw r14,r24
 549 02a4 1FE0      		ldi r17,15
 550               		1:
 551 02a6 F594      		asr r15
 552 02a8 E794      		ror r14
 553 02aa D794      		ror r13
 554 02ac C794      		ror r12
 555 02ae 1A95      		dec r17
 556 02b0 01F4      		brne 1b
 557               	.LVL21:
 128:../drivers/bmp180.c ****     x2 <<= 11;
 558               		.loc 1 128 0
 559 02b2 6091 0000 		lds r22,bmp_mc
 560 02b6 7091 0000 		lds r23,bmp_mc+1
 561 02ba CB01      		movw r24,r22
 562 02bc 770F      		lsl r23
 563 02be AA0B      		sbc r26,r26
 564 02c0 BB0B      		sbc r27,r27
 565               	.LVL22:
 129:../drivers/bmp180.c ****     x2 /= x1 + bmp_md;
 566               		.loc 1 129 0
 567 02c2 BC01      		movw r22,r24
 568 02c4 CD01      		movw r24,r26
 569 02c6 0BE0      		ldi r16,11
 570               		1:
 571 02c8 660F      		lsl r22
 572 02ca 771F      		rol r23
 573 02cc 881F      		rol r24
 574 02ce 991F      		rol r25
 575 02d0 0A95      		dec r16
 576 02d2 01F4      		brne 1b
 577               	.LVL23:
 131:../drivers/bmp180.c ****     int16_t t = ((bmp_b5 + 8) >> 4);  // temp in 0.1
 578               		.loc 1 131 0
 579 02d4 2091 0000 		lds r18,bmp_md
 580 02d8 3091 0000 		lds r19,bmp_md+1
 581 02dc 8901      		movw r16,r18
 582 02de 330F      		lsl r19
 583 02e0 220B      		sbc r18,r18
 584 02e2 330B      		sbc r19,r19
 585 02e4 A901      		movw r20,r18
 586 02e6 9801      		movw r18,r16
 587 02e8 2C0D      		add r18,r12
 588 02ea 3D1D      		adc r19,r13
 589 02ec 4E1D      		adc r20,r14
 590 02ee 5F1D      		adc r21,r15
 591 02f0 0E94 0000 		call __divmodsi4
 592               	.LVL24:
 593 02f4 C20E      		add r12,r18
 594 02f6 D31E      		adc r13,r19
 595               	.LVL25:
 596 02f8 D092 0000 		sts bmp_b5+1,r13
 597 02fc C092 0000 		sts bmp_b5,r12
 132:../drivers/bmp180.c ****     if (temperature_cb)
 598               		.loc 1 132 0
 599 0300 88E0      		ldi r24,8
 600 0302 C80E      		add r12,r24
 601 0304 D11C      		adc r13,__zero_reg__
 602 0306 C601      		movw r24,r12
 603 0308 24E0      		ldi r18,4
 604               		1:
 605 030a 9595      		asr r25
 606 030c 8795      		ror r24
 607 030e 2A95      		dec r18
 608 0310 01F4      		brne 1b
 609               	.LVL26:
 133:../drivers/bmp180.c ****     {
 610               		.loc 1 133 0
 611 0312 E091 0000 		lds r30,temperature_cb
 612 0316 F091 0000 		lds r31,temperature_cb+1
 613 031a 3097      		sbiw r30,0
 614 031c 01F0      		breq .L29
 135:../drivers/bmp180.c ****     }
 615               		.loc 1 135 0
 616 031e 0995      		icall
 617               	.LVL27:
 618               	.L29:
 619               	.LBE11:
 620               	.LBE10:
 211:../drivers/bmp180.c ****             bmp_buf[1] = CMD_PRES_CONVERSION;
 621               		.loc 1 211 0
 622 0320 84EF      		ldi r24,lo8(-12)
 623 0322 8093 0000 		sts bmp_buf,r24
 212:../drivers/bmp180.c ****             if (twi_master_send(BMPx8x_ADDRESS, bmp_buf, 2, 0) != 0)
 624               		.loc 1 212 0
 625 0326 8093 0000 		sts bmp_buf+1,r24
 213:../drivers/bmp180.c ****             {
 626               		.loc 1 213 0
 627 032a E12C      		mov r14,__zero_reg__
 628 032c F12C      		mov r15,__zero_reg__
 629 032e 00E0      		ldi r16,0
 630 0330 22E0      		ldi r18,lo8(2)
 631 0332 40E0      		ldi r20,0
 632 0334 50E0      		ldi r21,0
 633 0336 60E0      		ldi r22,lo8(bmp_buf)
 634 0338 70E0      		ldi r23,hi8(bmp_buf)
 635 033a 8EEE      		ldi r24,lo8(-18)
 636 033c 0E94 0000 		call twi_master_transfer
 637               	.LVL28:
 638 0340 8111      		cpse r24,__zero_reg__
 639 0342 00C0      		rjmp .L19
 217:../drivers/bmp180.c ****             timer_register(BMP180_TIMER_ID, 1, bmp_pres_read);
 640               		.loc 1 217 0
 641 0344 1092 0000 		sts bmp_state,__zero_reg__
 218:../drivers/bmp180.c ****             return;
 642               		.loc 1 218 0
 643 0348 40E0      		ldi r20,lo8(gs(bmp_pres_read))
 644 034a 50E0      		ldi r21,hi8(gs(bmp_pres_read))
 645               	.L43:
 646 034c 61E0      		ldi r22,lo8(1)
 647 034e 84E0      		ldi r24,lo8(4)
 648               	/* epilogue start */
 223:../drivers/bmp180.c ****             {
 224:../drivers/bmp180.c ****                 return;
 225:../drivers/bmp180.c ****             }
 226:../drivers/bmp180.c ****             bmp_state = BMP_IDLE;
 227:../drivers/bmp180.c ****             return;
 228:../drivers/bmp180.c ****         case BMP_PRES_READY:
 229:../drivers/bmp180.c ****             calculate_pressure();
 230:../drivers/bmp180.c ****             timer_register(BMP180_TIMER_ID, BMP180_READ_PERIOD_S*10, bmp_read);
 231:../drivers/bmp180.c ****             bmp_state = BMP_IDLE;
 232:../drivers/bmp180.c ****             return;
 233:../drivers/bmp180.c ****     }
 234:../drivers/bmp180.c **** }
 649               		.loc 1 234 0
 650 0350 DF91      		pop r29
 651 0352 CF91      		pop r28
 652 0354 1F91      		pop r17
 653 0356 0F91      		pop r16
 654 0358 FF90      		pop r15
 655 035a EF90      		pop r14
 656 035c DF90      		pop r13
 657 035e CF90      		pop r12
 658 0360 BF90      		pop r11
 659 0362 AF90      		pop r10
 660 0364 9F90      		pop r9
 661 0366 8F90      		pop r8
 662 0368 7F90      		pop r7
 663 036a 6F90      		pop r6
 664 036c 5F90      		pop r5
 665 036e 4F90      		pop r4
 666 0370 3F90      		pop r3
 667 0372 2F90      		pop r2
 218:../drivers/bmp180.c ****             return;
 668               		.loc 1 218 0
 669 0374 0C94 0000 		jmp timer_register
 670               	.LVL29:
 671               	.L27:
 672 0378 C090 0000 		lds r12,bmp_buf
 673 037c D090 0000 		lds r13,bmp_buf+1
 674 0380 DC24      		eor r13,r12
 675 0382 CD24      		eor r12,r13
 676 0384 DC24      		eor r13,r12
 677 0386 E12C      		mov r14,__zero_reg__
 678 0388 F12C      		mov r15,__zero_reg__
 679               	.LVL30:
 680               	.LBB12:
 681               	.LBB13:
 146:../drivers/bmp180.c ****     up |= bmp_buf[2];
 682               		.loc 1 146 0
 683 038a FE2C      		mov r15,r14
 684 038c ED2C      		mov r14,r13
 685 038e DC2C      		mov r13,r12
 686 0390 CC24      		clr r12
 687               	.LVL31:
 147:../drivers/bmp180.c ****     up >>= 8 - BMP_PRES_OSS;
 688               		.loc 1 147 0
 689 0392 8091 0000 		lds r24,bmp_buf+2
 690 0396 C82A      		or r12,r24
 691               	.LVL32:
 150:../drivers/bmp180.c ****     x1 = (bmp_b2 * (b6 * b6) >> 12) >> 11;
 692               		.loc 1 150 0
 693 0398 E091 0000 		lds r30,bmp_b5
 694 039c F091 0000 		lds r31,bmp_b5+1
 695 03a0 E05A      		subi r30,-96
 696 03a2 FF40      		sbci r31,15
 697               	.LVL33:
 151:../drivers/bmp180.c ****     x2 = (bmp_ac2 * b6) >> 11;
 698               		.loc 1 151 0
 699 03a4 9F01      		movw r18,r30
 700 03a6 DF01      		movw r26,r30
 701 03a8 0E94 0000 		call __mulhisi3
 702 03ac 4B01      		movw r8,r22
 703 03ae 5C01      		movw r10,r24
 704               	.LVL34:
 152:../drivers/bmp180.c ****     x3 = x1 + x2;
 705               		.loc 1 152 0
 706 03b0 C091 0000 		lds r28,bmp_ac2
 707 03b4 D091 0000 		lds r29,bmp_ac2+1
 708               	.LVL35:
 154:../drivers/bmp180.c **** 
 709               		.loc 1 154 0
 710 03b8 2090 0000 		lds r2,bmp_ac1
 711 03bc 3090 0000 		lds r3,bmp_ac1+1
 712               	.LVL36:
 156:../drivers/bmp180.c ****     x2 = (bmp_b1 * ((b6 * b6) >> 12)) >> 16;
 713               		.loc 1 156 0
 714 03c0 0091 0000 		lds r16,bmp_ac3
 715 03c4 1091 0000 		lds r17,bmp_ac3+1
 716               	.LVL37:
 159:../drivers/bmp180.c **** 
 717               		.loc 1 159 0
 718 03c8 A091 0000 		lds r26,bmp_b1
 719 03cc B091 0000 		lds r27,bmp_b1+1
 720 03d0 9B01      		movw r18,r22
 721 03d2 AC01      		movw r20,r24
 722 03d4 8CE0      		ldi r24,12
 723               		1:
 724 03d6 5595      		asr r21
 725 03d8 4795      		ror r20
 726 03da 3795      		ror r19
 727 03dc 2795      		ror r18
 728 03de 8A95      		dec r24
 729 03e0 01F4      		brne 1b
 730 03e2 0E94 0000 		call __mulshisi3
 731               	.LVL38:
 732 03e6 2C01      		movw r4,r24
 733 03e8 7724      		clr r7
 734 03ea 57FC      		sbrc r5,7
 735 03ec 7094      		com r7
 736 03ee 672C      		mov r6,r7
 737               	.LVL39:
 738 03f0 9F01      		movw r18,r30
 739 03f2 D801      		movw r26,r16
 740 03f4 0E94 0000 		call __mulhisi3
 741               	.LVL40:
 742 03f8 DC01      		movw r26,r24
 743 03fa CB01      		movw r24,r22
 744 03fc 3DE0      		ldi r19,13
 745               		1:
 746 03fe B595      		asr r27
 747 0400 A795      		ror r26
 748 0402 9795      		ror r25
 749 0404 8795      		ror r24
 750 0406 3A95      		dec r19
 751 0408 01F4      		brne 1b
 752               	.LVL41:
 753 040a 840D      		add r24,r4
 754 040c 951D      		adc r25,r5
 755 040e A61D      		adc r26,r6
 756 0410 B71D      		adc r27,r7
 757               	.LVL42:
 758 0412 0296      		adiw r24,2
 759 0414 A11D      		adc r26,__zero_reg__
 760 0416 B11D      		adc r27,__zero_reg__
 761 0418 42E0      		ldi r20,2
 762               		1:
 763 041a B595      		asr r27
 764 041c A795      		ror r26
 765 041e 9795      		ror r25
 766 0420 8795      		ror r24
 767 0422 4A95      		dec r20
 768 0424 01F4      		brne 1b
 769 0426 9C01      		movw r18,r24
 770 0428 AD01      		movw r20,r26
 771 042a 3058      		subi r19,-128
 772 042c 4F4F      		sbci r20,-1
 773 042e 5F4F      		sbci r21,-1
 774 0430 A091 0000 		lds r26,bmp_ac4
 775 0434 B091 0000 		lds r27,bmp_ac4+1
 776 0438 0E94 0000 		call __muluhisi3
 777               	.LVL43:
 778 043c 2B01      		movw r4,r22
 779 043e 3C01      		movw r6,r24
 780               	.LVL44:
 781 0440 5FE0      		ldi r21,15
 782               		1:
 783 0442 7694      		lsr r7
 784 0444 6794      		ror r6
 785 0446 5794      		ror r5
 786 0448 4794      		ror r4
 787 044a 5A95      		dec r21
 788 044c 01F4      		brne 1b
 789               	.LVL45:
 161:../drivers/bmp180.c ****     if (b7 < 0x80000000)
 790               		.loc 1 161 0
 791 044e 65E0      		ldi r22,5
 792               		1:
 793 0450 F594      		asr r15
 794 0452 E794      		ror r14
 795 0454 D794      		ror r13
 796 0456 C794      		ror r12
 797 0458 6A95      		dec r22
 798 045a 01F4      		brne 1b
 799               	.LVL46:
 800 045c A091 0000 		lds r26,bmp_b2
 801 0460 B091 0000 		lds r27,bmp_b2+1
 802 0464 A501      		movw r20,r10
 803 0466 9401      		movw r18,r8
 804 0468 0E94 0000 		call __mulshisi3
 805 046c 4B01      		movw r8,r22
 806 046e 5C01      		movw r10,r24
 807               	.LVL47:
 808 0470 77E1      		ldi r23,23
 809               		1:
 810 0472 B594      		asr r11
 811 0474 A794      		ror r10
 812 0476 9794      		ror r9
 813 0478 8794      		ror r8
 814 047a 7A95      		dec r23
 815 047c 01F4      		brne 1b
 816 047e 9F01      		movw r18,r30
 817               	.LVL48:
 818 0480 DE01      		movw r26,r28
 819 0482 0E94 0000 		call __mulhisi3
 820 0486 DC01      		movw r26,r24
 821 0488 CB01      		movw r24,r22
 822 048a EBE0      		ldi r30,11
 823               		1:
 824 048c B595      		asr r27
 825 048e A795      		ror r26
 826 0490 9795      		ror r25
 827 0492 8795      		ror r24
 828 0494 EA95      		dec r30
 829 0496 01F4      		brne 1b
 830               	.LVL49:
 831 0498 880D      		add r24,r8
 832 049a 991D      		adc r25,r9
 833 049c AA1D      		adc r26,r10
 834 049e BB1D      		adc r27,r11
 835               	.LVL50:
 836 04a0 A101      		movw r20,r2
 837 04a2 330C      		lsl r3
 838 04a4 660B      		sbc r22,r22
 839 04a6 770B      		sbc r23,r23
 840 04a8 F2E0      		ldi r31,2
 841               		1:
 842 04aa 440F      		lsl r20
 843 04ac 551F      		rol r21
 844 04ae 661F      		rol r22
 845 04b0 771F      		rol r23
 846 04b2 FA95      		dec r31
 847 04b4 01F4      		brne 1b
 848 04b6 840F      		add r24,r20
 849 04b8 951F      		adc r25,r21
 850 04ba A61F      		adc r26,r22
 851 04bc B71F      		adc r27,r23
 852 04be 880F      		lsl r24
 853 04c0 991F      		rol r25
 854 04c2 AA1F      		rol r26
 855 04c4 BB1F      		rol r27
 856               	.LVL51:
 857 04c6 A701      		movw r20,r14
 858 04c8 9601      		movw r18,r12
 859               	.LVL52:
 860 04ca 281B      		sub r18,r24
 861 04cc 390B      		sbc r19,r25
 862 04ce 4A0B      		sbc r20,r26
 863 04d0 5B0B      		sbc r21,r27
 864 04d2 AAE6      		ldi r26,lo8(106)
 865 04d4 B8E1      		ldi r27,lo8(24)
 866               	.LVL53:
 867 04d6 0E94 0000 		call __muluhisi3
 868               	.LVL54:
 162:../drivers/bmp180.c ****     {
 869               		.loc 1 162 0
 870 04da 97FD      		sbrc r25,7
 871 04dc 00C0      		rjmp .L31
 164:../drivers/bmp180.c ****     }
 872               		.loc 1 164 0
 873 04de 660F      		lsl r22
 874 04e0 771F      		rol r23
 875 04e2 881F      		rol r24
 876 04e4 991F      		rol r25
 877               	.LVL55:
 878 04e6 A301      		movw r20,r6
 879 04e8 9201      		movw r18,r4
 880               	.LVL56:
 881 04ea 0E94 0000 		call __udivmodsi4
 882               	.LVL57:
 883 04ee 4901      		movw r8,r18
 884 04f0 5A01      		movw r10,r20
 885               	.LVL58:
 886 04f2 00C0      		rjmp .L32
 887               	.LVL59:
 888               	.L31:
 168:../drivers/bmp180.c ****     }
 889               		.loc 1 168 0
 890 04f4 A301      		movw r20,r6
 891 04f6 9201      		movw r18,r4
 892 04f8 0E94 0000 		call __udivmodsi4
 893               	.LVL60:
 894 04fc 4901      		movw r8,r18
 895 04fe 5A01      		movw r10,r20
 896 0500 880C      		lsl r8
 897 0502 991C      		rol r9
 898 0504 AA1C      		rol r10
 899 0506 BB1C      		rol r11
 900               	.LVL61:
 901               	.L32:
 171:../drivers/bmp180.c ****     x1 = (x1 * 3038) >> 16;
 902               		.loc 1 171 0
 903 0508 9927      		clr r25
 904 050a B7FC      		sbrc r11,7
 905 050c 9A95      		dec r25
 906 050e 8B2D      		mov r24,r11
 907 0510 7A2D      		mov r23,r10
 908 0512 692D      		mov r22,r9
 909               	.LVL62:
 172:../drivers/bmp180.c ****     x2 = (-7357 * p) >> 16;
 910               		.loc 1 172 0
 911 0514 9B01      		movw r18,r22
 912 0516 AC01      		movw r20,r24
 913 0518 0E94 0000 		call __mulsi3
 914               	.LVL63:
 915 051c 9B01      		movw r18,r22
 916 051e AC01      		movw r20,r24
 917 0520 AEED      		ldi r26,lo8(-34)
 918 0522 BBE0      		ldi r27,lo8(11)
 919 0524 0E94 0000 		call __muluhisi3
 920               	.LVL64:
 921 0528 6B01      		movw r12,r22
 922 052a 7C01      		movw r14,r24
 923               	.LVL65:
 174:../drivers/bmp180.c ****     if (pressure_cb)
 924               		.loc 1 174 0
 925 052c A3E4      		ldi r26,lo8(67)
 926 052e B3EE      		ldi r27,lo8(-29)
 927 0530 A501      		movw r20,r10
 928 0532 9401      		movw r18,r8
 929 0534 0E94 0000 		call __mulohisi3
 930 0538 BB27      		clr r27
 931 053a 97FD      		sbrc r25,7
 932 053c B095      		com r27
 933 053e AB2F      		mov r26,r27
 934 0540 6701      		movw r12,r14
 935 0542 FF24      		clr r15
 936 0544 D7FC      		sbrc r13,7
 937 0546 F094      		com r15
 938 0548 EF2C      		mov r14,r15
 939               	.LVL66:
 940 054a 8C0D      		add r24,r12
 941 054c 9D1D      		adc r25,r13
 942 054e AE1D      		adc r26,r14
 943 0550 BF1D      		adc r27,r15
 944 0552 8153      		subi r24,49
 945 0554 914F      		sbci r25,-15
 946 0556 AF4F      		sbci r26,-1
 947 0558 BF4F      		sbci r27,-1
 948 055a 44E0      		ldi r20,4
 949               		1:
 950 055c B595      		asr r27
 951 055e A795      		ror r26
 952 0560 9795      		ror r25
 953 0562 8795      		ror r24
 954 0564 4A95      		dec r20
 955 0566 01F4      		brne 1b
 956 0568 BC01      		movw r22,r24
 957 056a CD01      		movw r24,r26
 958 056c 680D      		add r22,r8
 959 056e 791D      		adc r23,r9
 960 0570 8A1D      		adc r24,r10
 961 0572 9B1D      		adc r25,r11
 962               	.LVL67:
 175:../drivers/bmp180.c ****     {
 963               		.loc 1 175 0
 964 0574 E091 0000 		lds r30,pressure_cb
 965 0578 F091 0000 		lds r31,pressure_cb+1
 966 057c 3097      		sbiw r30,0
 967 057e 01F0      		breq .L33
 177:../drivers/bmp180.c ****     }
 968               		.loc 1 177 0
 969 0580 0995      		icall
 970               	.LVL68:
 971               	.L33:
 972               	.LBE13:
 973               	.LBE12:
 230:../drivers/bmp180.c ****             bmp_state = BMP_IDLE;
 974               		.loc 1 230 0
 975 0582 40E0      		ldi r20,lo8(gs(bmp_read))
 976 0584 50E0      		ldi r21,hi8(gs(bmp_read))
 977 0586 68EC      		ldi r22,lo8(-56)
 978 0588 84E0      		ldi r24,lo8(4)
 979 058a 0E94 0000 		call timer_register
 980               	.LVL69:
 981               	.L42:
 231:../drivers/bmp180.c ****             return;
 982               		.loc 1 231 0
 983 058e 1092 0000 		sts bmp_state,__zero_reg__
 984               	.L19:
 985               	/* epilogue start */
 986               		.loc 1 234 0
 987 0592 DF91      		pop r29
 988 0594 CF91      		pop r28
 989 0596 1F91      		pop r17
 990 0598 0F91      		pop r16
 991 059a FF90      		pop r15
 992 059c EF90      		pop r14
 993 059e DF90      		pop r13
 994 05a0 CF90      		pop r12
 995 05a2 BF90      		pop r11
 996 05a4 AF90      		pop r10
 997 05a6 9F90      		pop r9
 998 05a8 8F90      		pop r8
 999 05aa 7F90      		pop r7
 1000 05ac 6F90      		pop r6
 1001 05ae 5F90      		pop r5
 1002 05b0 4F90      		pop r4
 1003 05b2 3F90      		pop r3
 1004 05b4 2F90      		pop r2
 1005 05b6 0895      		ret
 1006               		.cfi_endproc
 1007               	.LFE14:
 1009               		.local	pressure_cb
 1010               		.comm	pressure_cb,2,1
 1011               		.local	temperature_cb
 1012               		.comm	temperature_cb,2,1
 1013               		.local	bmp_state
 1014               		.comm	bmp_state,1,1
 1015               		.local	bmp_buf
 1016               		.comm	bmp_buf,3,1
 1017               		.local	bmp_md
 1018               		.comm	bmp_md,2,1
 1019               		.local	bmp_mc
 1020               		.comm	bmp_mc,2,1
 1021               		.local	bmp_b5
 1022               		.comm	bmp_b5,2,1
 1023               		.local	bmp_b2
 1024               		.comm	bmp_b2,2,1
 1025               		.local	bmp_b1
 1026               		.comm	bmp_b1,2,1
 1027               		.local	bmp_ac6
 1028               		.comm	bmp_ac6,2,1
 1029               		.local	bmp_ac5
 1030               		.comm	bmp_ac5,2,1
 1031               		.local	bmp_ac4
 1032               		.comm	bmp_ac4,2,1
 1033               		.local	bmp_ac3
 1034               		.comm	bmp_ac3,2,1
 1035               		.local	bmp_ac2
 1036               		.comm	bmp_ac2,2,1
 1037               		.local	bmp_ac1
 1038               		.comm	bmp_ac1,2,1
 1039               	.Letext0:
 1040               		.file 3 "/usr/lib/avr/include/stdint.h"
 1041               		.file 4 "../drivers/bmp180.h"
 1042               		.file 5 "../drivers/timer.h"
 1043               		.file 6 "../drivers/TWI.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bmp180.c
     /tmp/ccGkXBX0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccGkXBX0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccGkXBX0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccGkXBX0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccGkXBX0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccGkXBX0.s:11     .text:0000000000000000 bmp_temp_ready
     /tmp/ccGkXBX0.s:1012   .bss:0000000000000004 bmp_state
     /tmp/ccGkXBX0.s:28     .text:0000000000000008 bmp_pres_ready
     /tmp/ccGkXBX0.s:44     .text:0000000000000010 bmp_read
     /tmp/ccGkXBX0.s:64     .text:000000000000001e bmp_pres_read
     /tmp/ccGkXBX0.s:84     .text:000000000000002c bmp_temp_read
     /tmp/ccGkXBX0.s:105    .text:000000000000003a bmp180_init
     /tmp/ccGkXBX0.s:1036   .bss:000000000000001c bmp_ac1
     /tmp/ccGkXBX0.s:1034   .bss:000000000000001a bmp_ac2
     /tmp/ccGkXBX0.s:1032   .bss:0000000000000018 bmp_ac3
     /tmp/ccGkXBX0.s:1030   .bss:0000000000000016 bmp_ac4
     /tmp/ccGkXBX0.s:1028   .bss:0000000000000014 bmp_ac5
     /tmp/ccGkXBX0.s:1026   .bss:0000000000000012 bmp_ac6
     /tmp/ccGkXBX0.s:1024   .bss:0000000000000010 bmp_b1
     /tmp/ccGkXBX0.s:1022   .bss:000000000000000e bmp_b2
     /tmp/ccGkXBX0.s:1018   .bss:000000000000000a bmp_mc
     /tmp/ccGkXBX0.s:1016   .bss:0000000000000008 bmp_md
     /tmp/ccGkXBX0.s:1010   .bss:0000000000000002 temperature_cb
                             .bss:0000000000000000 pressure_cb
     /tmp/ccGkXBX0.s:354    .text:00000000000001b6 bmp180_handler
     /tmp/ccGkXBX0.s:1014   .bss:0000000000000005 bmp_buf
     /tmp/ccGkXBX0.s:1020   .bss:000000000000000c bmp_b5

UNDEFINED SYMBOLS
timer_stop
twi_ready
twi_master_transfer
timer_register
__muluhisi3
__divmodsi4
__mulhisi3
__mulshisi3
__udivmodsi4
__mulsi3
__mulohisi3
__do_clear_bss
