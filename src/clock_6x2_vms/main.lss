
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00003714  000037a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000453  0080015e  0080015e  00003806  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004680  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000177a  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dd7  00000000  00000000  00009802  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b7c  00000000  00000000  0000b5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc1  00000000  00000000  0000c158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034c4  00000000  00000000  0000d119  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000105dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__ctors_end>
       4:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
       8:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
       c:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      10:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      14:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_5>
      18:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      1c:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      20:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      24:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      28:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      2c:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_11>
      30:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      34:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      38:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__vector_14>
      3c:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__vector_15>
      40:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      44:	0c 94 07 13 	jmp	0x260e	; 0x260e <__vector_17>
      48:	0c 94 87 11 	jmp	0x230e	; 0x230e <__vector_18>
      4c:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__vector_19>
      50:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      54:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      58:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      5c:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>
      60:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__vector_24>
      64:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 09       	sbc	r16, r0
      70:	74 4c       	sbci	r23, 0xC4	; 196
      72:	60 00       	.word	0x0060	; ????
      74:	00 09       	sbc	r16, r0
      76:	46 d2       	rcall	.+1164   	; 0x504 <cyrillic5table+0xca>
      78:	80 00       	.word	0x0080	; ????
      7a:	00 0f       	add	r16, r16
      7c:	75 52       	subi	r23, 0x25	; 37
      7e:	e0 00       	.word	0x00e0	; ????
      80:	00 09       	sbc	r16, r0
      82:	44 5e       	subi	r20, 0xE4	; 228
      84:	80 00       	.word	0x0080	; ????
      86:	00 09       	sbc	r16, r0
      88:	74 52       	subi	r23, 0x24	; 36
      8a:	60 00       	.word	0x0060	; ????
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 00       	nop
      96:	00 00       	nop
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 64       	ori	r16, 0x40	; 64
      a0:	ba 4c       	sbci	r27, 0xCA	; 202
      a2:	35 00       	.word	0x0035	; ????
      a4:	00 94       	com	r0
      a6:	a2 52       	subi	r26, 0x22	; 34
      a8:	55 00       	.word	0x0055	; ????
      aa:	00 85       	ldd	r16, Z+8	; 0x08
      ac:	a3 d2       	rcall	.+1350   	; 0x5f4 <cyrillic5table+0x1ba>
      ae:	53 00       	.word	0x0053	; ????
      b0:	00 96       	adiw	r24, 0x00	; 0
      b2:	a2 5e       	subi	r26, 0xE2	; 226
      b4:	51 00       	.word	0x0051	; ????
      b6:	00 64       	ori	r16, 0x40	; 64
      b8:	a2 52       	subi	r26, 0x22	; 34
      ba:	96 00       	.word	0x0096	; ????
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	00 00       	nop

000000c8 <bit_reverse_table256>:
      c8:	00 80 40 c0 20 a0 60 e0 10 90 50 d0 30 b0 70 f0     ..@. .`...P.0.p.
      d8:	08 88 48 c8 28 a8 68 e8 18 98 58 d8 38 b8 78 f8     ..H.(.h...X.8.x.
      e8:	04 84 44 c4 24 a4 64 e4 14 94 54 d4 34 b4 74 f4     ..D.$.d...T.4.t.
      f8:	0c 8c 4c cc 2c ac 6c ec 1c 9c 5c dc 3c bc 7c fc     ..L.,.l...\.<.|.
     108:	02 82 42 c2 22 a2 62 e2 12 92 52 d2 32 b2 72 f2     ..B.".b...R.2.r.
     118:	0a 8a 4a ca 2a aa 6a ea 1a 9a 5a da 3a ba 7a fa     ..J.*.j...Z.:.z.
     128:	06 86 46 c6 26 a6 66 e6 16 96 56 d6 36 b6 76 f6     ..F.&.f...V.6.v.
     138:	0e 8e 4e ce 2e ae 6e ee 1e 9e 5e de 3e be 7e fe     ..N...n...^.>.~.
     148:	01 81 41 c1 21 a1 61 e1 11 91 51 d1 31 b1 71 f1     ..A.!.a...Q.1.q.
     158:	09 89 49 c9 29 a9 69 e9 19 99 59 d9 39 b9 79 f9     ..I.).i...Y.9.y.
     168:	05 85 45 c5 25 a5 65 e5 15 95 55 d5 35 b5 75 f5     ..E.%.e...U.5.u.
     178:	0d 8d 4d cd 2d ad 6d ed 1d 9d 5d dd 3d bd 7d fd     ..M.-.m...].=.}.
     188:	03 83 43 c3 23 a3 63 e3 13 93 53 d3 33 b3 73 f3     ..C.#.c...S.3.s.
     198:	0b 8b 4b cb 2b ab 6b eb 1b 9b 5b db 3b bb 7b fb     ..K.+.k...[.;.{.
     1a8:	07 87 47 c7 27 a7 67 e7 17 97 57 d7 37 b7 77 f7     ..G.'.g...W.7.w.
     1b8:	0f 8f 4f cf 2f af 6f ef 1f 9f 5f df 3f bf 7f ff     ..O./.o..._.?...

000001c8 <DotDigital7table>:
     1c8:	70 88 98 a8 c8 88 70 20 60 a0 20 20 20 f8 70 88     p.....p `.   .p.
     1d8:	08 30 40 80 f8 70 88 08 30 08 88 70 30 50 90 f8     .0@..p..0..p0P..
     1e8:	10 10 10 f8 80 80 f0 08 08 f0 70 88 80 f0 88 88     ..........p.....
     1f8:	70 f8 88 08 10 20 20 20 70 88 88 70 88 88 70 70     p....   p..p..pp
     208:	88 88 78 08 88 70                                   ..x..p

0000020e <TripleDotDigital15table>:
     20e:	7f c0 ff e0 ff e0 e0 e0 e1 e0 e3 e0 e7 e0 ee e0     ................
     21e:	fc e0 f8 e0 f0 e0 e0 e0 ff e0 ff e0 7f c0 fe 00     ................
     22e:	fe 00 fe 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     23e:	0e 00 0e 00 0e 00 ff e0 ff e0 ff e0 7f c0 ff e0     ................
     24e:	ff e0 e0 e0 00 e0 00 e0 7f e0 ff e0 ff c0 e0 00     ................
     25e:	e0 00 e0 00 ff e0 ff e0 ff e0 7f c0 ff e0 ff e0     ................
     26e:	e0 e0 00 e0 00 e0 1f e0 1f c0 1f e0 00 e0 00 e0     ................
     27e:	e0 e0 ff e0 ff e0 7f c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     28e:	e0 e0 e0 e0 ff e0 ff e0 ff e0 00 e0 00 e0 00 e0     ................
     29e:	00 e0 00 e0 00 e0 ff e0 ff e0 ff e0 e0 00 e0 00     ................
     2ae:	e0 00 ff c0 ff e0 ff e0 00 e0 00 e0 e0 e0 ff e0     ................
     2be:	ff e0 7f c0 7f c0 ff e0 ff e0 e0 e0 e0 00 e0 00     ................
     2ce:	ff c0 ff e0 ff e0 e0 e0 e0 e0 e0 e0 ff e0 ff e0     ................
     2de:	7f c0 ff e0 ff e0 ff e0 00 e0 00 e0 00 e0 00 e0     ................
     2ee:	00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0     ................
     2fe:	7f c0 ff e0 ff e0 e0 e0 e0 e0 e0 e0 ff e0 7f c0     ................
     30e:	ff e0 e0 e0 e0 e0 e0 e0 ff e0 ff e0 7f c0 7f c0     ................
     31e:	ff e0 ff e0 e0 e0 e0 e0 e0 e0 ff e0 ff e0 7f e0     ................
     32e:	00 e0 00 e0 e0 e0 ff e0 ff e0 7f c0                 ............

0000033a <cyrillic5width>:
     33a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     34a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     35a:	03 02 04 08 06 08 06 02 04 04 08 06 02 05 02 05     ................
     36a:	05 03 05 05 06 05 05 05 05 05 02 02 04 05 04 05     ................
     37a:	08 08 06 06 06 05 05 07 06 04 06 06 05 08 07 07     ................
     38a:	05 08 06 05 06 06 08 08 06 08 06 04 05 04 06 06     ................
     39a:	02 08 06 06 06 05 05 07 06 04 06 06 05 08 07 07     ................
     3aa:	05 08 06 05 06 06 08 08 06 08 06 04 02 04 03 03     ................
     3ba:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     3ca:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     3da:	03 02 04 08 06 08 06 04 04 04 08 06 02 05 02 05     ................
     3ea:	05 03 05 01 06 05 05 05 05 05 03 02 04 05 04 03     ................
     3fa:	08 08 05 06 06 05 05 07 06 04 06 06 05 05 07 05     ................
     40a:	05 05 06 05 06 06 08 05 06 08 06 04 05 04 06 06     ................
     41a:	04 03 03 03 04 03 05 07 04 04 03 03 05 03 03 03     ................
     42a:	03 03 03 03 05 03 04 03 05 06 06 04 02 04 05 03     ................

0000043a <cyrillic5table>:
     43a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     46a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     47a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     48a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     49a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4aa:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4ba:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4ca:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4da:	00 00 00 00 00 01 01 01 01 01 05 05 00 00 00 00     ................
     4ea:	28 7e 14 3f 00 00 00 00 00 42 25 15 2a 54 02 05     (~.?.....B%.*T..
     4fa:	05 02 15 c0 40 80 00 00 04 02 01 01 01 01 02 04     ....@...........
     50a:	04 04 08 2a 1c 7f 1c 00 04 04 1f 04 00 00 00 00     ...*............
     51a:	00 00 00 00 0f 00 00 00 00 00 00 08 08 04 06 02     ................
     52a:	60 90 90 90 90 40 c0 40 40 40 60 90 10 20 40 60     `....@.@@@`.. @`
     53a:	90 10 60 10 04 04 0a 09 1f 0f 01 07 08 08 06 01     ..`.............
     54a:	07 09 09 0f 08 04 04 02 06 09 09 06 09 06 09 09     ................
     55a:	09 0e 00 00 01 00 01 00 00 00 01 00 00 04 02 01     ................
     56a:	02 00 00 0f 00 0f 00 01 02 04 02 07 08 04 02 02     ................
     57a:	3c 42 59 55 39 08 08 14 14 3e 0f 11 11 0f 11 0c     <BYU9....>......
     58a:	12 01 01 01 07 09 11 11 11 0f 01 01 07 01 0f 01     ................
     59a:	01 07 01 0c 12 01 39 21 11 11 11 1f 11 07 02 02     ......9!........
     5aa:	02 02 10 10 10 10 10 11 09 05 03 05 01 01 01 01     ................
     5ba:	01 41 63 63 55 55 21 23 25 2d 29 0c 12 21 21 21     .AccUU!#%-)..!!!
     5ca:	07 09 09 07 01 0c 12 21 21 21 0f 11 11 0f 09 06     .......!!!......
     5da:	09 01 06 08 1f 04 04 04 04 11 11 11 11 11 41 22     ..............A"
     5ea:	22 14 14 49 49 49 55 55 11 1b 0a 04 0a 41 22 14     "..IIIUU.....A".
     5fa:	08 08 1f 10 08 04 02 07 01 01 01 01 01 01 02 06     ................
     60a:	04 07 04 04 04 04 04 0a 11 00 00 00 00 00 00 00     ................
     61a:	01 01 00 00 00 08 08 14 14 3e 0f 11 11 0f 11 0c     .........>......
     62a:	12 01 01 01 07 09 11 11 11 0f 01 01 07 01 0f 01     ................
     63a:	01 07 01 0c 12 01 39 21 11 11 11 1f 11 07 02 02     ......9!........
     64a:	02 02 10 10 10 10 10 11 09 05 03 05 01 01 01 01     ................
     65a:	01 41 63 63 55 55 21 23 25 2d 29 0c 12 21 21 21     .AccUU!#%-)..!!!
     66a:	07 09 09 07 01 0c 12 21 21 21 0f 11 11 0f 09 06     .......!!!......
     67a:	09 01 06 08 1f 04 04 04 04 11 11 11 11 11 41 22     ..............A"
     68a:	22 14 14 49 49 49 55 55 11 1b 0a 04 0a 41 22 14     "..IIIUU.....A".
     69a:	08 08 1f 10 08 04 02 04 02 01 01 01 01 01 01 01     ................
     6aa:	01 01 02 04 04 04 00 00 00 00 00 00 00 00 00 00     ................
     6ba:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6ca:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6da:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6ea:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6fa:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     70a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     71a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     72a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     73a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     74a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     75a:	00 00 00 00 00 01 01 01 01 01 05 05 00 00 00 00     ................
     76a:	28 7e 14 3f 00 00 00 00 00 42 25 15 2a 54 02 05     (~.?.....B%.*T..
     77a:	05 02 15 05 05 00 00 00 04 02 01 01 01 01 02 04     ................
     78a:	04 04 08 2a 1c 7f 1c 00 04 04 1f 04 00 00 00 00     ...*............
     79a:	00 00 00 00 0f 00 00 00 00 00 00 08 08 04 06 02     ................
     7aa:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80     ................
     7ba:	00 80 80 80 04 04 0a 09 1f 0f 01 07 08 08 06 01     ................
     7ca:	07 09 09 0f 08 04 04 02 06 09 09 06 09 06 09 09     ................
     7da:	09 0e 60 80 c0 80 60 00 00 00 01 00 00 04 02 01     ..`...`.........
     7ea:	02 00 00 0f 00 0f 00 01 02 04 02 a0 00 40 40 40     .............@@@
     7fa:	3c 42 59 55 39 08 08 14 14 3e f0 88 88 f0 88 0c     <BYU9....>......
     80a:	12 01 01 01 07 09 11 11 11 0f 01 01 07 01 0f 01     ................
     81a:	01 07 01 0c 12 01 39 21 11 11 11 1f 11 07 02 02     ......9!........
     82a:	02 02 10 10 10 10 10 11 09 05 03 05 01 01 01 01     ................
     83a:	01 88 88 88 f8 88 21 23 25 2d 29 f8 88 88 88 88     ......!#%-).....
     84a:	07 09 09 07 01 70 88 80 80 80 0f 11 11 0f 09 06     .....p..........
     85a:	09 01 06 08 1f 04 04 04 04 11 11 11 11 11 41 22     ..............A"
     86a:	22 14 14 88 88 88 78 08 11 1b 0a 04 0a 41 22 14     ".....x......A".
     87a:	08 08 1f 10 08 04 02 07 01 01 01 01 01 01 02 06     ................
     88a:	04 07 04 04 04 04 04 0a 11 00 00 00 00 00 00 00     ................
     89a:	60 90 90 f0 90 e0 80 c0 a0 c0 c0 a0 c0 a0 c0 e0     `...............
     8aa:	80 80 80 80 30 50 50 f0 90 e0 80 e0 80 e0 a8 a8     ....0PP.........
     8ba:	70 a8 a8 c0 20 c0 20 c0 90 90 b0 d0 90 60 00 90     p... . ......`..
     8ca:	b0 d0 a0 a0 c0 a0 a0 60 a0 a0 a0 a0 88 d8 a8 88     .......`........
     8da:	88 a0 a0 e0 a0 a0 40 a0 a0 a0 40 e0 a0 a0 a0 a0     ......@...@.....
     8ea:	c0 a0 c0 80 80 40 a0 80 a0 40 e0 40 40 40 40 a0     .....@...@.@@@@.
     8fa:	a0 60 20 c0 70 a8 a8 70 20 a0 a0 40 a0 a0 a0 a0     .` .p..p ..@....
     90a:	a0 f0 10 a0 a0 60 20 20 a8 a8 a8 a8 f8 a8 a8 a8     .....`  ........
     91a:	fc 04 1f 10 08 04 02 04 02 01 01 01 80 80 c0 a0     ................
     92a:	c0 01 02 04 04 04 90 a8 e8 a8 90 60 a0 60 a0 a0     ...........`.`..

0000093a <cyrillic7width>:
     93a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     94a:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     95a:	03 02 04 08 06 08 06 02 04 04 08 06 02 05 02 05     ................
     96a:	05 03 05 05 06 05 05 05 05 05 02 02 04 05 04 05     ................
     97a:	08 08 06 06 06 05 05 07 06 04 06 06 05 08 07 07     ................
     98a:	05 08 06 05 06 06 08 08 06 08 06 04 05 04 06 06     ................
     99a:	02 08 06 06 06 05 05 07 06 04 06 06 05 08 07 07     ................
     9aa:	05 08 06 05 06 06 08 08 06 08 06 04 02 04 03 03     ................
     9ba:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     9ca:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
     9da:	03 02 04 08 06 08 06 04 04 04 08 06 02 05 02 05     ................
     9ea:	05 03 05 01 06 05 05 05 05 05 02 02 04 05 04 05     ................
     9fa:	08 08 05 06 06 05 05 07 06 04 06 06 05 05 07 05     ................
     a0a:	05 05 06 05 06 06 08 05 06 08 06 04 05 04 06 06     ................
     a1a:	05 05 04 06 05 05 05 07 05 05 04 05 05 05 05 05     ................
     a2a:	04 08 05 05 06 05 05 08 06 08 06 04 02 04 03 05     ................

00000a3a <cyrillic7table>:
     a3a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a4a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a5a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a6a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a7a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a8a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     a9a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aaa:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aba:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aca:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ada:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aea:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     afa:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b0a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b1a:	00 00 00 00 00 00 00 01 01 01 01 01 00 01 05 05     ................
     b2a:	00 00 00 00 00 00 28 7e 14 3f 0a 00 00 00 00 00     ......(~.?......
     b3a:	00 00 00 42 25 15 2a 54 52 21 02 05 05 02 15 09     ...B%.*TR!......
     b4a:	16 c0 40 80 00 00 00 00 04 02 01 01 01 02 04 01     ..@.............
     b5a:	02 04 04 04 02 01 08 2a 1c 7f 1c 2a 08 00 04 04     .......*...*....
     b6a:	1f 04 04 00 00 00 00 00 00 01 01 00 00 00 0f 00     ................
     b7a:	00 00 00 00 00 00 00 00 01 08 08 04 06 02 01 01     ................
     b8a:	60 90 90 90 90 90 60 40 c0 40 40 40 40 40 60 90     `.....`@.@@@@@`.
     b9a:	10 20 40 80 f0 60 90 10 60 10 90 60 04 04 0a 09     . @..`..`..`....
     baa:	1f 08 08 0f 01 07 08 08 09 06 06 01 07 09 09 09     ................
     bba:	06 0f 08 04 04 02 02 02 06 09 09 06 09 09 06 06     ................
     bca:	09 09 09 0e 08 06 00 00 01 00 01 00 00 00 00 00     ................
     bda:	01 00 01 01 00 04 02 01 02 04 00 00 00 0f 00 0f     ................
     bea:	00 00 00 01 02 04 02 01 00 07 08 04 02 02 00 02     ................
     bfa:	3c 42 59 55 39 02 3c 08 08 14 14 3e 22 41 0f 11     <BYU9.<....>"A..
     c0a:	11 0f 11 11 0f 0c 12 01 01 01 12 0c 07 09 11 11     ................
     c1a:	11 09 07 0f 01 01 07 01 01 0f 0f 01 01 07 01 01     ................
     c2a:	01 0c 12 01 39 21 12 0c 11 11 11 1f 11 11 11 07     ....9!..........
     c3a:	02 02 02 02 02 07 10 10 10 10 10 11 0e 11 09 05     ................
     c4a:	03 05 09 11 01 01 01 01 01 01 0f 41 63 63 55 55     ...........AccUU
     c5a:	49 49 21 23 25 2d 29 31 21 0c 12 21 21 21 12 0c     II!#%-)1!..!!!..
     c6a:	07 09 09 07 01 01 01 0c 12 21 21 21 12 6c 0f 11     .........!!!.l..
     c7a:	11 0f 09 11 11 06 09 01 06 08 09 06 1f 04 04 04     ................
     c8a:	04 04 04 11 11 11 11 11 11 0e 41 22 22 14 14 08     ..........A""...
     c9a:	08 49 49 49 55 55 22 22 11 1b 0a 04 0a 1b 11 41     .IIIUU"".......A
     caa:	22 14 08 08 08 08 1f 10 08 04 02 01 1f 07 01 01     "...............
     cba:	01 01 01 07 01 01 02 06 04 08 08 07 04 04 04 04     ................
     cca:	04 07 04 0a 11 00 00 00 00 00 00 00 00 00 00 1f     ................
     cda:	01 01 00 00 00 00 00 08 08 14 14 3e 22 41 0f 11     ...........>"A..
     cea:	11 0f 11 11 0f 0c 12 01 01 01 12 0c 07 09 11 11     ................
     cfa:	11 09 07 0f 01 01 07 01 01 0f 0f 01 01 07 01 01     ................
     d0a:	01 0c 12 01 39 21 12 0c 11 11 11 1f 11 11 11 07     ....9!..........
     d1a:	02 02 02 02 02 07 10 10 10 10 10 11 0e 11 09 05     ................
     d2a:	03 05 09 11 01 01 01 01 01 01 0f 41 63 63 55 55     ...........AccUU
     d3a:	49 49 21 23 25 2d 29 31 21 0c 12 21 21 21 12 0c     II!#%-)1!..!!!..
     d4a:	07 09 09 07 01 01 01 0c 12 21 21 21 12 6c 0f 11     .........!!!.l..
     d5a:	11 0f 09 11 11 06 09 01 06 08 09 06 1f 04 04 04     ................
     d6a:	04 04 04 11 11 11 11 11 11 0e 41 22 22 14 14 08     ..........A""...
     d7a:	08 49 49 49 55 55 22 22 11 1b 0a 04 0a 1b 11 41     .IIIUU"".......A
     d8a:	22 14 08 08 08 08 1f 10 08 04 02 01 1f 04 02 01     "...............
     d9a:	01 01 02 04 01 01 01 01 01 01 01 01 02 04 04 04     ................
     daa:	02 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dba:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dca:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dda:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dea:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     dfa:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e0a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e1a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e2a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e3a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e4a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e5a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e6a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e7a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e8a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e9a:	00 00 00 00 00 00 00 01 01 01 01 01 00 01 05 05     ................
     eaa:	00 00 00 00 00 00 28 7e 14 3f 0a 00 00 00 00 00     ......(~.?......
     eba:	00 00 00 42 25 15 2a 54 52 21 02 05 05 02 15 09     ...B%.*TR!......
     eca:	16 05 05 00 00 00 00 00 04 02 01 01 01 02 04 01     ................
     eda:	02 04 04 04 02 01 08 2a 1c 7f 1c 2a 08 00 04 04     .......*...*....
     eea:	1f 04 04 00 00 00 00 00 00 01 01 00 00 00 0f 00     ................
     efa:	00 00 00 00 00 00 00 00 01 08 08 04 06 02 01 01     ................
     f0a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f1a:	00 00 00 00 00 80 00 80 80 80 80 80 04 04 0a 09     ................
     f2a:	1f 08 08 0f 01 07 08 08 09 06 06 01 07 09 09 09     ................
     f3a:	06 0f 08 04 04 02 02 02 06 09 09 06 09 09 06 06     ................
     f4a:	09 09 09 0e 08 06 00 00 01 00 01 00 00 00 00 00     ................
     f5a:	01 00 01 01 00 04 02 01 02 04 00 00 00 0f 00 0f     ................
     f6a:	00 00 00 01 02 04 02 01 00 07 08 04 02 02 00 02     ................
     f7a:	3c 42 59 55 39 02 3c 08 08 14 14 3e 22 41 f0 88     <BYU9.<....>"A..
     f8a:	88 f0 88 88 f0 0c 12 01 01 01 12 0c 07 09 11 11     ................
     f9a:	11 09 07 0f 01 01 07 01 01 0f 0f 01 01 07 01 01     ................
     faa:	01 0c 12 01 39 21 12 0c 11 11 11 1f 11 11 11 07     ....9!..........
     fba:	02 02 02 02 02 07 10 10 10 10 10 11 0e 11 09 05     ................
     fca:	03 05 09 11 01 01 01 01 01 01 0f 88 88 88 f8 88     ................
     fda:	88 88 21 23 25 2d 29 31 21 f8 88 88 88 88 88 88     ..!#%-)1!.......
     fea:	07 09 09 07 01 01 01 70 88 80 80 80 88 70 0f 11     .......p.....p..
     ffa:	11 0f 09 11 11 06 09 01 06 08 09 06 1f 04 04 04     ................
    100a:	04 04 04 11 11 11 11 11 11 0e 41 22 22 14 14 08     ..........A""...
    101a:	08 88 88 88 78 08 08 08 11 1b 0a 04 0a 1b 11 41     ....x..........A
    102a:	22 14 08 08 08 08 1f 10 08 04 02 01 1f 07 01 01     "...............
    103a:	01 01 01 07 01 01 02 06 04 08 08 07 04 04 04 04     ................
    104a:	04 07 04 0a 11 00 00 00 00 00 00 00 00 00 00 1f     ................
    105a:	00 00 70 08 78 88 78 08 70 80 f0 88 88 70 00 00     ..p.x.x.p....p..
    106a:	e0 90 e0 90 e0 0c 12 01 01 01 12 0c 00 00 38 28     ..............8(
    107a:	48 f8 88 00 00 70 88 f8 80 78 0f 01 01 07 01 01     H....p...x......
    108a:	01 0c 12 01 39 21 12 0c 00 00 88 98 a8 c8 88 00     ....9!..........
    109a:	70 00 88 98 a8 c8 00 00 90 a0 c0 a0 90 00 00 78     p..............x
    10aa:	48 48 48 88 01 01 01 01 01 01 0f 00 00 88 88 f8     HHH.............
    10ba:	88 88 00 00 70 88 88 88 70 00 00 f8 88 88 88 88     ....p...p.......
    10ca:	00 00 e0 90 e0 80 80 0c 12 21 21 21 12 6c 00 00     .........!!!.l..
    10da:	f8 20 20 20 20 00 00 88 88 78 08 70 1f 04 04 04     .    ....x.p....
    10ea:	04 04 04 00 00 88 50 20 50 88 00 00 90 90 90 f8     ......P P.......
    10fa:	08 49 49 49 55 55 22 22 11 1b 0a 04 0a 1b 11 41     .IIIUU"".......A
    110a:	22 14 08 08 08 08 1f 10 08 04 02 01 1f 04 02 01     "...............
    111a:	01 01 02 04 01 01 01 01 01 01 01 01 02 04 04 04     ................
    112a:	02 01 00 00 00 00 00 00 00 00 00 78 88 78 48 88     ...........x.xH.

0000113a <months_width>:
    113a:	15 1d 1f 19 1c 1c 18 1c 20 1d 1e 1b                 ........ ...

00001146 <months_table>:
    1146:	65 29 38 00 91 29 48 00 84 ef 38 00 94 29 28 00     e)8..)H...8..)(.
    1156:	64 29 48 00 34 ce 67 30 55 24 94 48 57 24 94 48     d)H.4.g0U$.HW$.H
    1166:	55 24 94 48 94 c4 64 30 f7 73 b2 4e 84 4a 0a 52     U$.H..d0.s.N.J.R
    1176:	e7 73 b3 ce 94 42 0a 4a e7 43 b2 52 97 2e 93 80     .s...B.J.C.R....
    1186:	a4 84 94 80 c7 24 f3 80 a4 a4 92 80 97 24 94 80     .....$.......$..
    1196:	ee 33 92 70 49 4a 52 90 4e 4b 9e 70 48 7a 52 50     .3.pIJR.NK.pHzRP
    11a6:	48 4b 92 90 97 73 92 70 94 4a 52 90 77 73 9e 70     HK...s.p.JR.ws.p
    11b6:	14 42 52 50 17 43 92 90 34 bd 27 00 54 a5 29 00     .BRP.C..4.'.T.).
    11c6:	55 a5 e7 00 56 a5 25 00 94 a5 29 00 67 73 d2 70     U...V.%...).gs.p
    11d6:	94 4a 52 90 87 72 5e 70 94 42 52 50 67 42 52 90     .JR..r^p.BRPgBR.
    11e6:	e7 73 99 27 94 4a 25 29 e7 73 a1 e7 94 42 25 25     .s.'.J%).s...B%%
    11f6:	e7 43 99 29 a9 9c e9 38 aa 52 49 48 72 5c 4f 38     .C.)...8.RIHr\O8
    1206:	aa 52 49 28 a9 9c 49 48 34 99 cc f0 54 a4 92 90     .RI(..IH4...T...
    1216:	55 a0 92 90 56 a4 92 90 94 98 8c 94 ee 51 a4 e0     U...V........Q..
    1226:	89 52 a5 20 8e 32 bc e0 88 17 a4 a0 88 64 a5 20     .R. .2.......d. 

00001236 <dow_shift>:
    1236:	00 08 00 04 07 08 02 06                             ........

0000123e <dow_len>:
    123e:	00 06 09 08 06 06 08 06                             ........

00001246 <sat>:
    1246:	d1 f3 e1 ee f2 e0 00                                .......

0000124d <fri>:
    124d:	cf 27 ff f2 ed e8 f6 ff 00                          .'.......

00001256 <thu>:
    1256:	d7 e5 f2 e2 e5 f0 00                                .......

0000125d <wed>:
    125d:	d1 e5 f0 e5 e4 e0 00                                .......

00001264 <tue>:
    1264:	c2 b3 e2 f2 ee f0 ee ea 00                          .........

0000126d <mon>:
    126d:	cf ee ed e5 e4 b3 eb ee ea 00                       ..........

00001277 <sun>:
    1277:	cd e5 e4 b3 eb ff 00                                .......

0000127e <emp>:
    127e:	00 00                                               ..

00001280 <__ctors_end>:
    1280:	11 24       	eor	r1, r1
    1282:	1f be       	out	0x3f, r1	; 63
    1284:	cf ef       	ldi	r28, 0xFF	; 255
    1286:	d8 e0       	ldi	r29, 0x08	; 8
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	cd bf       	out	0x3d, r28	; 61

0000128c <__do_copy_data>:
    128c:	11 e0       	ldi	r17, 0x01	; 1
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b1 e0       	ldi	r27, 0x01	; 1
    1292:	e4 e1       	ldi	r30, 0x14	; 20
    1294:	f7 e3       	ldi	r31, 0x37	; 55
    1296:	02 c0       	rjmp	.+4      	; 0x129c <__do_copy_data+0x10>
    1298:	05 90       	lpm	r0, Z+
    129a:	0d 92       	st	X+, r0
    129c:	ae 35       	cpi	r26, 0x5E	; 94
    129e:	b1 07       	cpc	r27, r17
    12a0:	d9 f7       	brne	.-10     	; 0x1298 <__do_copy_data+0xc>

000012a2 <__do_clear_bss>:
    12a2:	25 e0       	ldi	r18, 0x05	; 5
    12a4:	ae e5       	ldi	r26, 0x5E	; 94
    12a6:	b1 e0       	ldi	r27, 0x01	; 1
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <.do_clear_bss_start>

000012aa <.do_clear_bss_loop>:
    12aa:	1d 92       	st	X+, r1

000012ac <.do_clear_bss_start>:
    12ac:	a1 3b       	cpi	r26, 0xB1	; 177
    12ae:	b2 07       	cpc	r27, r18
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <.do_clear_bss_loop>
    12b2:	0e 94 b7 1a 	call	0x356e	; 0x356e <main>
    12b6:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <_exit>

000012ba <__bad_interrupt>:
    12ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000012be <temperature_cb>:
    max7219_update();
}

void temperature_cb(uint16_t data)
{
    temperature = data;
    12be:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <temperature+0x1>
    12c2:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <temperature>
    timer_register(TEMPERATURE_TIMER_ID, 10, print_temperature);
    12c6:	49 e6       	ldi	r20, 0x69	; 105
    12c8:	59 e0       	ldi	r21, 0x09	; 9
    12ca:	6a e0       	ldi	r22, 0x0A	; 10
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

000012d2 <print_temperature>:

void convert_temperature(void);

void print_temperature(void)
{
    if (temperature == DS18B20_INVALID_TEMPERATURE)
    12d2:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <temperature>
    12d6:	90 91 a2 05 	lds	r25, 0x05A2	; 0x8005a2 <temperature+0x1>
    12da:	81 15       	cp	r24, r1
    12dc:	20 e8       	ldi	r18, 0x80	; 128
    12de:	92 07       	cpc	r25, r18
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <print_temperature+0x16>
    {
        clear_ext_temperature();
    12e2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <clear_ext_temperature>
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <print_temperature+0x30>
    }
    else
    {
        if (temperature & 0x0800)
    12e8:	93 ff       	sbrs	r25, 3
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <print_temperature+0x24>
        {
            temperature |= 0xF000;
    12ec:	90 6f       	ori	r25, 0xF0	; 240
    12ee:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <temperature+0x1>
    12f2:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <temperature>
        }
        print_ext_temperature(temperature);
    12f6:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <temperature>
    12fa:	90 91 a2 05 	lds	r25, 0x05A2	; 0x8005a2 <temperature+0x1>
    12fe:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <print_ext_temperature>
    }
    timer_register(TEMPERATURE_TIMER_ID, 200, convert_temperature);
    1302:	43 e9       	ldi	r20, 0x93	; 147
    1304:	59 e0       	ldi	r21, 0x09	; 9
    1306:	68 ec       	ldi	r22, 0xC8	; 200
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	0e 94 19 0a 	call	0x1432	; 0x1432 <timer_register>
    max7219_update();
    130e:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <max7219_update>

00001312 <read_temperature>:
    timer_register(TEMPERATURE_TIMER_ID, 10, print_temperature);
}

void read_temperature(void)
{
    ds18b20_read_temperature(temperature_cb);
    1312:	8f e5       	ldi	r24, 0x5F	; 95
    1314:	99 e0       	ldi	r25, 0x09	; 9
    1316:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <ds18b20_read_temperature>
    timer_register(TEMPERATURE_TIMER_ID, 200, convert_temperature);
    131a:	43 e9       	ldi	r20, 0x93	; 147
    131c:	59 e0       	ldi	r21, 0x09	; 9
    131e:	68 ec       	ldi	r22, 0xC8	; 200
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

00001326 <convert_temperature>:
}

void convert_temperature(void)
{
    ds18b20_convert();
    1326:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <ds18b20_convert>
    timer_register(TEMPERATURE_TIMER_ID, 10, read_temperature);
    132a:	49 e8       	ldi	r20, 0x89	; 137
    132c:	59 e0       	ldi	r21, 0x09	; 9
    132e:	6a e0       	ldi	r22, 0x0A	; 10
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

00001336 <_time_cb>:
    display_activate();
}

static void _time_cb(void)
{
    time_update_handler();
    1336:	0e 94 01 11 	call	0x2202	; 0x2202 <time_update_handler>
    timer_register(GPS_TIMEOUT_TIMER_ID, 200, gps_timeout);
    133a:	43 ea       	ldi	r20, 0xA3	; 163
    133c:	59 e0       	ldi	r21, 0x09	; 9
    133e:	68 ec       	ldi	r22, 0xC8	; 200
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

00001346 <gps_timeout>:
    timer_register(TEMPERATURE_TIMER_ID, 10, read_temperature);
}

static void gps_timeout(void)
{
    timer_stop(GPS_TIMEOUT_TIMER_ID);
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	0e 94 2c 0a 	call	0x1458	; 0x1458 <timer_stop>
    display_activate();
    134c:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <display_activate>

00001350 <motion_timer>:
    }
}

void motion_timer(void)
{
    uart_send_hex(idle_counter);
    1350:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
    1354:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <uart_send_hex>
    1358:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
    if (MOTION_PIN)
    135c:	4e 9b       	sbis	0x09, 6	; 9
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <motion_timer+0x20>
        // }
        // else if (ADC > ILLUMINANCE_OFF_VALUE)
        // {
        //     LED_CONTROL_PORT &= ~(1 << LED_CONTROL_PIN);
        // }
        if (idle_counter != 0xFF && idle_counter != 0)
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	98 0f       	add	r25, r24
    1364:	9e 3f       	cpi	r25, 0xFE	; 254
    1366:	68 f4       	brcc	.+26     	; 0x1382 <motion_timer+0x32>
        {
            idle_counter++;
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
    136e:	08 95       	ret
        }
    }
    else if (idle_counter)
    1370:	88 23       	and	r24, r24
    1372:	39 f0       	breq	.+14     	; 0x1382 <motion_timer+0x32>
    {
        idle_counter--;
    1374:	81 50       	subi	r24, 0x01	; 1
    1376:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
        if (idle_counter == 0)
    137a:	81 11       	cpse	r24, r1
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <motion_timer+0x32>
        {
            // LED_CONTROL_PORT &= ~(1 << LED_CONTROL_PIN);
            display_deactivate();
    137e:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <display_deactivate>
    1382:	08 95       	ret

00001384 <__vector_5>:
    timer_register(GPS_TIMEOUT_TIMER_ID, 200, gps_timeout);
}


SIGNAL(PCINT2_vect)
{
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    // motion interrupt
}
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <setup>:
    }
}

void setup(void)
{
    twi_init();
    1398:	0e 94 b8 12 	call	0x2570	; 0x2570 <twi_init>
    spi_master_init();
    139c:	0e 94 01 13 	call	0x2602	; 0x2602 <spi_master_init>
    timer_init();
    13a0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <timer_init>
    onewire_init();
    13a4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <onewire_init>
    asm("sei");
    13a8:	78 94       	sei
    neo7m_init(_time_cb);
    13aa:	8b e9       	ldi	r24, 0x9B	; 155
    13ac:	99 e0       	ldi	r25, 0x09	; 9
    13ae:	0e 94 b7 13 	call	0x276e	; 0x276e <neo7m_init>
    bmp180_init(print_int_temperature, print_pressure);
    13b2:	6d e1       	ldi	r22, 0x1D	; 29
    13b4:	7f e0       	ldi	r23, 0x0F	; 15
    13b6:	85 ec       	ldi	r24, 0xC5	; 197
    13b8:	9f e0       	ldi	r25, 0x0F	; 15
    13ba:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <bmp180_init>
    //_delay_ms(5);
#ifdef DISPLAY_ENABLED
    display_init();
    13be:	0e 94 34 10 	call	0x2068	; 0x2068 <display_init>
#endif

    asm("sei");
    13c2:	78 94       	sei

#ifdef MOTION_SENSOR_ENABLED
    PCMSK2 |= 1 << PCINT22;
    13c4:	ed e6       	ldi	r30, 0x6D	; 109
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	80 83       	st	Z, r24
    PCICR |= 1 << PCIE2;  // Pin Change Interrupt Enable 2
    13ce:	e8 e6       	ldi	r30, 0x68	; 104
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	84 60       	ori	r24, 0x04	; 4
    13d6:	80 83       	st	Z, r24
    timer_register(MOTION_TIMER_ID, MOTION_TIMER_PERIOD, motion_timer);
    13d8:	48 ea       	ldi	r20, 0xA8	; 168
    13da:	59 e0       	ldi	r21, 0x09	; 9
    13dc:	6a e0       	ldi	r22, 0x0A	; 10
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

000013e4 <timer_init>:

void timer_init(void)
{
    for (uint8_t i=0; i<TIMER_NUMBER; i++)
    {
        timer_descriptor[i].timeout = 0;
    13e4:	e0 e6       	ldi	r30, 0x60	; 96
    13e6:	f1 e0       	ldi	r31, 0x01	; 1
    13e8:	10 82       	st	Z, r1
    13ea:	14 82       	std	Z+4, r1	; 0x04
    13ec:	10 86       	std	Z+8, r1	; 0x08
    13ee:	14 86       	std	Z+12, r1	; 0x0c
    13f0:	10 8a       	std	Z+16, r1	; 0x10
    }
    // 10 Hz
    OCR1A = 6249;
    13f2:	89 e6       	ldi	r24, 0x69	; 105
    13f4:	98 e1       	ldi	r25, 0x18	; 24
    13f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    13fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    TCCR1A = 0;
    13fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << WGM12) | (1 << CS12);
    1402:	8c e0       	ldi	r24, 0x0C	; 12
    1404:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TIMSK1 |= 1 << OCIE1A;
    1408:	ef e6       	ldi	r30, 0x6F	; 111
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	82 60       	ori	r24, 0x02	; 2
    1410:	80 83       	st	Z, r24
    1412:	08 95       	ret

00001414 <__vector_11>:
}

SIGNAL(TIMER1_COMPA_vect)
{
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	8f 93       	push	r24
    timer_flag = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <timer_flag>
#ifdef USE_LOCALTIME
    localtime_ds++;
#endif
}
    1426:	8f 91       	pop	r24
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <timer_register>:

uint8_t timer_register(uint8_t timer, uint8_t timeout, timer_cb callback)
{
    if (timer >= TIMER_NUMBER || !callback)
    1432:	85 30       	cpi	r24, 0x05	; 5
    1434:	78 f4       	brcc	.+30     	; 0x1454 <timer_register+0x22>
    1436:	41 15       	cp	r20, r1
    1438:	51 05       	cpc	r21, r1
    143a:	61 f0       	breq	.+24     	; 0x1454 <timer_register+0x22>
    {
        return 1;
    }
    timer_descriptor[timer].counter = 0;
    143c:	94 e0       	ldi	r25, 0x04	; 4
    143e:	89 9f       	mul	r24, r25
    1440:	f0 01       	movw	r30, r0
    1442:	11 24       	eor	r1, r1
    1444:	e0 5a       	subi	r30, 0xA0	; 160
    1446:	fe 4f       	sbci	r31, 0xFE	; 254
    1448:	11 82       	std	Z+1, r1	; 0x01
    timer_descriptor[timer].callback = callback;
    144a:	53 83       	std	Z+3, r21	; 0x03
    144c:	42 83       	std	Z+2, r20	; 0x02
    timer_descriptor[timer].timeout = timeout;
    144e:	60 83       	st	Z, r22
    return 0;
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	08 95       	ret

uint8_t timer_register(uint8_t timer, uint8_t timeout, timer_cb callback)
{
    if (timer >= TIMER_NUMBER || !callback)
    {
        return 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    }
    timer_descriptor[timer].counter = 0;
    timer_descriptor[timer].callback = callback;
    timer_descriptor[timer].timeout = timeout;
    return 0;
}
    1456:	08 95       	ret

00001458 <timer_stop>:

uint8_t timer_stop(uint8_t timer)
{
    if (timer >= TIMER_NUMBER)
    1458:	85 30       	cpi	r24, 0x05	; 5
    145a:	50 f4       	brcc	.+20     	; 0x1470 <timer_stop+0x18>
    {
        return 1;
    }
    timer_descriptor[timer].counter = 0;
    145c:	94 e0       	ldi	r25, 0x04	; 4
    145e:	89 9f       	mul	r24, r25
    1460:	f0 01       	movw	r30, r0
    1462:	11 24       	eor	r1, r1
    1464:	e0 5a       	subi	r30, 0xA0	; 160
    1466:	fe 4f       	sbci	r31, 0xFE	; 254
    1468:	11 82       	std	Z+1, r1	; 0x01
    timer_descriptor[timer].timeout = 0;
    146a:	10 82       	st	Z, r1
    return 0;
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	08 95       	ret

uint8_t timer_stop(uint8_t timer)
{
    if (timer >= TIMER_NUMBER)
    {
        return 1;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    }
    timer_descriptor[timer].counter = 0;
    timer_descriptor[timer].timeout = 0;
    return 0;
}
    1472:	08 95       	ret

00001474 <timer_start>:

uint8_t timer_start(uint8_t timer, uint8_t timeout)
{
    if (timer >= TIMER_NUMBER)
    1474:	85 30       	cpi	r24, 0x05	; 5
    1476:	50 f4       	brcc	.+20     	; 0x148c <timer_start+0x18>
    {
        return 1;
    }
    timer_descriptor[timer].counter = 0;
    1478:	94 e0       	ldi	r25, 0x04	; 4
    147a:	89 9f       	mul	r24, r25
    147c:	f0 01       	movw	r30, r0
    147e:	11 24       	eor	r1, r1
    1480:	e0 5a       	subi	r30, 0xA0	; 160
    1482:	fe 4f       	sbci	r31, 0xFE	; 254
    1484:	11 82       	std	Z+1, r1	; 0x01
    timer_descriptor[timer].timeout = timeout;
    1486:	60 83       	st	Z, r22
    return 0;
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret

uint8_t timer_start(uint8_t timer, uint8_t timeout)
{
    if (timer >= TIMER_NUMBER)
    {
        return 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    }
    timer_descriptor[timer].counter = 0;
    timer_descriptor[timer].timeout = timeout;
    return 0;
}
    148e:	08 95       	ret

00001490 <timer_handler>:

void timer_handler(void)
{
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    if (timer_flag)
    1494:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <timer_flag>
    1498:	88 23       	and	r24, r24
    149a:	a9 f0       	breq	.+42     	; 0x14c6 <timer_handler+0x36>
    {
        timer_flag = 0;
    149c:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <timer_flag>
    14a0:	c0 e6       	ldi	r28, 0x60	; 96
    14a2:	d1 e0       	ldi	r29, 0x01	; 1
        for (uint8_t i=0; i<TIMER_NUMBER; i++)
        {
            if (timer_descriptor[i].timeout == 0)
    14a4:	98 81       	ld	r25, Y
    14a6:	99 23       	and	r25, r25
    14a8:	49 f0       	breq	.+18     	; 0x14bc <timer_handler+0x2c>
            {
                continue;
            }
            timer_descriptor[i].counter++;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	8f 5f       	subi	r24, 0xFF	; 255
    14ae:	89 83       	std	Y+1, r24	; 0x01
            if (timer_descriptor[i].counter == timer_descriptor[i].timeout)
    14b0:	98 13       	cpse	r25, r24
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <timer_handler+0x2c>
            {
                timer_descriptor[i].counter = 0;
    14b4:	19 82       	std	Y+1, r1	; 0x01
                timer_descriptor[i].callback();
    14b6:	ea 81       	ldd	r30, Y+2	; 0x02
    14b8:	fb 81       	ldd	r31, Y+3	; 0x03
    14ba:	09 95       	icall
    14bc:	24 96       	adiw	r28, 0x04	; 4
void timer_handler(void)
{
    if (timer_flag)
    {
        timer_flag = 0;
        for (uint8_t i=0; i<TIMER_NUMBER; i++)
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	c4 37       	cpi	r28, 0x74	; 116
    14c2:	d8 07       	cpc	r29, r24
    14c4:	79 f7       	brne	.-34     	; 0x14a4 <timer_handler+0x14>
                timer_descriptor[i].counter = 0;
                timer_descriptor[i].callback();
            }
        }
    }
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <display_wait_right>:
    }
}

void display_wait_right(void)
{
    timer_register(DISPLAY_TIMER_ID, 1, display_scroll_right);
    14cc:	42 e7       	ldi	r20, 0x72	; 114
    14ce:	5a e0       	ldi	r21, 0x0A	; 10
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

000014d8 <display_wait_down>:
}

void display_wait_down(void)
{
    timer_register(DISPLAY_TIMER_ID, 1, display_scroll_down);
    14d8:	43 e9       	ldi	r20, 0x93	; 147
    14da:	5a e0       	ldi	r21, 0x0A	; 10
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

000014e4 <display_scroll_right>:
    }
}

void display_scroll_right(void)
{
    if((++display_col_shift & 0x3F) == 0)
    14e4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <display_col_shift>
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <display_col_shift>
    14ee:	8f 73       	andi	r24, 0x3F	; 63
    14f0:	29 f4       	brne	.+10     	; 0x14fc <display_scroll_right+0x18>
    {
        timer_register(DISPLAY_TIMER_ID, 50, display_wait_right);
    14f2:	46 e6       	ldi	r20, 0x66	; 102
    14f4:	5a e0       	ldi	r21, 0x0A	; 10
    14f6:	62 e3       	ldi	r22, 0x32	; 50
    14f8:	0e 94 19 0a 	call	0x1432	; 0x1432 <timer_register>
    }
    max7219_update();
    14fc:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <max7219_update>

00001500 <display_scroll_up>:
    timer_register(DISPLAY_TIMER_ID, 1, display_scroll_down);
}

void display_scroll_up(void)
{
    if (display_row_shift > 0)
    1500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1504:	88 23       	and	r24, r24
    1506:	19 f0       	breq	.+6      	; 0x150e <display_scroll_up+0xe>
    {
        display_row_shift--;
    1508:	81 50       	subi	r24, 0x01	; 1
    150a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
    if (display_row_shift == 0)
    150e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1512:	81 11       	cpse	r24, r1
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <display_scroll_up+0x22>
    {
        display_state = DISPLAY_STATE_WAITING;
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <display_state>
        timer_stop(DISPLAY_TIMER_ID);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <timer_stop>
        // timer_register(DISPLAY_TIMER_ID, 50, display_wait_down);//////
    }
    max7219_update();
    1522:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <max7219_update>

00001526 <display_scroll_down>:
}

void display_scroll_down(void)
{
    if (display_row_shift < 16)
    1526:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    152a:	80 31       	cpi	r24, 0x10	; 16
    152c:	28 f4       	brcc	.+10     	; 0x1538 <display_scroll_down+0x12>
    {
        display_row_shift++;
    152e:	8f 5f       	subi	r24, 0xFF	; 255
    1530:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        max7219_update();
    1534:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <max7219_update>
    }
    if (display_row_shift == 16)
    1538:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    153c:	80 31       	cpi	r24, 0x10	; 16
    153e:	31 f4       	brne	.+12     	; 0x154c <display_scroll_down+0x26>
    {
        timer_register(DISPLAY_TIMER_ID, 50, display_wait_right);
    1540:	46 e6       	ldi	r20, 0x66	; 102
    1542:	5a e0       	ldi	r21, 0x0A	; 10
    1544:	62 e3       	ldi	r22, 0x32	; 50
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>
    154c:	08 95       	ret

0000154e <print_full_time>:
    max7219_init();
    max7219_update();
}

void print_full_time(void)
{
    154e:	4f 92       	push	r4
    1550:	5f 92       	push	r5
    1552:	6f 92       	push	r6
    1554:	7f 92       	push	r7
    1556:	8f 92       	push	r8
    1558:	9f 92       	push	r9
    155a:	af 92       	push	r10
    155c:	bf 92       	push	r11
    155e:	cf 92       	push	r12
    1560:	df 92       	push	r13
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    uint8_t h_l = get_hour_bcd_l();
    156e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_hour_bcd_l>
    1572:	08 2f       	mov	r16, r24
    uint8_t h_h = get_hour_bcd_h();
    1574:	0e 94 14 16 	call	0x2c28	; 0x2c28 <get_hour_bcd_h>
    1578:	c8 2f       	mov	r28, r24
    uint8_t m_l = get_minute_bcd_l();
    157a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <get_minute_bcd_l>
    157e:	18 2f       	mov	r17, r24
    uint8_t m_h = get_minute_bcd_h();
    1580:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <get_minute_bcd_h>
    1584:	2e e1       	ldi	r18, 0x1E	; 30
    1586:	c2 9f       	mul	r28, r18
    1588:	e0 01       	movw	r28, r0
    158a:	11 24       	eor	r1, r1
    158c:	9e e1       	ldi	r25, 0x1E	; 30
    158e:	09 9f       	mul	r16, r25
    1590:	b0 01       	movw	r22, r0
    1592:	11 24       	eor	r1, r1
    1594:	ee e1       	ldi	r30, 0x1E	; 30
    1596:	8e 9f       	mul	r24, r30
    1598:	c0 01       	movw	r24, r0
    159a:	11 24       	eor	r1, r1
    159c:	fe e1       	ldi	r31, 0x1E	; 30
    159e:	1f 9f       	mul	r17, r31
    15a0:	a0 01       	movw	r20, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0

    for (uint8_t i=0; i<30; i+=2)
    {
        display_full_buf[i>>1][0] = tdDigital15table(h_h, i);
    15a8:	e6 e0       	ldi	r30, 0x06	; 6
    15aa:	7e 2e       	mov	r7, r30
        display_full_buf[i>>1][1] = tdDigital15table(h_h, i+1) | (tdDigital15table(h_l, i) >> 4);
    15ac:	7e 01       	movw	r14, r28
    15ae:	1f ef       	ldi	r17, 0xFF	; 255
    15b0:	e1 1a       	sub	r14, r17
    15b2:	f1 0a       	sbc	r15, r17
        display_full_buf[i>>1][2] = (tdDigital15table(h_l, i) << 4) | (tdDigital15table(h_l, i+1) >> 4);
    15b4:	2b 01       	movw	r4, r22
    15b6:	ef ef       	ldi	r30, 0xFF	; 255
    15b8:	4e 1a       	sub	r4, r30
    15ba:	5e 0a       	sbc	r5, r30
        display_full_buf[i>>1][3] = tdDigital15table(m_h, i) >> 1;
        display_full_buf[i>>1][4] = (tdDigital15table(m_h, i) << 7) | (tdDigital15table(m_h, i+1) >> 1) | (tdDigital15table(m_l, i) >> 5);
    15bc:	5c 01       	movw	r10, r24
    15be:	ff ef       	ldi	r31, 0xFF	; 255
    15c0:	af 1a       	sub	r10, r31
    15c2:	bf 0a       	sbc	r11, r31
        display_full_buf[i>>1][5] = (tdDigital15table(m_l, i) << 3) | (tdDigital15table(m_l, i+1) >> 5);
    15c4:	4a 01       	movw	r8, r20
    15c6:	1f ef       	ldi	r17, 0xFF	; 255
    15c8:	81 1a       	sub	r8, r17
    15ca:	91 0a       	sbc	r9, r17
    uint8_t m_l = get_minute_bcd_l();
    uint8_t m_h = get_minute_bcd_h();

    for (uint8_t i=0; i<30; i+=2)
    {
        display_full_buf[i>>1][0] = tdDigital15table(h_h, i);
    15cc:	c2 2e       	mov	r12, r18
    15ce:	c6 94       	lsr	r12
    15d0:	d1 2c       	mov	r13, r1
    15d2:	fe 01       	movw	r30, r28
    15d4:	e2 0f       	add	r30, r18
    15d6:	f3 1f       	adc	r31, r19
    15d8:	e2 5f       	subi	r30, 0xF2	; 242
    15da:	fd 4f       	sbci	r31, 0xFD	; 253
    15dc:	e4 91       	lpm	r30, Z
    15de:	7c 9c       	mul	r7, r12
    15e0:	d0 01       	movw	r26, r0
    15e2:	7d 9c       	mul	r7, r13
    15e4:	b0 0d       	add	r27, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	aa 55       	subi	r26, 0x5A	; 90
    15ea:	bd 4f       	sbci	r27, 0xFD	; 253
    15ec:	ec 93       	st	X, r30
        display_full_buf[i>>1][1] = tdDigital15table(h_h, i+1) | (tdDigital15table(h_l, i) >> 4);
    15ee:	f7 01       	movw	r30, r14
    15f0:	e2 0f       	add	r30, r18
    15f2:	f3 1f       	adc	r31, r19
    15f4:	e2 5f       	subi	r30, 0xF2	; 242
    15f6:	fd 4f       	sbci	r31, 0xFD	; 253
    15f8:	d4 90       	lpm	r13, Z
    15fa:	fb 01       	movw	r30, r22
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	e2 5f       	subi	r30, 0xF2	; 242
    1602:	fd 4f       	sbci	r31, 0xFD	; 253
    1604:	c4 90       	lpm	r12, Z
    1606:	c2 94       	swap	r12
    1608:	1f e0       	ldi	r17, 0x0F	; 15
    160a:	c1 22       	and	r12, r17
    160c:	dc 28       	or	r13, r12
    160e:	11 96       	adiw	r26, 0x01	; 1
    1610:	dc 92       	st	X, r13
    1612:	11 97       	sbiw	r26, 0x01	; 1
        display_full_buf[i>>1][2] = (tdDigital15table(h_l, i) << 4) | (tdDigital15table(h_l, i+1) >> 4);
    1614:	c4 90       	lpm	r12, Z
    1616:	f2 01       	movw	r30, r4
    1618:	e2 0f       	add	r30, r18
    161a:	f3 1f       	adc	r31, r19
    161c:	e2 5f       	subi	r30, 0xF2	; 242
    161e:	fd 4f       	sbci	r31, 0xFD	; 253
    1620:	e4 91       	lpm	r30, Z
    1622:	f0 e1       	ldi	r31, 0x10	; 16
    1624:	cf 9e       	mul	r12, r31
    1626:	60 01       	movw	r12, r0
    1628:	11 24       	eor	r1, r1
    162a:	e2 95       	swap	r30
    162c:	ef 70       	andi	r30, 0x0F	; 15
    162e:	ec 29       	or	r30, r12
    1630:	12 96       	adiw	r26, 0x02	; 2
    1632:	ec 93       	st	X, r30
    1634:	12 97       	sbiw	r26, 0x02	; 2
    1636:	f9 01       	movw	r30, r18
    1638:	e8 0f       	add	r30, r24
    163a:	f9 1f       	adc	r31, r25
    163c:	e2 5f       	subi	r30, 0xF2	; 242
    163e:	fd 4f       	sbci	r31, 0xFD	; 253
        display_full_buf[i>>1][3] = tdDigital15table(m_h, i) >> 1;
    1640:	d4 90       	lpm	r13, Z
    1642:	d6 94       	lsr	r13
    1644:	13 96       	adiw	r26, 0x03	; 3
    1646:	dc 92       	st	X, r13
    1648:	13 97       	sbiw	r26, 0x03	; 3
        display_full_buf[i>>1][4] = (tdDigital15table(m_h, i) << 7) | (tdDigital15table(m_h, i+1) >> 1) | (tdDigital15table(m_l, i) >> 5);
    164a:	d4 90       	lpm	r13, Z
    164c:	f5 01       	movw	r30, r10
    164e:	e2 0f       	add	r30, r18
    1650:	f3 1f       	adc	r31, r19
    1652:	e2 5f       	subi	r30, 0xF2	; 242
    1654:	fd 4f       	sbci	r31, 0xFD	; 253
    1656:	c4 90       	lpm	r12, Z
    1658:	f9 01       	movw	r30, r18
    165a:	e4 0f       	add	r30, r20
    165c:	f5 1f       	adc	r31, r21
    165e:	e2 5f       	subi	r30, 0xF2	; 242
    1660:	fd 4f       	sbci	r31, 0xFD	; 253
    1662:	64 90       	lpm	r6, Z
    1664:	c6 94       	lsr	r12
    1666:	62 94       	swap	r6
    1668:	66 94       	lsr	r6
    166a:	07 e0       	ldi	r16, 0x07	; 7
    166c:	60 22       	and	r6, r16
    166e:	6c 28       	or	r6, r12
    1670:	10 e8       	ldi	r17, 0x80	; 128
    1672:	d1 9e       	mul	r13, r17
    1674:	60 01       	movw	r12, r0
    1676:	11 24       	eor	r1, r1
    1678:	c6 28       	or	r12, r6
    167a:	14 96       	adiw	r26, 0x04	; 4
    167c:	cc 92       	st	X, r12
    167e:	14 97       	sbiw	r26, 0x04	; 4
        display_full_buf[i>>1][5] = (tdDigital15table(m_l, i) << 3) | (tdDigital15table(m_l, i+1) >> 5);
    1680:	c4 90       	lpm	r12, Z
    1682:	f4 01       	movw	r30, r8
    1684:	e2 0f       	add	r30, r18
    1686:	f3 1f       	adc	r31, r19
    1688:	e2 5f       	subi	r30, 0xF2	; 242
    168a:	fd 4f       	sbci	r31, 0xFD	; 253
    168c:	e4 91       	lpm	r30, Z
    168e:	f8 e0       	ldi	r31, 0x08	; 8
    1690:	cf 9e       	mul	r12, r31
    1692:	60 01       	movw	r12, r0
    1694:	11 24       	eor	r1, r1
    1696:	e2 95       	swap	r30
    1698:	e6 95       	lsr	r30
    169a:	e7 70       	andi	r30, 0x07	; 7
    169c:	ec 29       	or	r30, r12
    169e:	15 96       	adiw	r26, 0x05	; 5
    16a0:	ec 93       	st	X, r30
    16a2:	2e 5f       	subi	r18, 0xFE	; 254
    16a4:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t h_l = get_hour_bcd_l();
    uint8_t h_h = get_hour_bcd_h();
    uint8_t m_l = get_minute_bcd_l();
    uint8_t m_h = get_minute_bcd_h();

    for (uint8_t i=0; i<30; i+=2)
    16a6:	2e 31       	cpi	r18, 0x1E	; 30
    16a8:	31 05       	cpc	r19, r1
    16aa:	09 f0       	breq	.+2      	; 0x16ae <print_full_time+0x160>
    16ac:	8f cf       	rjmp	.-226    	; 0x15cc <print_full_time+0x7e>
        display_full_buf[i>>1][2] = (tdDigital15table(h_l, i) << 4) | (tdDigital15table(h_l, i+1) >> 4);
        display_full_buf[i>>1][3] = tdDigital15table(m_h, i) >> 1;
        display_full_buf[i>>1][4] = (tdDigital15table(m_h, i) << 7) | (tdDigital15table(m_h, i+1) >> 1) | (tdDigital15table(m_l, i) >> 5);
        display_full_buf[i>>1][5] = (tdDigital15table(m_l, i) << 3) | (tdDigital15table(m_l, i+1) >> 5);
    }
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	df 90       	pop	r13
    16bc:	cf 90       	pop	r12
    16be:	bf 90       	pop	r11
    16c0:	af 90       	pop	r10
    16c2:	9f 90       	pop	r9
    16c4:	8f 90       	pop	r8
    16c6:	7f 90       	pop	r7
    16c8:	6f 90       	pop	r6
    16ca:	5f 90       	pop	r5
    16cc:	4f 90       	pop	r4
    16ce:	08 95       	ret

000016d0 <print_img>:


void print_img(void)
{
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    for (uint8_t i=0; i<6; i++)
    {
        for (uint8_t j=0; j<16; j++)
        {
            uint8_t tmp = pgm_read_byte(&img_table[j][i]);
    16d8:	a9 01       	movw	r20, r18
    16da:	48 0f       	add	r20, r24
    16dc:	59 1f       	adc	r21, r25
    16de:	fa 01       	movw	r30, r20
    16e0:	e8 59       	subi	r30, 0x98	; 152
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	e4 91       	lpm	r30, Z
            display_full_buf[j][i] = tmp;
    16e6:	da 01       	movw	r26, r20
    16e8:	aa 55       	subi	r26, 0x5A	; 90
    16ea:	bd 4f       	sbci	r27, 0xFD	; 253
    16ec:	ec 93       	st	X, r30
    16ee:	06 96       	adiw	r24, 0x06	; 6

void print_img(void)
{
    for (uint8_t i=0; i<6; i++)
    {
        for (uint8_t j=0; j<16; j++)
    16f0:	80 36       	cpi	r24, 0x60	; 96
    16f2:	91 05       	cpc	r25, r1
    16f4:	89 f7       	brne	.-30     	; 0x16d8 <print_img+0x8>
    16f6:	2f 5f       	subi	r18, 0xFF	; 255
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
}


void print_img(void)
{
    for (uint8_t i=0; i<6; i++)
    16fa:	26 30       	cpi	r18, 0x06	; 6
    16fc:	31 05       	cpc	r19, r1
    16fe:	51 f7       	brne	.-44     	; 0x16d4 <print_img+0x4>
    1700:	08 95       	ret

00001702 <print_top_time>:
        }
    }
}

void print_top_time(void)
{
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    uint8_t h_l = get_hour_bcd_l();
    170e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_hour_bcd_l>
    1712:	08 2f       	mov	r16, r24
    uint8_t h_h = get_hour_bcd_h();
    1714:	0e 94 14 16 	call	0x2c28	; 0x2c28 <get_hour_bcd_h>
    1718:	d8 2f       	mov	r29, r24
    uint8_t m_l = get_minute_bcd_l();
    171a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <get_minute_bcd_l>
    171e:	e8 2e       	mov	r14, r24
    uint8_t m_h = get_minute_bcd_h();
    1720:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <get_minute_bcd_h>
    1724:	c8 2f       	mov	r28, r24
    uint8_t s_l = get_second_bcd_l();
    1726:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <get_second_bcd_l>
    172a:	f8 2e       	mov	r15, r24
    uint8_t s_h = get_second_bcd_h();
    172c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_second_bcd_h>

    if(h_h == 0)
    1730:	d1 11       	cpse	r29, r1
    1732:	21 c0       	rjmp	.+66     	; 0x1776 <print_top_time+0x74>
    1734:	e6 e7       	ldi	r30, 0x76	; 118
    1736:	f2 e0       	ldi	r31, 0x02	; 2
    {
        for (uint8_t i=0; i<7; i++)
        {
            display_top_buf[i][0] = 0;
    1738:	10 82       	st	Z, r1
    173a:	36 96       	adiw	r30, 0x06	; 6
    uint8_t s_l = get_second_bcd_l();
    uint8_t s_h = get_second_bcd_h();

    if(h_h == 0)
    {
        for (uint8_t i=0; i<7; i++)
    173c:	22 e0       	ldi	r18, 0x02	; 2
    173e:	e0 3a       	cpi	r30, 0xA0	; 160
    1740:	f2 07       	cpc	r31, r18
    1742:	d1 f7       	brne	.-12     	; 0x1738 <print_top_time+0x36>
    1744:	a6 e7       	ldi	r26, 0x76	; 118
    1746:	b2 e0       	ldi	r27, 0x02	; 2
    1748:	97 e0       	ldi	r25, 0x07	; 7
    174a:	09 9f       	mul	r16, r25
    174c:	80 01       	movw	r16, r0
    174e:	11 24       	eor	r1, r1
    1750:	27 e0       	ldi	r18, 0x07	; 7
    1752:	c2 9f       	mul	r28, r18
    1754:	e0 01       	movw	r28, r0
    1756:	11 24       	eor	r1, r1
    1758:	97 e0       	ldi	r25, 0x07	; 7
    175a:	e9 9e       	mul	r14, r25
    175c:	b0 01       	movw	r22, r0
    175e:	11 24       	eor	r1, r1
    1760:	27 e0       	ldi	r18, 0x07	; 7
    1762:	82 9f       	mul	r24, r18
    1764:	a0 01       	movw	r20, r0
    1766:	11 24       	eor	r1, r1
    1768:	27 e0       	ldi	r18, 0x07	; 7
    176a:	f2 9e       	mul	r15, r18
    176c:	c0 01       	movw	r24, r0
    176e:	11 24       	eor	r1, r1
    uint8_t m_l = get_minute_bcd_l();
    uint8_t m_h = get_minute_bcd_h();
    uint8_t s_l = get_second_bcd_l();
    uint8_t s_h = get_second_bcd_h();

    if(h_h == 0)
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <print_top_time+0xa2>
    1776:	a6 e7       	ldi	r26, 0x76	; 118
    1778:	b2 e0       	ldi	r27, 0x02	; 2
    177a:	97 e0       	ldi	r25, 0x07	; 7
    177c:	d9 9f       	mul	r29, r25
    177e:	b0 01       	movw	r22, r0
    1780:	11 24       	eor	r1, r1
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        for (uint8_t i=0; i<7; i++)
        {
            display_top_buf[i][0] = dDigital7table(h_h, i) >> 1;
    1786:	fb 01       	movw	r30, r22
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	e8 53       	subi	r30, 0x38	; 56
    178e:	fe 4f       	sbci	r31, 0xFE	; 254
    1790:	e4 91       	lpm	r30, Z
    1792:	e6 95       	lsr	r30
    1794:	ec 93       	st	X, r30
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	16 96       	adiw	r26, 0x06	; 6
            display_top_buf[i][0] = 0;
        }
    }
    else
    {
        for (uint8_t i=0; i<7; i++)
    179c:	27 30       	cpi	r18, 0x07	; 7
    179e:	31 05       	cpc	r19, r1
    17a0:	91 f7       	brne	.-28     	; 0x1786 <print_top_time+0x84>
    17a2:	d0 cf       	rjmp	.-96     	; 0x1744 <print_top_time+0x42>
        }
    }

    for (uint8_t i=0; i<7; i++)
    {
        display_top_buf[i][1] = dDigital7table(h_l, i);
    17a4:	f9 01       	movw	r30, r18
    17a6:	e0 0f       	add	r30, r16
    17a8:	f1 1f       	adc	r31, r17
    17aa:	e8 53       	subi	r30, 0x38	; 56
    17ac:	fe 4f       	sbci	r31, 0xFE	; 254
    17ae:	e4 91       	lpm	r30, Z
    17b0:	11 96       	adiw	r26, 0x01	; 1
    17b2:	ec 93       	st	X, r30
    17b4:	11 97       	sbiw	r26, 0x01	; 1
        display_top_buf[i][2] = dDigital7table(m_h, i) >> 2;
    17b6:	f9 01       	movw	r30, r18
    17b8:	ec 0f       	add	r30, r28
    17ba:	fd 1f       	adc	r31, r29
    17bc:	e8 53       	subi	r30, 0x38	; 56
    17be:	fe 4f       	sbci	r31, 0xFE	; 254
    17c0:	e4 91       	lpm	r30, Z
    17c2:	e6 95       	lsr	r30
    17c4:	e6 95       	lsr	r30
    17c6:	12 96       	adiw	r26, 0x02	; 2
    17c8:	ec 93       	st	X, r30
    17ca:	12 97       	sbiw	r26, 0x02	; 2
        display_top_buf[i][3] = dDigital7table(m_l, i) >> 1;
    17cc:	f9 01       	movw	r30, r18
    17ce:	e6 0f       	add	r30, r22
    17d0:	f7 1f       	adc	r31, r23
    17d2:	e8 53       	subi	r30, 0x38	; 56
    17d4:	fe 4f       	sbci	r31, 0xFE	; 254
    17d6:	e4 91       	lpm	r30, Z
    17d8:	e6 95       	lsr	r30
    17da:	13 96       	adiw	r26, 0x03	; 3
    17dc:	ec 93       	st	X, r30
    17de:	13 97       	sbiw	r26, 0x03	; 3
        display_top_buf[i][4] = dDigital7table(s_h, i) >> 3;
    17e0:	f9 01       	movw	r30, r18
    17e2:	e4 0f       	add	r30, r20
    17e4:	f5 1f       	adc	r31, r21
    17e6:	e8 53       	subi	r30, 0x38	; 56
    17e8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ea:	e4 91       	lpm	r30, Z
    17ec:	e6 95       	lsr	r30
    17ee:	e6 95       	lsr	r30
    17f0:	e6 95       	lsr	r30
    17f2:	14 96       	adiw	r26, 0x04	; 4
    17f4:	ec 93       	st	X, r30
    17f6:	14 97       	sbiw	r26, 0x04	; 4
        display_top_buf[i][5] = dDigital7table(s_l, i) >> 2;
    17f8:	f9 01       	movw	r30, r18
    17fa:	e8 0f       	add	r30, r24
    17fc:	f9 1f       	adc	r31, r25
    17fe:	e8 53       	subi	r30, 0x38	; 56
    1800:	fe 4f       	sbci	r31, 0xFE	; 254
    1802:	e4 91       	lpm	r30, Z
    1804:	e6 95       	lsr	r30
    1806:	e6 95       	lsr	r30
    1808:	15 96       	adiw	r26, 0x05	; 5
    180a:	ec 93       	st	X, r30
    180c:	15 97       	sbiw	r26, 0x05	; 5
    180e:	2f 5f       	subi	r18, 0xFF	; 255
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	16 96       	adiw	r26, 0x06	; 6
        {
            display_top_buf[i][0] = dDigital7table(h_h, i) >> 1;
        }
    }

    for (uint8_t i=0; i<7; i++)
    1814:	27 30       	cpi	r18, 0x07	; 7
    1816:	31 05       	cpc	r19, r1
    1818:	09 f0       	breq	.+2      	; 0x181c <print_top_time+0x11a>
    181a:	c4 cf       	rjmp	.-120    	; 0x17a4 <print_top_time+0xa2>
        display_top_buf[i][3] = dDigital7table(m_l, i) >> 1;
        display_top_buf[i][4] = dDigital7table(s_h, i) >> 3;
        display_top_buf[i][5] = dDigital7table(s_l, i) >> 2;
    }

    if(s_l & 0x01)
    181c:	f0 fe       	sbrs	r15, 0
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <print_top_time+0x146>
    {
        display_top_buf[1][1] |= 0x01;
    1820:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <display_top_buf+0x7>
    1824:	81 60       	ori	r24, 0x01	; 1
    1826:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <display_top_buf+0x7>
        display_top_buf[5][1] |= 0x01;
    182a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <display_top_buf+0x1f>
    182e:	81 60       	ori	r24, 0x01	; 1
    1830:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <display_top_buf+0x1f>
        display_top_buf[1][4] |= 0x80;
    1834:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display_top_buf+0xa>
    1838:	80 68       	ori	r24, 0x80	; 128
    183a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <display_top_buf+0xa>
        display_top_buf[5][4] |= 0x80;
    183e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <display_top_buf+0x22>
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <display_top_buf+0x22>
    }
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	08 95       	ret

00001856 <print_bottom_dow>:

void print_bottom_dow(void)
{
    1856:	af 92       	push	r10
    1858:	bf 92       	push	r11
    185a:	cf 92       	push	r12
    185c:	df 92       	push	r13
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    uint8_t dow = get_dow();
    186a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <get_dow>
    uint8_t shift=get_dow_shift(dow);
    186e:	c8 2f       	mov	r28, r24
    1870:	d0 e0       	ldi	r29, 0x00	; 0
    1872:	fe 01       	movw	r30, r28
    1874:	ea 5c       	subi	r30, 0xCA	; 202
    1876:	fd 4e       	sbci	r31, 0xED	; 237
    1878:	94 91       	lpm	r25, Z
    187a:	a6 e7       	ldi	r26, 0x76	; 118
    187c:	b1 e0       	ldi	r27, 0x01	; 1
    187e:	26 e7       	ldi	r18, 0x76	; 118
    1880:	32 e0       	ldi	r19, 0x02	; 2
    uint8_t col, col_shift, c, c_len;

    for(uint8_t i=0; i<MAX7219_ROWS; i++)
        for(uint8_t j=0; j<MAX7219_PER_ROW; j++)
            display_bottom_buf[i][j] = 0;
    1882:	1c 92       	st	X, r1
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	1c 92       	st	X, r1
    1888:	11 97       	sbiw	r26, 0x01	; 1
    188a:	12 96       	adiw	r26, 0x02	; 2
    188c:	1c 92       	st	X, r1
    188e:	12 97       	sbiw	r26, 0x02	; 2
    1890:	13 96       	adiw	r26, 0x03	; 3
    1892:	1c 92       	st	X, r1
    1894:	13 97       	sbiw	r26, 0x03	; 3
    1896:	14 96       	adiw	r26, 0x04	; 4
    1898:	1c 92       	st	X, r1
    189a:	14 97       	sbiw	r26, 0x04	; 4
    189c:	15 96       	adiw	r26, 0x05	; 5
    189e:	1c 92       	st	X, r1
    18a0:	15 97       	sbiw	r26, 0x05	; 5
    18a2:	90 96       	adiw	r26, 0x20	; 32
{
    uint8_t dow = get_dow();
    uint8_t shift=get_dow_shift(dow);
    uint8_t col, col_shift, c, c_len;

    for(uint8_t i=0; i<MAX7219_ROWS; i++)
    18a4:	2a 17       	cp	r18, r26
    18a6:	3b 07       	cpc	r19, r27
    18a8:	61 f7       	brne	.-40     	; 0x1882 <print_bottom_dow+0x2c>
    18aa:	10 e0       	ldi	r17, 0x00	; 0
        for(uint8_t j=0; j<MAX7219_PER_ROW; j++)
            display_bottom_buf[i][j] = 0;

    for(uint8_t i=0; i<get_dow_len(dow); i++)
    18ac:	be 01       	movw	r22, r28
    18ae:	62 5c       	subi	r22, 0xC2	; 194
    18b0:	7d 4e       	sbci	r23, 0xED	; 237
    {
        c = get_dow_str(dow, i);
    18b2:	cc 0f       	add	r28, r28
    18b4:	dd 1f       	adc	r29, r29
    18b6:	cf 5f       	subi	r28, 0xFF	; 255
    18b8:	de 4f       	sbci	r29, 0xFE	; 254
                display_bottom_buf[j][col] |= cyr7table(c, j) >> col_shift;
            }
            if((col_shift + c_len) > 7)
            {
                col++;
                col_shift = 8 - col_shift;
    18ba:	08 e0       	ldi	r16, 0x08	; 8

    for(uint8_t i=0; i<MAX7219_ROWS; i++)
        for(uint8_t j=0; j<MAX7219_PER_ROW; j++)
            display_bottom_buf[i][j] = 0;

    for(uint8_t i=0; i<get_dow_len(dow); i++)
    18bc:	fb 01       	movw	r30, r22
    18be:	84 91       	lpm	r24, Z
    18c0:	18 17       	cp	r17, r24
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <print_bottom_dow+0x70>
    18c4:	6e c0       	rjmp	.+220    	; 0x19a2 <print_bottom_dow+0x14c>
    {
        c = get_dow_str(dow, i);
    18c6:	e8 81       	ld	r30, Y
    18c8:	f9 81       	ldd	r31, Y+1	; 0x01
    18ca:	e1 0f       	add	r30, r17
    18cc:	f1 1d       	adc	r31, r1
    18ce:	44 91       	lpm	r20, Z
        c_len = cyr7width(c);
    18d0:	e4 2f       	mov	r30, r20
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	e6 5c       	subi	r30, 0xC6	; 198
    18d6:	f6 4f       	sbci	r31, 0xF6	; 246
    18d8:	84 91       	lpm	r24, Z
        col = shift >> 3;
    18da:	b9 2e       	mov	r11, r25
    18dc:	b6 94       	lsr	r11
    18de:	b6 94       	lsr	r11
    18e0:	b6 94       	lsr	r11
        col_shift = shift & 0x07;
    18e2:	29 2f       	mov	r18, r25
    18e4:	27 70       	andi	r18, 0x07	; 7
    18e6:	a2 2e       	mov	r10, r18
    18e8:	ab 2d       	mov	r26, r11
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e7 e0       	ldi	r30, 0x07	; 7
    18ee:	4e 9f       	mul	r20, r30
    18f0:	a0 01       	movw	r20, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	aa 58       	subi	r26, 0x8A	; 138
    18f6:	be 4f       	sbci	r27, 0xFE	; 254
        if(col_shift)
    18f8:	22 23       	and	r18, r18
    18fa:	09 f4       	brne	.+2      	; 0x18fe <print_bottom_dow+0xa8>
    18fc:	42 c0       	rjmp	.+132    	; 0x1982 <print_bottom_dow+0x12c>
    18fe:	e1 2c       	mov	r14, r1
    1900:	f1 2c       	mov	r15, r1
        {
            for (uint8_t j=0; j<7; j++)
            {
                display_bottom_buf[j][col] |= cyr7table(c, j) >> col_shift;
    1902:	c2 2e       	mov	r12, r18
    1904:	d1 2c       	mov	r13, r1
    1906:	f7 01       	movw	r30, r14
    1908:	e4 0f       	add	r30, r20
    190a:	f5 1f       	adc	r31, r21
    190c:	e6 5c       	subi	r30, 0xC6	; 198
    190e:	f5 4f       	sbci	r31, 0xF5	; 245
    1910:	24 91       	lpm	r18, Z
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	0a 2c       	mov	r0, r10
    1916:	02 c0       	rjmp	.+4      	; 0x191c <print_bottom_dow+0xc6>
    1918:	35 95       	asr	r19
    191a:	27 95       	ror	r18
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <print_bottom_dow+0xc2>
    1920:	ec 91       	ld	r30, X
    1922:	2e 2b       	or	r18, r30
    1924:	2c 93       	st	X, r18
    1926:	ff ef       	ldi	r31, 0xFF	; 255
    1928:	ef 1a       	sub	r14, r31
    192a:	ff 0a       	sbc	r15, r31
    192c:	90 96       	adiw	r26, 0x20	; 32
        c_len = cyr7width(c);
        col = shift >> 3;
        col_shift = shift & 0x07;
        if(col_shift)
        {
            for (uint8_t j=0; j<7; j++)
    192e:	27 e0       	ldi	r18, 0x07	; 7
    1930:	e2 16       	cp	r14, r18
    1932:	f1 04       	cpc	r15, r1
    1934:	41 f7       	brne	.-48     	; 0x1906 <print_bottom_dow+0xb0>
            {
                display_bottom_buf[j][col] |= cyr7table(c, j) >> col_shift;
            }
            if((col_shift + c_len) > 7)
    1936:	c8 0e       	add	r12, r24
    1938:	d1 1c       	adc	r13, r1
    193a:	e8 e0       	ldi	r30, 0x08	; 8
    193c:	ce 16       	cp	r12, r30
    193e:	d1 04       	cpc	r13, r1
    1940:	24 f4       	brge	.+8      	; 0x194a <print_bottom_dow+0xf4>
            for (uint8_t j=0; j<7; j++)
            {
                display_bottom_buf[j][col] = cyr7table(c, j);
            }
        }
        shift += c_len + 1;
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	98 0f       	add	r25, r24

    for(uint8_t i=0; i<MAX7219_ROWS; i++)
        for(uint8_t j=0; j<MAX7219_PER_ROW; j++)
            display_bottom_buf[i][j] = 0;

    for(uint8_t i=0; i<get_dow_len(dow); i++)
    1946:	1f 5f       	subi	r17, 0xFF	; 255
    1948:	b9 cf       	rjmp	.-142    	; 0x18bc <print_bottom_dow+0x66>
                display_bottom_buf[j][col] |= cyr7table(c, j) >> col_shift;
            }
            if((col_shift + c_len) > 7)
            {
                col++;
                col_shift = 8 - col_shift;
    194a:	f0 2e       	mov	r15, r16
    194c:	fa 18       	sub	r15, r10
    194e:	b3 94       	inc	r11
    1950:	ab 2d       	mov	r26, r11
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	aa 58       	subi	r26, 0x8A	; 138
    1956:	be 4f       	sbci	r27, 0xFE	; 254
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
                for (uint8_t j=0; j<7; j++)
                {
                    display_bottom_buf[j][col] = cyr7table(c, j) << col_shift;
    195c:	f9 01       	movw	r30, r18
    195e:	e4 0f       	add	r30, r20
    1960:	f5 1f       	adc	r31, r21
    1962:	e6 5c       	subi	r30, 0xC6	; 198
    1964:	f5 4f       	sbci	r31, 0xF5	; 245
    1966:	e4 91       	lpm	r30, Z
    1968:	0f 2c       	mov	r0, r15
    196a:	01 c0       	rjmp	.+2      	; 0x196e <print_bottom_dow+0x118>
    196c:	ee 0f       	add	r30, r30
    196e:	0a 94       	dec	r0
    1970:	ea f7       	brpl	.-6      	; 0x196c <print_bottom_dow+0x116>
    1972:	ec 93       	st	X, r30
    1974:	2f 5f       	subi	r18, 0xFF	; 255
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	90 96       	adiw	r26, 0x20	; 32
            }
            if((col_shift + c_len) > 7)
            {
                col++;
                col_shift = 8 - col_shift;
                for (uint8_t j=0; j<7; j++)
    197a:	27 30       	cpi	r18, 0x07	; 7
    197c:	31 05       	cpc	r19, r1
    197e:	71 f7       	brne	.-36     	; 0x195c <print_bottom_dow+0x106>
    1980:	e0 cf       	rjmp	.-64     	; 0x1942 <print_bottom_dow+0xec>
    {
        c = get_dow_str(dow, i);
        c_len = cyr7width(c);
        col = shift >> 3;
        col_shift = shift & 0x07;
        if(col_shift)
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
        }
        else
        {
            for (uint8_t j=0; j<7; j++)
            {
                display_bottom_buf[j][col] = cyr7table(c, j);
    1986:	f9 01       	movw	r30, r18
    1988:	e4 0f       	add	r30, r20
    198a:	f5 1f       	adc	r31, r21
    198c:	e6 5c       	subi	r30, 0xC6	; 198
    198e:	f5 4f       	sbci	r31, 0xF5	; 245
    1990:	e4 91       	lpm	r30, Z
    1992:	ec 93       	st	X, r30
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	90 96       	adiw	r26, 0x20	; 32
                }
            }
        }
        else
        {
            for (uint8_t j=0; j<7; j++)
    199a:	27 30       	cpi	r18, 0x07	; 7
    199c:	31 05       	cpc	r19, r1
    199e:	99 f7       	brne	.-26     	; 0x1986 <print_bottom_dow+0x130>
    19a0:	d0 cf       	rjmp	.-96     	; 0x1942 <print_bottom_dow+0xec>
                display_bottom_buf[j][col] = cyr7table(c, j);
            }
        }
        shift += c_len + 1;
    }
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	df 90       	pop	r13
    19b0:	cf 90       	pop	r12
    19b2:	bf 90       	pop	r11
    19b4:	af 90       	pop	r10
    19b6:	08 95       	ret

000019b8 <print_bottom_date>:

void print_bottom_date(void)
{
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    uint8_t date_l = get_date_bcd_l();
    19c4:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_date_bcd_l>
    19c8:	c8 2f       	mov	r28, r24
    uint8_t date_h = get_date_bcd_h();
    19ca:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <get_date_bcd_h>
    19ce:	d8 2f       	mov	r29, r24
    uint8_t mon = get_month() - 1;
    19d0:	0e 94 20 16 	call	0x2c40	; 0x2c40 <get_month>
    19d4:	81 50       	subi	r24, 0x01	; 1
    uint8_t width = _months_width(mon) + 6;
    19d6:	e8 2f       	mov	r30, r24
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	e6 5c       	subi	r30, 0xC6	; 198
    19dc:	fe 4e       	sbci	r31, 0xEE	; 238
    19de:	e4 91       	lpm	r30, Z
    if (date_h > 0)
    19e0:	d1 11       	cpse	r29, r1
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <print_bottom_date+0x30>
void print_bottom_date(void)
{
    uint8_t date_l = get_date_bcd_l();
    uint8_t date_h = get_date_bcd_h();
    uint8_t mon = get_month() - 1;
    uint8_t width = _months_width(mon) + 6;
    19e4:	ea 5f       	subi	r30, 0xFA	; 250
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <print_bottom_date+0x32>
    if (date_h > 0)
    {
        width += 6;
    19e8:	e4 5f       	subi	r30, 0xF4	; 244
    }
    uint8_t shift = DISPLAY_BOTTOM_2_SHIFT + (48 - width)/2;
    19ea:	20 e3       	ldi	r18, 0x30	; 48
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	2e 1b       	sub	r18, r30
    19f0:	31 09       	sbc	r19, r1
    19f2:	37 ff       	sbrs	r19, 7
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <print_bottom_date+0x42>
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	35 95       	asr	r19
    19fc:	27 95       	ror	r18
    19fe:	90 e4       	ldi	r25, 0x40	; 64
    1a00:	92 0f       	add	r25, r18
    1a02:	e6 e7       	ldi	r30, 0x76	; 118
    1a04:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t col, col_shift;

    for(uint8_t i=0; i<8; i++)
        for(uint8_t j=8; j<14; j++)
            display_bottom_buf[i][j] = 0;
    1a06:	10 86       	std	Z+8, r1	; 0x08
    1a08:	11 86       	std	Z+9, r1	; 0x09
    1a0a:	12 86       	std	Z+10, r1	; 0x0a
    1a0c:	13 86       	std	Z+11, r1	; 0x0b
    1a0e:	14 86       	std	Z+12, r1	; 0x0c
    1a10:	15 86       	std	Z+13, r1	; 0x0d
    1a12:	b0 96       	adiw	r30, 0x20	; 32
        width += 6;
    }
    uint8_t shift = DISPLAY_BOTTOM_2_SHIFT + (48 - width)/2;
    uint8_t col, col_shift;

    for(uint8_t i=0; i<8; i++)
    1a14:	42 e0       	ldi	r20, 0x02	; 2
    1a16:	e6 37       	cpi	r30, 0x76	; 118
    1a18:	f4 07       	cpc	r31, r20
    1a1a:	a9 f7       	brne	.-22     	; 0x1a06 <print_bottom_date+0x4e>
        for(uint8_t j=8; j<14; j++)
            display_bottom_buf[i][j] = 0;

    if(date_h)
    1a1c:	dd 23       	and	r29, r29
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <print_bottom_date+0x6a>
    1a20:	47 c0       	rjmp	.+142    	; 0x1ab0 <print_bottom_date+0xf8>
    {
        col = shift >> 3;
    1a22:	a9 2f       	mov	r26, r25
    1a24:	a6 95       	lsr	r26
    1a26:	a6 95       	lsr	r26
    1a28:	a6 95       	lsr	r26
        col_shift = shift & 0x07;
    1a2a:	b9 2f       	mov	r27, r25
    1a2c:	b7 70       	andi	r27, 0x07	; 7
    1a2e:	6a 2f       	mov	r22, r26
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	6a 58       	subi	r22, 0x8A	; 138
    1a34:	7e 4f       	sbci	r23, 0xFE	; 254
    1a36:	97 e0       	ldi	r25, 0x07	; 7
    1a38:	d9 9f       	mul	r29, r25
    1a3a:	a0 01       	movw	r20, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	00 e0       	ldi	r16, 0x00	; 0
    1a40:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t j=0; j<7; j++)
        {
            display_bottom_buf[j][col] = dDigital7table(date_h, j) >> col_shift;
    1a42:	f8 01       	movw	r30, r16
    1a44:	e4 0f       	add	r30, r20
    1a46:	f5 1f       	adc	r31, r21
    1a48:	e8 53       	subi	r30, 0x38	; 56
    1a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4c:	e4 91       	lpm	r30, Z
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	7f 01       	movw	r14, r30
    1a52:	0b 2e       	mov	r0, r27
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <print_bottom_date+0xa2>
    1a56:	f5 94       	asr	r15
    1a58:	e7 94       	ror	r14
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <print_bottom_date+0x9e>
    1a5e:	fb 01       	movw	r30, r22
    1a60:	e0 82       	st	Z, r14
    1a62:	0f 5f       	subi	r16, 0xFF	; 255
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	60 5e       	subi	r22, 0xE0	; 224
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255

    if(date_h)
    {
        col = shift >> 3;
        col_shift = shift & 0x07;
        for (uint8_t j=0; j<7; j++)
    1a6a:	07 30       	cpi	r16, 0x07	; 7
    1a6c:	11 05       	cpc	r17, r1
    1a6e:	49 f7       	brne	.-46     	; 0x1a42 <print_bottom_date+0x8a>
        {
            display_bottom_buf[j][col] = dDigital7table(date_h, j) >> col_shift;
        }
        if((col_shift + 5) > 7)
    1a70:	b3 30       	cpi	r27, 0x03	; 3
    1a72:	18 f4       	brcc	.+6      	; 0x1a7a <print_bottom_date+0xc2>
            for (uint8_t j=0; j<7; j++)
            {
                display_bottom_buf[j][col] = dDigital7table(date_h, j) << col_shift;
            }
        }
        shift += 5 + 1;
    1a74:	96 e4       	ldi	r25, 0x46	; 70
    1a76:	92 0f       	add	r25, r18
    1a78:	1b c0       	rjmp	.+54     	; 0x1ab0 <print_bottom_date+0xf8>
            display_bottom_buf[j][col] = dDigital7table(date_h, j) >> col_shift;
        }
        if((col_shift + 5) > 7)
        {
            col++;
            col_shift = 8 - col_shift;
    1a7a:	98 e0       	ldi	r25, 0x08	; 8
    1a7c:	9b 1b       	sub	r25, r27
    1a7e:	af 5f       	subi	r26, 0xFF	; 255
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	aa 58       	subi	r26, 0x8A	; 138
    1a84:	be 4f       	sbci	r27, 0xFE	; 254
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	70 e0       	ldi	r23, 0x00	; 0
            for (uint8_t j=0; j<7; j++)
            {
                display_bottom_buf[j][col] = dDigital7table(date_h, j) << col_shift;
    1a8a:	fb 01       	movw	r30, r22
    1a8c:	e4 0f       	add	r30, r20
    1a8e:	f5 1f       	adc	r31, r21
    1a90:	e8 53       	subi	r30, 0x38	; 56
    1a92:	fe 4f       	sbci	r31, 0xFE	; 254
    1a94:	e4 91       	lpm	r30, Z
    1a96:	09 2e       	mov	r0, r25
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <print_bottom_date+0xe4>
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	0a 94       	dec	r0
    1a9e:	ea f7       	brpl	.-6      	; 0x1a9a <print_bottom_date+0xe2>
    1aa0:	ec 93       	st	X, r30
    1aa2:	6f 5f       	subi	r22, 0xFF	; 255
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	90 96       	adiw	r26, 0x20	; 32
        }
        if((col_shift + 5) > 7)
        {
            col++;
            col_shift = 8 - col_shift;
            for (uint8_t j=0; j<7; j++)
    1aa8:	67 30       	cpi	r22, 0x07	; 7
    1aaa:	71 05       	cpc	r23, r1
    1aac:	71 f7       	brne	.-36     	; 0x1a8a <print_bottom_date+0xd2>
    1aae:	e2 cf       	rjmp	.-60     	; 0x1a74 <print_bottom_date+0xbc>
            }
        }
        shift += 5 + 1;
    }

    col = shift >> 3;
    1ab0:	49 2f       	mov	r20, r25
    1ab2:	46 95       	lsr	r20
    1ab4:	46 95       	lsr	r20
    1ab6:	46 95       	lsr	r20
    col_shift = shift & 0x07;
    1ab8:	59 2f       	mov	r21, r25
    1aba:	57 70       	andi	r21, 0x07	; 7
    1abc:	a4 2f       	mov	r26, r20
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	f7 e0       	ldi	r31, 0x07	; 7
    1ac2:	cf 9f       	mul	r28, r31
    1ac4:	90 01       	movw	r18, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	aa 58       	subi	r26, 0x8A	; 138
    1aca:	be 4f       	sbci	r27, 0xFE	; 254
    if(col_shift)
    1acc:	55 23       	and	r21, r21
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <print_bottom_date+0x11a>
    1ad0:	48 c0       	rjmp	.+144    	; 0x1b62 <print_bottom_date+0x1aa>
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    {
        for (uint8_t j=0; j<7; j++)
        {
            display_bottom_buf[j][col] |= dDigital7table(date_l, j) >> col_shift;
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	e6 0f       	add	r30, r22
    1ada:	f7 1f       	adc	r31, r23
    1adc:	e8 53       	subi	r30, 0x38	; 56
    1ade:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae0:	e4 91       	lpm	r30, Z
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	05 2e       	mov	r0, r21
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <print_bottom_date+0x134>
    1ae8:	f5 95       	asr	r31
    1aea:	e7 95       	ror	r30
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <print_bottom_date+0x130>
    1af0:	fc 91       	ld	r31, X
    1af2:	ef 2b       	or	r30, r31
    1af4:	ec 93       	st	X, r30
    1af6:	6f 5f       	subi	r22, 0xFF	; 255
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	90 96       	adiw	r26, 0x20	; 32

    col = shift >> 3;
    col_shift = shift & 0x07;
    if(col_shift)
    {
        for (uint8_t j=0; j<7; j++)
    1afc:	67 30       	cpi	r22, 0x07	; 7
    1afe:	71 05       	cpc	r23, r1
    1b00:	51 f7       	brne	.-44     	; 0x1ad6 <print_bottom_date+0x11e>
        {
            display_bottom_buf[j][col] |= dDigital7table(date_l, j) >> col_shift;
        }
        if((col_shift + 5) > 7)
    1b02:	53 30       	cpi	r21, 0x03	; 3
    1b04:	90 f4       	brcc	.+36     	; 0x1b2a <print_bottom_date+0x172>
        for (uint8_t j=0; j<7; j++)
        {
            display_bottom_buf[j][col] = dDigital7table(date_l, j);
        }
    }
    shift += 5 + 2;
    1b06:	99 5f       	subi	r25, 0xF9	; 249

    col = shift / 8;
    1b08:	09 2f       	mov	r16, r25
    1b0a:	06 95       	lsr	r16
    1b0c:	06 95       	lsr	r16
    1b0e:	06 95       	lsr	r16
    col_shift = shift & 0x07;
    1b10:	19 2f       	mov	r17, r25
    1b12:	17 70       	andi	r17, 0x07	; 7
    1b14:	24 e1       	ldi	r18, 0x14	; 20
    1b16:	82 9f       	mul	r24, r18
    1b18:	c0 01       	movw	r24, r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i=0; i<4; i++) {
        for (uint8_t j=0; j<5; j++) {
            uint8_t tmp = _months_table(mon, j, i);
            if (col_shift) {
                display_bottom_buf[j+2][col] |= tmp >> col_shift;
                display_bottom_buf[j+2][col+1] = tmp << (8 - col_shift);
    1b20:	68 e0       	ldi	r22, 0x08	; 8
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	61 1b       	sub	r22, r17
    1b26:	71 09       	sbc	r23, r1
    1b28:	2c c0       	rjmp	.+88     	; 0x1b82 <print_bottom_date+0x1ca>
            display_bottom_buf[j][col] |= dDigital7table(date_l, j) >> col_shift;
        }
        if((col_shift + 5) > 7)
        {
            col++;
            col_shift = 8 - col_shift;
    1b2a:	68 e0       	ldi	r22, 0x08	; 8
    1b2c:	65 1b       	sub	r22, r21
    1b2e:	4f 5f       	subi	r20, 0xFF	; 255
    1b30:	a4 2f       	mov	r26, r20
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	aa 58       	subi	r26, 0x8A	; 138
    1b36:	be 4f       	sbci	r27, 0xFE	; 254
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
            for (uint8_t j=0; j<7; j++)
            {
                display_bottom_buf[j][col] = dDigital7table(date_l, j) << col_shift;
    1b3c:	f9 01       	movw	r30, r18
    1b3e:	e4 0f       	add	r30, r20
    1b40:	f5 1f       	adc	r31, r21
    1b42:	e8 53       	subi	r30, 0x38	; 56
    1b44:	fe 4f       	sbci	r31, 0xFE	; 254
    1b46:	e4 91       	lpm	r30, Z
    1b48:	06 2e       	mov	r0, r22
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <print_bottom_date+0x196>
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	0a 94       	dec	r0
    1b50:	ea f7       	brpl	.-6      	; 0x1b4c <print_bottom_date+0x194>
    1b52:	ec 93       	st	X, r30
    1b54:	4f 5f       	subi	r20, 0xFF	; 255
    1b56:	5f 4f       	sbci	r21, 0xFF	; 255
    1b58:	90 96       	adiw	r26, 0x20	; 32
        }
        if((col_shift + 5) > 7)
        {
            col++;
            col_shift = 8 - col_shift;
            for (uint8_t j=0; j<7; j++)
    1b5a:	47 30       	cpi	r20, 0x07	; 7
    1b5c:	51 05       	cpc	r21, r1
    1b5e:	71 f7       	brne	.-36     	; 0x1b3c <print_bottom_date+0x184>
    1b60:	d2 cf       	rjmp	.-92     	; 0x1b06 <print_bottom_date+0x14e>
        shift += 5 + 1;
    }

    col = shift >> 3;
    col_shift = shift & 0x07;
    if(col_shift)
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    }
    else
    {
        for (uint8_t j=0; j<7; j++)
        {
            display_bottom_buf[j][col] = dDigital7table(date_l, j);
    1b66:	fa 01       	movw	r30, r20
    1b68:	e2 0f       	add	r30, r18
    1b6a:	f3 1f       	adc	r31, r19
    1b6c:	e8 53       	subi	r30, 0x38	; 56
    1b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b70:	e4 91       	lpm	r30, Z
    1b72:	ec 93       	st	X, r30
    1b74:	4f 5f       	subi	r20, 0xFF	; 255
    1b76:	5f 4f       	sbci	r21, 0xFF	; 255
    1b78:	90 96       	adiw	r26, 0x20	; 32
            }
        }
    }
    else
    {
        for (uint8_t j=0; j<7; j++)
    1b7a:	47 30       	cpi	r20, 0x07	; 7
    1b7c:	51 05       	cpc	r21, r1
    1b7e:	99 f7       	brne	.-26     	; 0x1b66 <print_bottom_date+0x1ae>
    1b80:	c2 cf       	rjmp	.-124    	; 0x1b06 <print_bottom_date+0x14e>
    1b82:	a0 2f       	mov	r26, r16
    1b84:	a2 0f       	add	r26, r18
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	aa 54       	subi	r26, 0x4A	; 74
    1b8a:	be 4f       	sbci	r27, 0xFE	; 254
    1b8c:	ec 01       	movw	r28, r24
    1b8e:	c2 0f       	add	r28, r18
    1b90:	d3 1f       	adc	r29, r19
        shift += 5 + 1;
    }

    col = shift >> 3;
    col_shift = shift & 0x07;
    if(col_shift)
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0

    col = shift / 8;
    col_shift = shift & 0x07;
    for (uint8_t i=0; i<4; i++) {
        for (uint8_t j=0; j<5; j++) {
            uint8_t tmp = _months_table(mon, j, i);
    1b96:	fe 01       	movw	r30, r28
    1b98:	e4 0f       	add	r30, r20
    1b9a:	f5 1f       	adc	r31, r21
    1b9c:	ea 5b       	subi	r30, 0xBA	; 186
    1b9e:	fe 4e       	sbci	r31, 0xEE	; 238
    1ba0:	e4 91       	lpm	r30, Z
            if (col_shift) {
    1ba2:	11 23       	and	r17, r17
    1ba4:	a1 f0       	breq	.+40     	; 0x1bce <print_bottom_date+0x216>
                display_bottom_buf[j+2][col] |= tmp >> col_shift;
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	7f 01       	movw	r14, r30
    1baa:	01 2e       	mov	r0, r17
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <print_bottom_date+0x1fa>
    1bae:	f5 94       	asr	r15
    1bb0:	e7 94       	ror	r14
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <print_bottom_date+0x1f6>
    1bb6:	fc 91       	ld	r31, X
    1bb8:	ef 2a       	or	r14, r31
    1bba:	ec 92       	st	X, r14
                display_bottom_buf[j+2][col+1] = tmp << (8 - col_shift);
    1bbc:	06 2e       	mov	r0, r22
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <print_bottom_date+0x20a>
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	0a 94       	dec	r0
    1bc4:	ea f7       	brpl	.-6      	; 0x1bc0 <print_bottom_date+0x208>
    1bc6:	11 96       	adiw	r26, 0x01	; 1
    1bc8:	ec 93       	st	X, r30
    1bca:	11 97       	sbiw	r26, 0x01	; 1
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <print_bottom_date+0x218>
            } else {
                display_bottom_buf[j+2][col] = tmp;
    1bce:	ec 93       	st	X, r30
    1bd0:	4c 5f       	subi	r20, 0xFC	; 252
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	90 96       	adiw	r26, 0x20	; 32
    shift += 5 + 2;

    col = shift / 8;
    col_shift = shift & 0x07;
    for (uint8_t i=0; i<4; i++) {
        for (uint8_t j=0; j<5; j++) {
    1bd6:	44 31       	cpi	r20, 0x14	; 20
    1bd8:	51 05       	cpc	r21, r1
    1bda:	e9 f6       	brne	.-70     	; 0x1b96 <print_bottom_date+0x1de>
    1bdc:	2f 5f       	subi	r18, 0xFF	; 255
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    }
    shift += 5 + 2;

    col = shift / 8;
    col_shift = shift & 0x07;
    for (uint8_t i=0; i<4; i++) {
    1be0:	24 30       	cpi	r18, 0x04	; 4
    1be2:	31 05       	cpc	r19, r1
    1be4:	71 f6       	brne	.-100    	; 0x1b82 <print_bottom_date+0x1ca>
                display_bottom_buf[j+2][col] = tmp;
            }
        }
        col++;
    }
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	08 95       	ret

00001bf4 <print_ext_temperature>:

void print_ext_temperature(int16_t temperature)
{
    1bf4:	af 92       	push	r10
    1bf6:	bf 92       	push	r11
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	9c 01       	movw	r18, r24
    uint8_t temp_h, temp_l, temp_f, sign=0;
    if (temperature < 0)
    1c0a:	97 ff       	sbrs	r25, 7
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <print_ext_temperature+0x24>
    {
        temperature *= -1;
    1c0e:	31 95       	neg	r19
    1c10:	21 95       	neg	r18
    1c12:	31 09       	sbc	r19, r1
        sign = 1;
    1c14:	11 e0       	ldi	r17, 0x01	; 1
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <print_ext_temperature+0x26>
    }
}

void print_ext_temperature(int16_t temperature)
{
    uint8_t temp_h, temp_l, temp_f, sign=0;
    1c18:	10 e0       	ldi	r17, 0x00	; 0
    if (temperature < 0)
    {
        temperature *= -1;
        sign = 1;
    }
    temp_l = temperature >> 4;
    1c1a:	c9 01       	movw	r24, r18
    1c1c:	f4 e0       	ldi	r31, 0x04	; 4
    1c1e:	95 95       	asr	r25
    1c20:	87 95       	ror	r24
    1c22:	fa 95       	dec	r31
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <print_ext_temperature+0x2a>
    temp_h = temp_l / 10;
    1c26:	6a e0       	ldi	r22, 0x0A	; 10
    1c28:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__udivmodqi4>
    1c2c:	69 2f       	mov	r22, r25
    temp_l %= 10;
    temp_f = temperature & 0x0F;
    1c2e:	2f 70       	andi	r18, 0x0F	; 15
    temp_f *= 10;
    1c30:	22 0f       	add	r18, r18
    1c32:	42 2f       	mov	r20, r18
    1c34:	44 0f       	add	r20, r20
    1c36:	44 0f       	add	r20, r20
    1c38:	24 0f       	add	r18, r20
    temp_f /= 16;
    1c3a:	22 95       	swap	r18
    1c3c:	2f 70       	andi	r18, 0x0F	; 15
    1c3e:	c6 e7       	ldi	r28, 0x76	; 118
    1c40:	d1 e0       	ldi	r29, 0x01	; 1
    1c42:	37 e0       	ldi	r19, 0x07	; 7
    1c44:	93 9f       	mul	r25, r19
    1c46:	60 01       	movw	r12, r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	97 e0       	ldi	r25, 0x07	; 7
    1c4c:	29 9f       	mul	r18, r25
    1c4e:	70 01       	movw	r14, r0
    1c50:	11 24       	eor	r1, r1
    1c52:	de 01       	movw	r26, r28
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	fa 01       	movw	r30, r20
    1c5a:	ec 0d       	add	r30, r12
    1c5c:	fd 1d       	adc	r31, r13
    1c5e:	e8 53       	subi	r30, 0x38	; 56
    1c60:	fe 4f       	sbci	r31, 0xFE	; 254
    for (uint8_t i=0; i<7; i++)
    {
        display_bottom_buf[i][19] = dDigital7table(temp_l, i) >> 6;
    1c62:	94 91       	lpm	r25, Z
    1c64:	92 95       	swap	r25
    1c66:	96 95       	lsr	r25
    1c68:	96 95       	lsr	r25
    1c6a:	93 70       	andi	r25, 0x03	; 3
    1c6c:	53 96       	adiw	r26, 0x13	; 19
    1c6e:	9c 93       	st	X, r25
    1c70:	53 97       	sbiw	r26, 0x13	; 19
        display_bottom_buf[i][20] = (dDigital7table(temp_l, i) << 2) | (dDigital7table(temp_f, i) >> 6);
    1c72:	a4 90       	lpm	r10, Z
    1c74:	fa 01       	movw	r30, r20
    1c76:	ee 0d       	add	r30, r14
    1c78:	ff 1d       	adc	r31, r15
    1c7a:	e8 53       	subi	r30, 0x38	; 56
    1c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c7e:	94 91       	lpm	r25, Z
    1c80:	34 e0       	ldi	r19, 0x04	; 4
    1c82:	a3 9e       	mul	r10, r19
    1c84:	50 01       	movw	r10, r0
    1c86:	11 24       	eor	r1, r1
    1c88:	92 95       	swap	r25
    1c8a:	96 95       	lsr	r25
    1c8c:	96 95       	lsr	r25
    1c8e:	93 70       	andi	r25, 0x03	; 3
    1c90:	a9 2a       	or	r10, r25
    1c92:	54 96       	adiw	r26, 0x14	; 20
    1c94:	ac 92       	st	X, r10
    1c96:	54 97       	sbiw	r26, 0x14	; 20
        display_bottom_buf[i][21] = dDigital7table(temp_f, i) << 2;
    1c98:	e4 91       	lpm	r30, Z
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	55 96       	adiw	r26, 0x15	; 21
    1ca0:	ec 93       	st	X, r30
    1ca2:	55 97       	sbiw	r26, 0x15	; 21
    1ca4:	4f 5f       	subi	r20, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	90 96       	adiw	r26, 0x20	; 32
    temp_h = temp_l / 10;
    temp_l %= 10;
    temp_f = temperature & 0x0F;
    temp_f *= 10;
    temp_f /= 16;
    for (uint8_t i=0; i<7; i++)
    1caa:	47 30       	cpi	r20, 0x07	; 7
    1cac:	51 05       	cpc	r21, r1
    1cae:	a1 f6       	brne	.-88     	; 0x1c58 <print_ext_temperature+0x64>
    {
        display_bottom_buf[i][19] = dDigital7table(temp_l, i) >> 6;
        display_bottom_buf[i][20] = (dDigital7table(temp_l, i) << 2) | (dDigital7table(temp_f, i) >> 6);
        display_bottom_buf[i][21] = dDigital7table(temp_f, i) << 2;
    }
    display_bottom_buf[3][18] = 0;
    1cb0:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <display_bottom_buf+0x72>
    display_bottom_buf[6][20] |= 0x08;
    1cb4:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <display_bottom_buf+0xd4>
    1cb8:	98 60       	ori	r25, 0x08	; 8
    1cba:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <display_bottom_buf+0xd4>
    if (temp_h > 0)
    1cbe:	88 23       	and	r24, r24
    1cc0:	d9 f0       	breq	.+54     	; 0x1cf8 <print_ext_temperature+0x104>
    1cc2:	97 e0       	ldi	r25, 0x07	; 7
    1cc4:	89 9f       	mul	r24, r25
    1cc6:	d0 01       	movw	r26, r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    {
        for (uint8_t i=0; i<7; i++)
        {
            display_bottom_buf[i][19] |= dDigital7table(temp_h, i);
    1cce:	fa 01       	movw	r30, r20
    1cd0:	ea 0f       	add	r30, r26
    1cd2:	fb 1f       	adc	r31, r27
    1cd4:	e8 53       	subi	r30, 0x38	; 56
    1cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd8:	e4 91       	lpm	r30, Z
    1cda:	9b 89       	ldd	r25, Y+19	; 0x13
    1cdc:	e9 2b       	or	r30, r25
    1cde:	eb 8b       	std	Y+19, r30	; 0x13
    1ce0:	4f 5f       	subi	r20, 0xFF	; 255
    1ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce4:	a0 96       	adiw	r28, 0x20	; 32
    }
    display_bottom_buf[3][18] = 0;
    display_bottom_buf[6][20] |= 0x08;
    if (temp_h > 0)
    {
        for (uint8_t i=0; i<7; i++)
    1ce6:	47 30       	cpi	r20, 0x07	; 7
    1ce8:	51 05       	cpc	r21, r1
    1cea:	89 f7       	brne	.-30     	; 0x1cce <print_ext_temperature+0xda>
        {
            display_bottom_buf[i][19] |= dDigital7table(temp_h, i);
        }
        if (sign)
    1cec:	11 23       	and	r17, r17
    1cee:	59 f0       	breq	.+22     	; 0x1d06 <print_ext_temperature+0x112>
        {
            display_bottom_buf[3][18] = 0x0E;
    1cf0:	9e e0       	ldi	r25, 0x0E	; 14
    1cf2:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <display_bottom_buf+0x72>
    1cf6:	07 c0       	rjmp	.+14     	; 0x1d06 <print_ext_temperature+0x112>
        }
    }
    else if (sign)
    1cf8:	11 23       	and	r17, r17
    1cfa:	29 f0       	breq	.+10     	; 0x1d06 <print_ext_temperature+0x112>
    {
        display_bottom_buf[3][19] |= 0x38;
    1cfc:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <display_bottom_buf+0x73>
    1d00:	98 63       	ori	r25, 0x38	; 56
    1d02:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <display_bottom_buf+0x73>
    }
    display_bottom_buf[0][21] |= 0x06;
    1d06:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <display_bottom_buf+0x15>
    1d0a:	96 60       	ori	r25, 0x06	; 6
    1d0c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <display_bottom_buf+0x15>
    display_bottom_buf[3][21] |= 0x06;
    1d10:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <display_bottom_buf+0x75>
    1d14:	96 60       	ori	r25, 0x06	; 6
    1d16:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <display_bottom_buf+0x75>
    display_bottom_buf[1][21] |= 0x09;
    1d1a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <display_bottom_buf+0x35>
    1d1e:	99 60       	ori	r25, 0x09	; 9
    1d20:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <display_bottom_buf+0x35>
    display_bottom_buf[2][21] |= 0x09;
    1d24:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <display_bottom_buf+0x55>
    1d28:	99 60       	ori	r25, 0x09	; 9
    1d2a:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <display_bottom_buf+0x55>
    1d2e:	ee e1       	ldi	r30, 0x1E	; 30
    1d30:	8e 9f       	mul	r24, r30
    1d32:	c0 01       	movw	r24, r0
    1d34:	11 24       	eor	r1, r1
    1d36:	fe e1       	ldi	r31, 0x1E	; 30
    1d38:	6f 9f       	mul	r22, r31
    1d3a:	b0 01       	movw	r22, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	3e e1       	ldi	r19, 0x1E	; 30
    1d40:	23 9f       	mul	r18, r19
    1d42:	a0 01       	movw	r20, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0

    // Temperature to big display
    for (uint8_t i=0; i<30; i+=2)
    {
        display_full_buf[i>>1][0] = tdDigital15table(temp_h, i) >> 4;
    1d4a:	e6 e0       	ldi	r30, 0x06	; 6
    1d4c:	be 2e       	mov	r11, r30
        display_full_buf[i>>1][1] = (tdDigital15table(temp_h, i) << 4) | (tdDigital15table(temp_h, i+1) >> 4);
    1d4e:	7c 01       	movw	r14, r24
    1d50:	ef ef       	ldi	r30, 0xFF	; 255
    1d52:	ee 1a       	sub	r14, r30
    1d54:	fe 0a       	sbc	r15, r30
        display_full_buf[i>>1][2] = tdDigital15table(temp_l, i);
        display_full_buf[i>>1][3] = tdDigital15table(temp_l, i+1);
    1d56:	8b 01       	movw	r16, r22
    1d58:	0f 5f       	subi	r16, 0xFF	; 255
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
        display_full_buf[i>>1][4] = tdDigital15table(temp_f, i);
        display_full_buf[i>>1][5] = tdDigital15table(temp_f, i+1);
    1d5c:	ea 01       	movw	r28, r20
    1d5e:	21 96       	adiw	r28, 0x01	; 1
    display_bottom_buf[2][21] |= 0x09;

    // Temperature to big display
    for (uint8_t i=0; i<30; i+=2)
    {
        display_full_buf[i>>1][0] = tdDigital15table(temp_h, i) >> 4;
    1d60:	c2 2e       	mov	r12, r18
    1d62:	c6 94       	lsr	r12
    1d64:	d1 2c       	mov	r13, r1
    1d66:	fc 01       	movw	r30, r24
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f3 1f       	adc	r31, r19
    1d6c:	e2 5f       	subi	r30, 0xF2	; 242
    1d6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d70:	a4 90       	lpm	r10, Z
    1d72:	bc 9c       	mul	r11, r12
    1d74:	d0 01       	movw	r26, r0
    1d76:	bd 9c       	mul	r11, r13
    1d78:	b0 0d       	add	r27, r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	aa 55       	subi	r26, 0x5A	; 90
    1d7e:	bd 4f       	sbci	r27, 0xFD	; 253
    1d80:	da 2c       	mov	r13, r10
    1d82:	d6 94       	lsr	r13
    1d84:	d6 94       	lsr	r13
    1d86:	d6 94       	lsr	r13
    1d88:	d6 94       	lsr	r13
    1d8a:	dc 92       	st	X, r13
        display_full_buf[i>>1][1] = (tdDigital15table(temp_h, i) << 4) | (tdDigital15table(temp_h, i+1) >> 4);
    1d8c:	c4 90       	lpm	r12, Z
    1d8e:	f7 01       	movw	r30, r14
    1d90:	e2 0f       	add	r30, r18
    1d92:	f3 1f       	adc	r31, r19
    1d94:	e2 5f       	subi	r30, 0xF2	; 242
    1d96:	fd 4f       	sbci	r31, 0xFD	; 253
    1d98:	e4 91       	lpm	r30, Z
    1d9a:	f0 e1       	ldi	r31, 0x10	; 16
    1d9c:	cf 9e       	mul	r12, r31
    1d9e:	60 01       	movw	r12, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	e2 95       	swap	r30
    1da4:	ef 70       	andi	r30, 0x0F	; 15
    1da6:	ec 29       	or	r30, r12
    1da8:	11 96       	adiw	r26, 0x01	; 1
    1daa:	ec 93       	st	X, r30
    1dac:	11 97       	sbiw	r26, 0x01	; 1
        display_full_buf[i>>1][2] = tdDigital15table(temp_l, i);
    1dae:	fb 01       	movw	r30, r22
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	e2 5f       	subi	r30, 0xF2	; 242
    1db6:	fd 4f       	sbci	r31, 0xFD	; 253
    1db8:	e4 91       	lpm	r30, Z
    1dba:	12 96       	adiw	r26, 0x02	; 2
    1dbc:	ec 93       	st	X, r30
    1dbe:	12 97       	sbiw	r26, 0x02	; 2
        display_full_buf[i>>1][3] = tdDigital15table(temp_l, i+1);
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	e2 0f       	add	r30, r18
    1dc4:	f3 1f       	adc	r31, r19
    1dc6:	e2 5f       	subi	r30, 0xF2	; 242
    1dc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dca:	e4 91       	lpm	r30, Z
    1dcc:	13 96       	adiw	r26, 0x03	; 3
    1dce:	ec 93       	st	X, r30
    1dd0:	13 97       	sbiw	r26, 0x03	; 3
        display_full_buf[i>>1][4] = tdDigital15table(temp_f, i);
    1dd2:	fa 01       	movw	r30, r20
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	e2 5f       	subi	r30, 0xF2	; 242
    1dda:	fd 4f       	sbci	r31, 0xFD	; 253
    1ddc:	e4 91       	lpm	r30, Z
    1dde:	14 96       	adiw	r26, 0x04	; 4
    1de0:	ec 93       	st	X, r30
    1de2:	14 97       	sbiw	r26, 0x04	; 4
        display_full_buf[i>>1][5] = tdDigital15table(temp_f, i+1);
    1de4:	fe 01       	movw	r30, r28
    1de6:	e2 0f       	add	r30, r18
    1de8:	f3 1f       	adc	r31, r19
    1dea:	e2 5f       	subi	r30, 0xF2	; 242
    1dec:	fd 4f       	sbci	r31, 0xFD	; 253
    1dee:	e4 91       	lpm	r30, Z
    1df0:	15 96       	adiw	r26, 0x05	; 5
    1df2:	ec 93       	st	X, r30
    1df4:	2e 5f       	subi	r18, 0xFE	; 254
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    display_bottom_buf[3][21] |= 0x06;
    display_bottom_buf[1][21] |= 0x09;
    display_bottom_buf[2][21] |= 0x09;

    // Temperature to big display
    for (uint8_t i=0; i<30; i+=2)
    1df8:	2e 31       	cpi	r18, 0x1E	; 30
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <print_ext_temperature+0x20c>
    1dfe:	b0 cf       	rjmp	.-160    	; 0x1d60 <print_ext_temperature+0x16c>
        display_full_buf[i>>1][2] = tdDigital15table(temp_l, i);
        display_full_buf[i>>1][3] = tdDigital15table(temp_l, i+1);
        display_full_buf[i>>1][4] = tdDigital15table(temp_f, i);
        display_full_buf[i>>1][5] = tdDigital15table(temp_f, i+1);
    }
    display_full_buf[14][3] ^= 4;
    1e00:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <display_full_buf+0x57>
    1e04:	84 e0       	ldi	r24, 0x04	; 4
    1e06:	89 27       	eor	r24, r25
    1e08:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <display_full_buf+0x57>
}
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	bf 90       	pop	r11
    1e1e:	af 90       	pop	r10
    1e20:	08 95       	ret

00001e22 <clear_ext_temperature>:

void clear_ext_temperature(void)
{
    1e22:	e6 e7       	ldi	r30, 0x76	; 118
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    for (uint8_t i=0; i<7; i++)
    {
        display_bottom_buf[i][18] = 0;
    1e26:	12 8a       	std	Z+18, r1	; 0x12
        display_bottom_buf[i][19] = 0;
    1e28:	13 8a       	std	Z+19, r1	; 0x13
        display_bottom_buf[i][20] = 0;
    1e2a:	14 8a       	std	Z+20, r1	; 0x14
        display_bottom_buf[i][21] = 0;
    1e2c:	15 8a       	std	Z+21, r1	; 0x15
    1e2e:	b0 96       	adiw	r30, 0x20	; 32
    display_full_buf[14][3] ^= 4;
}

void clear_ext_temperature(void)
{
    for (uint8_t i=0; i<7; i++)
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	e6 35       	cpi	r30, 0x56	; 86
    1e34:	f8 07       	cpc	r31, r24
    1e36:	b9 f7       	brne	.-18     	; 0x1e26 <clear_ext_temperature+0x4>
        display_bottom_buf[i][18] = 0;
        display_bottom_buf[i][19] = 0;
        display_bottom_buf[i][20] = 0;
        display_bottom_buf[i][21] = 0;
    }
}
    1e38:	08 95       	ret

00001e3a <print_pressure>:

void print_pressure(int32_t pressure)
{
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	9b 01       	movw	r18, r22
    1e54:	ac 01       	movw	r20, r24
    pressure *= 10;
    1e56:	aa e0       	ldi	r26, 0x0A	; 10
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__muluhisi3>
    1e5e:	4b 01       	movw	r8, r22
    1e60:	5c 01       	movw	r10, r24
    pressure /= 133;
    1e62:	25 e8       	ldi	r18, 0x85	; 133
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__divmodsi4>
    1e6e:	69 01       	movw	r12, r18
    1e70:	7a 01       	movw	r14, r20
    uint8_t p1 = pressure / 1000;
    1e72:	c5 01       	movw	r24, r10
    1e74:	b4 01       	movw	r22, r8
    1e76:	28 e8       	ldi	r18, 0x88	; 136
    1e78:	37 e0       	ldi	r19, 0x07	; 7
    1e7a:	42 e0       	ldi	r20, 0x02	; 2
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	0e 94 24 1b 	call	0x3648	; 0x3648 <__divmodsi4>
    1e82:	c2 2f       	mov	r28, r18
    pressure -= (uint16_t)p1 * 1000;
    1e84:	28 ee       	ldi	r18, 0xE8	; 232
    1e86:	33 e0       	ldi	r19, 0x03	; 3
    1e88:	c2 9f       	mul	r28, r18
    1e8a:	c0 01       	movw	r24, r0
    1e8c:	c3 9f       	mul	r28, r19
    1e8e:	90 0d       	add	r25, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	c8 1a       	sub	r12, r24
    1e94:	d9 0a       	sbc	r13, r25
    1e96:	e1 08       	sbc	r14, r1
    1e98:	f1 08       	sbc	r15, r1
    uint8_t p2 = pressure / 100;
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	b6 01       	movw	r22, r12
    1e9e:	24 e6       	ldi	r18, 0x64	; 100
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	0e 94 24 1b 	call	0x3648	; 0x3648 <__divmodsi4>
    1eaa:	02 2f       	mov	r16, r18
    pressure -= (uint16_t)p2 * 100;
    1eac:	24 e6       	ldi	r18, 0x64	; 100
    1eae:	02 9f       	mul	r16, r18
    1eb0:	c0 01       	movw	r24, r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	c8 1a       	sub	r12, r24
    1eb6:	d9 0a       	sbc	r13, r25
    1eb8:	e1 08       	sbc	r14, r1
    1eba:	f1 08       	sbc	r15, r1
    uint8_t p3 = pressure / 10;
    1ebc:	c7 01       	movw	r24, r14
    1ebe:	b6 01       	movw	r22, r12
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	0e 94 24 1b 	call	0x3648	; 0x3648 <__divmodsi4>
    uint8_t p4 = (uint8_t)pressure - p3 * 10;
    1ecc:	8a e0       	ldi	r24, 0x0A	; 10
    1ece:	28 9f       	mul	r18, r24
    1ed0:	c0 18       	sub	r12, r0
    1ed2:	11 24       	eor	r1, r1
    1ed4:	a6 e7       	ldi	r26, 0x76	; 118
    1ed6:	b1 e0       	ldi	r27, 0x01	; 1
    1ed8:	87 e0       	ldi	r24, 0x07	; 7
    1eda:	c8 9f       	mul	r28, r24
    1edc:	70 01       	movw	r14, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	87 e0       	ldi	r24, 0x07	; 7
    1ee2:	08 9f       	mul	r16, r24
    1ee4:	80 01       	movw	r16, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	87 e0       	ldi	r24, 0x07	; 7
    1eea:	28 9f       	mul	r18, r24
    1eec:	e0 01       	movw	r28, r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	27 e0       	ldi	r18, 0x07	; 7
    1ef2:	c2 9e       	mul	r12, r18
    1ef4:	b0 01       	movw	r22, r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	fa 01       	movw	r30, r20
    1efe:	ee 0d       	add	r30, r14
    1f00:	ff 1d       	adc	r31, r15
    1f02:	e8 53       	subi	r30, 0x38	; 56
    1f04:	fe 4f       	sbci	r31, 0xFE	; 254
    for (uint8_t i=0; i<7; i++)
    {
        display_bottom_buf[i][25] = dDigital7table(p1, i) >> 4;
    1f06:	84 91       	lpm	r24, Z
    1f08:	82 95       	swap	r24
    1f0a:	8f 70       	andi	r24, 0x0F	; 15
    1f0c:	59 96       	adiw	r26, 0x19	; 25
    1f0e:	8c 93       	st	X, r24
    1f10:	59 97       	sbiw	r26, 0x19	; 25
        display_bottom_buf[i][26] = (dDigital7table(p1, i) << 4) | (dDigital7table(p2, i) >> 2);
    1f12:	94 91       	lpm	r25, Z
    1f14:	fa 01       	movw	r30, r20
    1f16:	e0 0f       	add	r30, r16
    1f18:	f1 1f       	adc	r31, r17
    1f1a:	e8 53       	subi	r30, 0x38	; 56
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	e4 91       	lpm	r30, Z
    1f20:	20 e1       	ldi	r18, 0x10	; 16
    1f22:	92 9f       	mul	r25, r18
    1f24:	c0 01       	movw	r24, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	e6 95       	lsr	r30
    1f2a:	e6 95       	lsr	r30
    1f2c:	8e 2b       	or	r24, r30
    1f2e:	5a 96       	adiw	r26, 0x1a	; 26
    1f30:	8c 93       	st	X, r24
    1f32:	5a 97       	sbiw	r26, 0x1a	; 26
        display_bottom_buf[i][27] = dDigital7table(p3, i);
    1f34:	fa 01       	movw	r30, r20
    1f36:	ec 0f       	add	r30, r28
    1f38:	fd 1f       	adc	r31, r29
    1f3a:	e8 53       	subi	r30, 0x38	; 56
    1f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3e:	e4 91       	lpm	r30, Z
    1f40:	5b 96       	adiw	r26, 0x1b	; 27
    1f42:	ec 93       	st	X, r30
    1f44:	5b 97       	sbiw	r26, 0x1b	; 27
        display_bottom_buf[i][28] = dDigital7table(p4, i);
    1f46:	fa 01       	movw	r30, r20
    1f48:	e6 0f       	add	r30, r22
    1f4a:	f7 1f       	adc	r31, r23
    1f4c:	e8 53       	subi	r30, 0x38	; 56
    1f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f50:	e4 91       	lpm	r30, Z
    1f52:	5c 96       	adiw	r26, 0x1c	; 28
    1f54:	ec 93       	st	X, r30
    1f56:	5c 97       	sbiw	r26, 0x1c	; 28
    1f58:	4f 5f       	subi	r20, 0xFF	; 255
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5c:	90 96       	adiw	r26, 0x20	; 32
    pressure -= (uint16_t)p1 * 1000;
    uint8_t p2 = pressure / 100;
    pressure -= (uint16_t)p2 * 100;
    uint8_t p3 = pressure / 10;
    uint8_t p4 = (uint8_t)pressure - p3 * 10;
    for (uint8_t i=0; i<7; i++)
    1f5e:	47 30       	cpi	r20, 0x07	; 7
    1f60:	51 05       	cpc	r21, r1
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <print_pressure+0x12c>
    1f64:	cb cf       	rjmp	.-106    	; 0x1efc <print_pressure+0xc2>
        display_bottom_buf[i][25] = dDigital7table(p1, i) >> 4;
        display_bottom_buf[i][26] = (dDigital7table(p1, i) << 4) | (dDigital7table(p2, i) >> 2);
        display_bottom_buf[i][27] = dDigital7table(p3, i);
        display_bottom_buf[i][28] = dDigital7table(p4, i);
    }
    display_bottom_buf[6][27] |= 0x02;
    1f66:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <display_bottom_buf+0xdb>
    1f6a:	82 60       	ori	r24, 0x02	; 2
    1f6c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <display_bottom_buf+0xdb>
}
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	08 95       	ret

00001f8a <print_int_temperature>:

void print_int_temperature(int16_t t)
{
    1f8a:	9c 01       	movw	r18, r24
    t /= 10;
    uint8_t temp_l = t % 10;
    1f8c:	ea e0       	ldi	r30, 0x0A	; 10
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	bf 01       	movw	r22, r30
    1f92:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    1f96:	cb 01       	movw	r24, r22
    1f98:	bf 01       	movw	r22, r30
    1f9a:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    1f9e:	48 2f       	mov	r20, r24
    uint8_t temp_h = t / 10;
    1fa0:	c9 01       	movw	r24, r18
    1fa2:	64 e6       	ldi	r22, 0x64	; 100
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    1faa:	a6 e7       	ldi	r26, 0x76	; 118
    1fac:	b1 e0       	ldi	r27, 0x01	; 1
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i=0; i<7; i++)
    {
        display_bottom_buf[i][16] = dDigital7table(temp_h, i) | (dDigital7table(temp_l, i) >> 6);
    1fb2:	87 e0       	ldi	r24, 0x07	; 7
    1fb4:	68 9f       	mul	r22, r24
    1fb6:	b0 01       	movw	r22, r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	48 9f       	mul	r20, r24
    1fbc:	c0 01       	movw	r24, r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	fb 01       	movw	r30, r22
    1fc2:	e2 0f       	add	r30, r18
    1fc4:	f3 1f       	adc	r31, r19
    1fc6:	e8 53       	subi	r30, 0x38	; 56
    1fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fca:	44 91       	lpm	r20, Z
    1fcc:	fc 01       	movw	r30, r24
    1fce:	e2 0f       	add	r30, r18
    1fd0:	f3 1f       	adc	r31, r19
    1fd2:	e8 53       	subi	r30, 0x38	; 56
    1fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd6:	54 91       	lpm	r21, Z
    1fd8:	52 95       	swap	r21
    1fda:	56 95       	lsr	r21
    1fdc:	56 95       	lsr	r21
    1fde:	53 70       	andi	r21, 0x03	; 3
    1fe0:	45 2b       	or	r20, r21
    1fe2:	50 96       	adiw	r26, 0x10	; 16
    1fe4:	4c 93       	st	X, r20
    1fe6:	50 97       	sbiw	r26, 0x10	; 16
        display_bottom_buf[i][17] = (dDigital7table(temp_l, i) << 2);
    1fe8:	e4 91       	lpm	r30, Z
    1fea:	ee 0f       	add	r30, r30
    1fec:	ee 0f       	add	r30, r30
    1fee:	51 96       	adiw	r26, 0x11	; 17
    1ff0:	ec 93       	st	X, r30
    1ff2:	51 97       	sbiw	r26, 0x11	; 17
    1ff4:	2f 5f       	subi	r18, 0xFF	; 255
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	90 96       	adiw	r26, 0x20	; 32
void print_int_temperature(int16_t t)
{
    t /= 10;
    uint8_t temp_l = t % 10;
    uint8_t temp_h = t / 10;
    for (uint8_t i=0; i<7; i++)
    1ffa:	27 30       	cpi	r18, 0x07	; 7
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	01 f7       	brne	.-64     	; 0x1fc0 <print_int_temperature+0x36>
    {
        display_bottom_buf[i][16] = dDigital7table(temp_h, i) | (dDigital7table(temp_l, i) >> 6);
        display_bottom_buf[i][17] = (dDigital7table(temp_l, i) << 2);
    }
    display_bottom_buf[0][17] |= 0x06;
    2000:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <display_bottom_buf+0x11>
    2004:	86 60       	ori	r24, 0x06	; 6
    2006:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <display_bottom_buf+0x11>
    display_bottom_buf[3][17] |= 0x06;
    200a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <display_bottom_buf+0x71>
    200e:	86 60       	ori	r24, 0x06	; 6
    2010:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <display_bottom_buf+0x71>
    display_bottom_buf[1][17] |= 0x09;
    2014:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <display_bottom_buf+0x31>
    2018:	89 60       	ori	r24, 0x09	; 9
    201a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <display_bottom_buf+0x31>
    display_bottom_buf[2][17] |= 0x09;
    201e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <display_bottom_buf+0x51>
    2022:	89 60       	ori	r24, 0x09	; 9
    2024:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <display_bottom_buf+0x51>
    2028:	08 95       	ret

0000202a <display_clear_buf>:
}

void display_clear_buf(void)
{
    202a:	ae e1       	ldi	r26, 0x1E	; 30
    202c:	b1 e0       	ldi	r27, 0x01	; 1
    202e:	8e e5       	ldi	r24, 0x5E	; 94
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	ed 91       	ld	r30, X+
    2034:	fd 91       	ld	r31, X+
    2036:	9f 01       	movw	r18, r30
    2038:	2a 5f       	subi	r18, 0xFA	; 250
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    for(uint8_t i=0; i<32; i++)
        for(uint8_t j=0; j<6; j++)
            display_buf[i][j] = 0;
    203c:	11 92       	st	Z+, r1
}

void display_clear_buf(void)
{
    for(uint8_t i=0; i<32; i++)
        for(uint8_t j=0; j<6; j++)
    203e:	e2 17       	cp	r30, r18
    2040:	f3 07       	cpc	r31, r19
    2042:	e1 f7       	brne	.-8      	; 0x203c <display_clear_buf+0x12>
    display_bottom_buf[2][17] |= 0x09;
}

void display_clear_buf(void)
{
    for(uint8_t i=0; i<32; i++)
    2044:	8a 17       	cp	r24, r26
    2046:	9b 07       	cpc	r25, r27
    2048:	a1 f7       	brne	.-24     	; 0x2032 <display_clear_buf+0x8>
    204a:	ae e4       	ldi	r26, 0x4E	; 78
    204c:	b1 e0       	ldi	r27, 0x01	; 1
    204e:	ed 91       	ld	r30, X+
    2050:	fd 91       	ld	r31, X+
    2052:	9f 01       	movw	r18, r30
    2054:	20 5e       	subi	r18, 0xE0	; 224
    2056:	3f 4f       	sbci	r19, 0xFF	; 255
        for(uint8_t j=0; j<6; j++)
            display_buf[i][j] = 0;

    for(uint8_t i=24; i<32; i++)
        for(uint8_t j=0; j<32; j++)
            display_buf[i][j] = 0;
    2058:	11 92       	st	Z+, r1
    for(uint8_t i=0; i<32; i++)
        for(uint8_t j=0; j<6; j++)
            display_buf[i][j] = 0;

    for(uint8_t i=24; i<32; i++)
        for(uint8_t j=0; j<32; j++)
    205a:	2e 17       	cp	r18, r30
    205c:	3f 07       	cpc	r19, r31
    205e:	e1 f7       	brne	.-8      	; 0x2058 <display_clear_buf+0x2e>
{
    for(uint8_t i=0; i<32; i++)
        for(uint8_t j=0; j<6; j++)
            display_buf[i][j] = 0;

    for(uint8_t i=24; i<32; i++)
    2060:	8a 17       	cp	r24, r26
    2062:	9b 07       	cpc	r25, r27
    2064:	a1 f7       	brne	.-24     	; 0x204e <display_clear_buf+0x24>
    2066:	08 95       	ret

00002068 <display_init>:
void display_scroll_right(void);
void display_clear_buf(void);

void display_init(void)
{
    display_clear_buf();
    2068:	0e 94 15 10 	call	0x202a	; 0x202a <display_clear_buf>
    // print_img();
    max7219_init();
    206c:	0e 94 41 16 	call	0x2c82	; 0x2c82 <max7219_init>
    max7219_update();
    2070:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <max7219_update>

00002074 <max7219_load_row>:
        for(uint8_t j=0; j<32; j++)
            display_buf[i][j] = 0;
}

void max7219_load_row(uint8_t r, uint8_t *buf)
{
    2074:	8f 92       	push	r8
    2076:	9f 92       	push	r9
    2078:	af 92       	push	r10
    207a:	bf 92       	push	r11
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    uint8_t tmp, col, row;
    uint8_t col_shift = display_col_shift & 7;
    208c:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <display_col_shift>
    2090:	32 2f       	mov	r19, r18
    2092:	37 70       	andi	r19, 0x07	; 7
    uint8_t matrix_shift = display_col_shift >> 3;
    2094:	26 95       	lsr	r18
    2096:	26 95       	lsr	r18
    2098:	26 95       	lsr	r18
    {
        *buf++ = r + 1;

        if(m < MAX7219_PER_ROW)
        {
            row = r + display_row_shift;
    209a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    209e:	e8 2e       	mov	r14, r24
    20a0:	e9 0e       	add	r14, r25
            if(row < 24)
                tmp = display_buf[row][m];
    20a2:	4e 2d       	mov	r20, r14
    20a4:	50 e0       	ldi	r21, 0x00	; 0
            }
            *buf++ = tmp;
        }
        else
        {
            row = 15 - r + display_row_shift;
    20a6:	91 5f       	subi	r25, 0xF1	; 241
    20a8:	98 1b       	sub	r25, r24
            col = 11 - m;
            if(row < 24)
                tmp = display_buf[row][col];
    20aa:	c9 2f       	mov	r28, r25
    20ac:	d0 e0       	ldi	r29, 0x00	; 0
    20ae:	db 01       	movw	r26, r22
    20b0:	6b e0       	ldi	r22, 0x0B	; 11
    20b2:	f6 2e       	mov	r15, r22
    20b4:	f2 0e       	add	r15, r18
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t col_shift = display_col_shift & 7;
    uint8_t matrix_shift = display_col_shift >> 3;

    for(uint8_t m=0; m<MAX7219_NUMBER; m++)
    {
        *buf++ = r + 1;
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	cc 0f       	add	r28, r28
    20be:	dd 1f       	adc	r29, r29
                tmp = display_buf[row][col];
            else
            {
                col += matrix_shift;
                col &= 31;
                tmp = display_buf[row][col];
    20c0:	c2 5e       	subi	r28, 0xE2	; 226
    20c2:	de 4f       	sbci	r29, 0xFE	; 254
                if (col_shift)
                {
                    tmp <<= col_shift;
                    col++;
                    col &= 31;
                    tmp |= display_buf[row][col] >> (8 - col_shift);
    20c4:	08 e0       	ldi	r16, 0x08	; 8
    20c6:	10 e0       	ldi	r17, 0x00	; 0
    20c8:	03 1b       	sub	r16, r19
    20ca:	11 09       	sbc	r17, r1
    20cc:	44 0f       	add	r20, r20
    20ce:	55 1f       	adc	r21, r21
            if(row < 24)
                tmp = display_buf[row][m];
            else
            {
                col = (m + matrix_shift) & 31;
                tmp = display_buf[row][col];
    20d0:	42 5e       	subi	r20, 0xE2	; 226
    20d2:	5e 4f       	sbci	r21, 0xFE	; 254
    uint8_t col_shift = display_col_shift & 7;
    uint8_t matrix_shift = display_col_shift >> 3;

    for(uint8_t m=0; m<MAX7219_NUMBER; m++)
    {
        *buf++ = r + 1;
    20d4:	8c 93       	st	X, r24
    20d6:	e6 2f       	mov	r30, r22

        if(m < MAX7219_PER_ROW)
    20d8:	66 30       	cpi	r22, 0x06	; 6
    20da:	88 f5       	brcc	.+98     	; 0x213e <max7219_load_row+0xca>
        {
            row = r + display_row_shift;
            if(row < 24)
    20dc:	f7 e1       	ldi	r31, 0x17	; 23
    20de:	fe 15       	cp	r31, r14
    20e0:	40 f0       	brcs	.+16     	; 0x20f2 <max7219_load_row+0x7e>
                tmp = display_buf[row][m];
    20e2:	fa 01       	movw	r30, r20
    20e4:	c0 80       	ld	r12, Z
    20e6:	d1 80       	ldd	r13, Z+1	; 0x01
    20e8:	f6 01       	movw	r30, r12
    20ea:	e6 0f       	add	r30, r22
    20ec:	f7 1f       	adc	r31, r23
    20ee:	d0 80       	ld	r13, Z
    20f0:	22 c0       	rjmp	.+68     	; 0x2136 <max7219_load_row+0xc2>
            else
            {
                col = (m + matrix_shift) & 31;
    20f2:	e2 0f       	add	r30, r18
    20f4:	ef 71       	andi	r30, 0x1F	; 31
    20f6:	be 2e       	mov	r11, r30
                tmp = display_buf[row][col];
    20f8:	fa 01       	movw	r30, r20
    20fa:	80 80       	ld	r8, Z
    20fc:	91 80       	ldd	r9, Z+1	; 0x01
    20fe:	64 01       	movw	r12, r8
    2100:	cb 0c       	add	r12, r11
    2102:	d1 1c       	adc	r13, r1
    2104:	f6 01       	movw	r30, r12
    2106:	d0 80       	ld	r13, Z
                if(col_shift)
    2108:	33 23       	and	r19, r19
    210a:	a9 f0       	breq	.+42     	; 0x2136 <max7219_load_row+0xc2>
                {
                    tmp <<= col_shift;
                    col++;
    210c:	b3 94       	inc	r11
                    col &= 31;
                    tmp |= display_buf[row][col] >> (8 - col_shift);
    210e:	fb 2d       	mov	r31, r11
    2110:	ff 71       	andi	r31, 0x1F	; 31
    2112:	bf 2e       	mov	r11, r31
    2114:	f4 01       	movw	r30, r8
    2116:	eb 0d       	add	r30, r11
    2118:	f1 1d       	adc	r31, r1
    211a:	e0 81       	ld	r30, Z
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	00 2e       	mov	r0, r16
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <max7219_load_row+0xb2>
    2122:	f5 95       	asr	r31
    2124:	e7 95       	ror	r30
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <max7219_load_row+0xae>
    212a:	03 2e       	mov	r0, r19
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <max7219_load_row+0xbc>
    212e:	dd 0c       	add	r13, r13
    2130:	0a 94       	dec	r0
    2132:	ea f7       	brpl	.-6      	; 0x212e <max7219_load_row+0xba>
    2134:	de 2a       	or	r13, r30
                }
            }
            *buf++ = tmp;
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	dc 92       	st	X, r13
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	33 c0       	rjmp	.+102    	; 0x21a4 <max7219_load_row+0x130>
        }
        else
        {
            row = 15 - r + display_row_shift;
            col = 11 - m;
    213e:	df 2c       	mov	r13, r15
    2140:	d2 1a       	sub	r13, r18
            if(row < 24)
    2142:	98 31       	cpi	r25, 0x18	; 24
    2144:	30 f4       	brcc	.+12     	; 0x2152 <max7219_load_row+0xde>
                tmp = display_buf[row][col];
    2146:	e8 81       	ld	r30, Y
    2148:	f9 81       	ldd	r31, Y+1	; 0x01
    214a:	ed 0d       	add	r30, r13
    214c:	f1 1d       	adc	r31, r1
    214e:	a0 80       	ld	r10, Z
    2150:	21 c0       	rjmp	.+66     	; 0x2194 <max7219_load_row+0x120>
            else
            {
                col += matrix_shift;
                col &= 31;
    2152:	ef 2d       	mov	r30, r15
    2154:	ef 71       	andi	r30, 0x1F	; 31
    2156:	be 2e       	mov	r11, r30
                tmp = display_buf[row][col];
    2158:	c8 80       	ld	r12, Y
    215a:	d9 80       	ldd	r13, Y+1	; 0x01
    215c:	f6 01       	movw	r30, r12
    215e:	eb 0d       	add	r30, r11
    2160:	f1 1d       	adc	r31, r1
    2162:	a0 80       	ld	r10, Z
                if (col_shift)
    2164:	33 23       	and	r19, r19
    2166:	b1 f0       	breq	.+44     	; 0x2194 <max7219_load_row+0x120>
                {
                    tmp <<= col_shift;
                    col++;
    2168:	f1 e0       	ldi	r31, 0x01	; 1
    216a:	fb 0d       	add	r31, r11
                    col &= 31;
                    tmp |= display_buf[row][col] >> (8 - col_shift);
    216c:	ff 71       	andi	r31, 0x1F	; 31
    216e:	cf 0e       	add	r12, r31
    2170:	d1 1c       	adc	r13, r1
    2172:	f6 01       	movw	r30, r12
    2174:	c0 80       	ld	r12, Z
    2176:	d1 2c       	mov	r13, r1
    2178:	00 2e       	mov	r0, r16
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <max7219_load_row+0x10c>
    217c:	d5 94       	asr	r13
    217e:	c7 94       	ror	r12
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <max7219_load_row+0x108>
    2184:	ea 2d       	mov	r30, r10
    2186:	03 2e       	mov	r0, r19
    2188:	01 c0       	rjmp	.+2      	; 0x218c <max7219_load_row+0x118>
    218a:	ee 0f       	add	r30, r30
    218c:	0a 94       	dec	r0
    218e:	ea f7       	brpl	.-6      	; 0x218a <max7219_load_row+0x116>
    2190:	ae 2e       	mov	r10, r30
    2192:	ac 28       	or	r10, r12
                }
            }
            *buf++ = reverse(tmp);
    2194:	ea 2d       	mov	r30, r10
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	e8 53       	subi	r30, 0x38	; 56
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	e4 91       	lpm	r30, Z
    219e:	11 96       	adiw	r26, 0x01	; 1
    21a0:	ec 93       	st	X, r30
    21a2:	11 97       	sbiw	r26, 0x01	; 1
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	fa 94       	dec	r15
{
    uint8_t tmp, col, row;
    uint8_t col_shift = display_col_shift & 7;
    uint8_t matrix_shift = display_col_shift >> 3;

    for(uint8_t m=0; m<MAX7219_NUMBER; m++)
    21ac:	6c 30       	cpi	r22, 0x0C	; 12
    21ae:	71 05       	cpc	r23, r1
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <max7219_load_row+0x140>
    21b2:	90 cf       	rjmp	.-224    	; 0x20d4 <max7219_load_row+0x60>
                }
            }
            *buf++ = reverse(tmp);
        }
    }
}
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	ef 90       	pop	r14
    21c0:	df 90       	pop	r13
    21c2:	cf 90       	pop	r12
    21c4:	bf 90       	pop	r11
    21c6:	af 90       	pop	r10
    21c8:	9f 90       	pop	r9
    21ca:	8f 90       	pop	r8
    21cc:	08 95       	ret

000021ce <display_activate>:
    max7219_update();
}

void display_activate(void)
{
    display_state = DISPLAY_STATE_ACTIVATING;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <display_state>
    // print_img();
    max7219_update();
    21d4:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <max7219_update>
    timer_register(DISPLAY_TIMER_ID, 1, display_scroll_up);
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5a e0       	ldi	r21, 0x0A	; 10
    21dc:	61 e0       	ldi	r22, 0x01	; 1
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>

000021e4 <display_deactivate>:
}

void display_deactivate(void)
{
    display_state = DISPLAY_STATE_INACTIVE;
    21e4:	84 e0       	ldi	r24, 0x04	; 4
    21e6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <display_state>
    display_clear_buf();
    21ea:	0e 94 15 10 	call	0x202a	; 0x202a <display_clear_buf>
    display_row_shift = 16;
    21ee:	80 e1       	ldi	r24, 0x10	; 16
    21f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    display_col_shift = 0;
    21f4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <display_col_shift>
    max7219_update_with_config();
    21f8:	0e 94 6f 16 	call	0x2cde	; 0x2cde <max7219_update_with_config>
    timer_stop(DISPLAY_TIMER_ID);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <timer_stop>

00002202 <time_update_handler>:
}

void time_update_handler(void)
{
    if(display_state == DISPLAY_STATE_ACTIVE)
    2202:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <display_state>
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	69 f4       	brne	.+26     	; 0x2224 <time_update_handler+0x22>
    {
        print_top_time();
    220a:	0e 94 81 0b 	call	0x1702	; 0x1702 <print_top_time>
        print_bottom_dow();
    220e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <print_bottom_dow>
        print_bottom_date();
    2212:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <print_bottom_date>
        if (get_second_bcd_l())
    2216:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <get_second_bcd_l>
    221a:	81 11       	cpse	r24, r1
        {
            max7219_update();
    221c:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <max7219_update>
        }
        else
        {
            max7219_update_with_config();
    2220:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <max7219_update_with_config>
        }
    }
    else if(display_state == DISPLAY_STATE_ACTIVATING)
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	d1 f3       	breq	.-12     	; 0x221c <time_update_handler+0x1a>
    {
        // print_img();
        max7219_update();
    }
    else if(display_state == DISPLAY_STATE_WAITING)
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	89 f4       	brne	.+34     	; 0x224e <time_update_handler+0x4c>
    {
        print_top_time();
    222c:	0e 94 81 0b 	call	0x1702	; 0x1702 <print_top_time>
        print_bottom_dow();
    2230:	0e 94 2b 0c 	call	0x1856	; 0x1856 <print_bottom_dow>
        print_bottom_date();
    2234:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <print_bottom_date>
        display_col_shift = 0;
    2238:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <display_col_shift>
        display_state = DISPLAY_STATE_ACTIVE;
    223c:	83 e0       	ldi	r24, 0x03	; 3
    223e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <display_state>
        timer_register(DISPLAY_TIMER_ID, 1, display_wait_down);
    2242:	4c e6       	ldi	r20, 0x6C	; 108
    2244:	5a e0       	ldi	r21, 0x0A	; 10
    2246:	61 e0       	ldi	r22, 0x01	; 1
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>
    224e:	08 95       	ret

00002250 <uart_init>:

static volatile uint8_t UART_RxFlag=0;

void uart_init(void)
{
    PORTD |= 0x02;
    2250:	59 9a       	sbi	0x0b, 1	; 11

    UBRR0H = (uint8_t) (((F_CPU / (16UL * BAUDRATE)) - 1) >> 8);  // set baud rate
    2252:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (uint8_t) ((F_CPU / (16UL * BAUDRATE)) - 1);
    2256:	87 e6       	ldi	r24, 0x67	; 103
    2258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
    225c:	88 e9       	ldi	r24, 0x98	; 152
    225e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    UART_RxTail = 0;    //Set UART Buffer
    2262:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <UART_RxTail>
    UART_RxHead = 0;
    2266:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <UART_RxHead>
    UART_TxTail = 0;
    226a:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <UART_TxTail>
    UART_TxHead = 0;
    226e:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <UART_TxHead>
    2272:	08 95       	ret

00002274 <uart_update_baudrate>:
}

void uart_update_baudrate(uint32_t baudrate)
{
    UBRR0H = (uint8_t) (((F_CPU / (16UL * baudrate)) - 1) >> 8);  // set baud rate
    2274:	9b 01       	movw	r18, r22
    2276:	ac 01       	movw	r20, r24
    2278:	84 e0       	ldi	r24, 0x04	; 4
    227a:	22 0f       	add	r18, r18
    227c:	33 1f       	adc	r19, r19
    227e:	44 1f       	adc	r20, r20
    2280:	55 1f       	adc	r21, r21
    2282:	8a 95       	dec	r24
    2284:	d1 f7       	brne	.-12     	; 0x227a <uart_update_baudrate+0x6>
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	74 e2       	ldi	r23, 0x24	; 36
    228a:	84 ef       	ldi	r24, 0xF4	; 244
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 02 1b 	call	0x3604	; 0x3604 <__udivmodsi4>
    2292:	da 01       	movw	r26, r20
    2294:	c9 01       	movw	r24, r18
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	a1 09       	sbc	r26, r1
    229a:	b1 09       	sbc	r27, r1
    229c:	89 2f       	mov	r24, r25
    229e:	9a 2f       	mov	r25, r26
    22a0:	ab 2f       	mov	r26, r27
    22a2:	bb 27       	eor	r27, r27
    22a4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (uint8_t) ((F_CPU / (16UL * baudrate)) - 1);
    22a8:	21 50       	subi	r18, 0x01	; 1
    22aa:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    22ae:	08 95       	ret

000022b0 <uart_check_receiver>:
}

uint8_t uart_check_receiver(void)
{
    return UART_RxFlag;
    22b0:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <UART_RxFlag>
}
    22b4:	08 95       	ret

000022b6 <uart_send_byte>:

void uart_send_byte(uint8_t data) //UART Transmit Byte
{
    uint8_t tmphead;

    tmphead = UART_TxHead + 1;
    22b6:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <UART_TxHead>
    22ba:	9f 5f       	subi	r25, 0xFF	; 255
    while(tmphead == UART_TxTail);
    22bc:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <UART_TxTail>
    22c0:	92 17       	cp	r25, r18
    22c2:	e1 f3       	breq	.-8      	; 0x22bc <uart_send_byte+0x6>
    UART_TxBuf[tmphead] = data;
    22c4:	e9 2f       	mov	r30, r25
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	e7 5f       	subi	r30, 0xF7	; 247
    22ca:	fc 4f       	sbci	r31, 0xFC	; 252
    22cc:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    22ce:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <UART_TxHead>
    UCSR0B |= (1 << UDRIE0);    //Enable Interrupt UART Data Register Empty
    22d2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    22d6:	80 62       	ori	r24, 0x20	; 32
    22d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    22dc:	08 95       	ret

000022de <uart_get_byte>:

uint8_t uart_get_byte(void)   //UART Receive Byte
{
    uint8_t tmptail;

    while(UART_RxHead == UART_RxTail);
    22de:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <UART_RxHead>
    22e2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <UART_RxTail>
    22e6:	98 17       	cp	r25, r24
    22e8:	d1 f3       	breq	.-12     	; 0x22de <uart_get_byte>
    tmptail = UART_RxTail + 1;
    22ea:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <UART_RxTail>
    22ee:	ef 5f       	subi	r30, 0xFF	; 255
    UART_RxTail = tmptail;
    22f0:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <UART_RxTail>
    if(UART_RxHead == UART_RxTail)
    22f4:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <UART_RxHead>
    22f8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <UART_RxTail>
    22fc:	98 13       	cpse	r25, r24
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <uart_get_byte+0x26>
        UART_RxFlag = 0;
    2300:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <UART_RxFlag>

    return UART_RxBuf[tmptail];
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	e5 5f       	subi	r30, 0xF5	; 245
    2308:	fb 4f       	sbci	r31, 0xFB	; 251
    230a:	80 81       	ld	r24, Z
}
    230c:	08 95       	ret

0000230e <__vector_18>:

SIGNAL(USART_RX_vect)   //Interrupt UART Receive Byte
{
    230e:	1f 92       	push	r1
    2310:	0f 92       	push	r0
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	0f 92       	push	r0
    2316:	11 24       	eor	r1, r1
    2318:	8f 93       	push	r24
    231a:	9f 93       	push	r25
    231c:	ef 93       	push	r30
    231e:	ff 93       	push	r31
    uint8_t tmphead;

    tmphead = UART_RxHead + 1;
    2320:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <UART_RxHead>
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    UART_RxBuf[tmphead] = UDR0;
    2326:	e8 2f       	mov	r30, r24
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    232e:	e5 5f       	subi	r30, 0xF5	; 245
    2330:	fb 4f       	sbci	r31, 0xFB	; 251
    2332:	90 83       	st	Z, r25
    UART_RxHead = tmphead;
    2334:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <UART_RxHead>
    UART_RxFlag = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <UART_RxFlag>
}
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	9f 91       	pop	r25
    2344:	8f 91       	pop	r24
    2346:	0f 90       	pop	r0
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	0f 90       	pop	r0
    234c:	1f 90       	pop	r1
    234e:	18 95       	reti

00002350 <__vector_19>:

SIGNAL(USART_UDRE_vect) //Interrupt UART Data Register Empty (Transmit Byte)
{
    2350:	1f 92       	push	r1
    2352:	0f 92       	push	r0
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	0f 92       	push	r0
    2358:	11 24       	eor	r1, r1
    235a:	8f 93       	push	r24
    235c:	9f 93       	push	r25
    235e:	ef 93       	push	r30
    2360:	ff 93       	push	r31
    uint8_t tmptail;


    if(UART_TxHead != UART_TxTail)  //If Transmit Buffer Not Free, Transmit Byte
    2362:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <UART_TxHead>
    2366:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <UART_TxTail>
    236a:	98 17       	cp	r25, r24
    236c:	61 f0       	breq	.+24     	; 0x2386 <__vector_19+0x36>
    {
        tmptail = UART_TxTail + 1;
    236e:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <UART_TxTail>
    2372:	ef 5f       	subi	r30, 0xFF	; 255
        UART_TxTail = tmptail;
    2374:	e0 93 07 03 	sts	0x0307, r30	; 0x800307 <UART_TxTail>
        UDR0 = UART_TxBuf[tmptail];
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	e7 5f       	subi	r30, 0xF7	; 247
    237c:	fc 4f       	sbci	r31, 0xFC	; 252
    237e:	80 81       	ld	r24, Z
    2380:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2384:	05 c0       	rjmp	.+10     	; 0x2390 <__vector_19+0x40>
    }
    else    //If Transmit Buffer Free
    {
        UCSR0B &= ~(1 << UDRIE0);   //Disable Interrupt UART Data Register Empty
    2386:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    238a:	8f 7d       	andi	r24, 0xDF	; 223
    238c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    }
}
    2390:	ff 91       	pop	r31
    2392:	ef 91       	pop	r30
    2394:	9f 91       	pop	r25
    2396:	8f 91       	pop	r24
    2398:	0f 90       	pop	r0
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	0f 90       	pop	r0
    239e:	1f 90       	pop	r1
    23a0:	18 95       	reti

000023a2 <uart_send_hex>:

/********************************************************************************
Conversion HEX to ASCII and send to UART
********************************************************************************/
void uart_send_hex(uint8_t hexNumber)
{
    23a2:	cf 93       	push	r28
    23a4:	c8 2f       	mov	r28, r24
    uint8_t tmp;

    tmp = hexNumber >> 4;
    23a6:	82 95       	swap	r24
    23a8:	8f 70       	andi	r24, 0x0F	; 15
    if(tmp > 9) tmp = (tmp - 9) | 0x40;
    23aa:	8a 30       	cpi	r24, 0x0A	; 10
    23ac:	18 f0       	brcs	.+6      	; 0x23b4 <uart_send_hex+0x12>
    23ae:	89 50       	subi	r24, 0x09	; 9
    23b0:	80 64       	ori	r24, 0x40	; 64
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <uart_send_hex+0x14>
    else tmp |= 0x30;
    23b4:	80 63       	ori	r24, 0x30	; 48
    uart_send_byte(tmp);
    23b6:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
    hexNumber &= 0x0F;
    23ba:	8c 2f       	mov	r24, r28
    23bc:	8f 70       	andi	r24, 0x0F	; 15
    if(hexNumber > 9) hexNumber = (hexNumber - 9) | 0x40;
    23be:	8a 30       	cpi	r24, 0x0A	; 10
    23c0:	18 f0       	brcs	.+6      	; 0x23c8 <uart_send_hex+0x26>
    23c2:	89 50       	subi	r24, 0x09	; 9
    23c4:	80 64       	ori	r24, 0x40	; 64
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <uart_send_hex+0x28>
    else hexNumber |= 0x30;
    23c8:	80 63       	ori	r24, 0x30	; 48
    uart_send_byte(hexNumber);
}
    23ca:	cf 91       	pop	r28
    else tmp |= 0x30;
    uart_send_byte(tmp);
    hexNumber &= 0x0F;
    if(hexNumber > 9) hexNumber = (hexNumber - 9) | 0x40;
    else hexNumber |= 0x30;
    uart_send_byte(hexNumber);
    23cc:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <uart_send_byte>

000023d0 <__vector_24>:
    //Leave With TWEA On For Slave Receiving
    TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT) | (1 << TWEA) | (1 << TWSTO);
}

SIGNAL(TWI_vect)
{
    23d0:	1f 92       	push	r1
    23d2:	0f 92       	push	r0
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	0f 92       	push	r0
    23d8:	11 24       	eor	r1, r1
    23da:	2f 93       	push	r18
    23dc:	3f 93       	push	r19
    23de:	4f 93       	push	r20
    23e0:	5f 93       	push	r21
    23e2:	6f 93       	push	r22
    23e4:	7f 93       	push	r23
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	ef 93       	push	r30
    23f0:	ff 93       	push	r31
    uint8_t status = TWSR & TWSR_STATUS_MASK;   //Read Status Bits
    23f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    switch(status) {
    23f6:	88 7f       	andi	r24, 0xF8	; 248
    23f8:	88 32       	cpi	r24, 0x28	; 40
    23fa:	a9 f1       	breq	.+106    	; 0x2466 <__vector_24+0x96>
    23fc:	78 f4       	brcc	.+30     	; 0x241c <__vector_24+0x4c>
    23fe:	80 31       	cpi	r24, 0x10	; 16
    2400:	71 f1       	breq	.+92     	; 0x245e <__vector_24+0x8e>
    2402:	30 f4       	brcc	.+12     	; 0x2410 <__vector_24+0x40>
    2404:	88 30       	cpi	r24, 0x08	; 8
    2406:	09 f0       	breq	.+2      	; 0x240a <__vector_24+0x3a>
    2408:	a2 c0       	rjmp	.+324    	; 0x254e <__vector_24+0x17e>
        // Master General
        case TW_START:  //0x08: Sent Start Condition
            twi_send_byte(twi_descriptor.dev_addr);  //Send Device Address
    240a:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_descriptor>
    240e:	43 c0       	rjmp	.+134    	; 0x2496 <__vector_24+0xc6>
}

SIGNAL(TWI_vect)
{
    uint8_t status = TWSR & TWSR_STATUS_MASK;   //Read Status Bits
    switch(status) {
    2410:	88 31       	cpi	r24, 0x18	; 24
    2412:	49 f1       	breq	.+82     	; 0x2466 <__vector_24+0x96>
    2414:	80 32       	cpi	r24, 0x20	; 32
    2416:	09 f4       	brne	.+2      	; 0x241a <__vector_24+0x4a>
    2418:	8b c0       	rjmp	.+278    	; 0x2530 <__vector_24+0x160>
    241a:	99 c0       	rjmp	.+306    	; 0x254e <__vector_24+0x17e>
    241c:	88 34       	cpi	r24, 0x48	; 72
    241e:	09 f4       	brne	.+2      	; 0x2422 <__vector_24+0x52>
    2420:	87 c0       	rjmp	.+270    	; 0x2530 <__vector_24+0x160>
    2422:	38 f4       	brcc	.+14     	; 0x2432 <__vector_24+0x62>
    2424:	80 33       	cpi	r24, 0x30	; 48
    2426:	09 f4       	brne	.+2      	; 0x242a <__vector_24+0x5a>
    2428:	83 c0       	rjmp	.+262    	; 0x2530 <__vector_24+0x160>
    242a:	80 34       	cpi	r24, 0x40	; 64
    242c:	09 f4       	brne	.+2      	; 0x2430 <__vector_24+0x60>
    242e:	89 c0       	rjmp	.+274    	; 0x2542 <__vector_24+0x172>
    2430:	8e c0       	rjmp	.+284    	; 0x254e <__vector_24+0x17e>
    2432:	80 35       	cpi	r24, 0x50	; 80
    2434:	09 f4       	brne	.+2      	; 0x2438 <__vector_24+0x68>
    2436:	4c c0       	rjmp	.+152    	; 0x24d0 <__vector_24+0x100>
    2438:	88 35       	cpi	r24, 0x58	; 88
    243a:	09 f0       	breq	.+2      	; 0x243e <__vector_24+0x6e>
    243c:	88 c0       	rjmp	.+272    	; 0x254e <__vector_24+0x17e>
            {
                TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT);   //Data Byte Will Be Received, Reply With NACK (Final Byte In Transfer)
            }
            break;
        case TW_MR_DATA_NACK:   //0x58: Data Received, NACK Reply Issued
            twi_descriptor.rx_buf[twi_descriptor.index++] = TWDR;   //Store Final Received Data Byte
    243e:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <twi_descriptor+0x5>
    2442:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <twi_descriptor+0x6>
    2446:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twi_descriptor+0x7>
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	98 0f       	add	r25, r24
    244e:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <twi_descriptor+0x7>
    2452:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    2456:	e8 0f       	add	r30, r24
    2458:	f1 1d       	adc	r31, r1
    245a:	90 83       	st	Z, r25
    245c:	57 c0       	rjmp	.+174    	; 0x250c <__vector_24+0x13c>
        // Master General
        case TW_START:  //0x08: Sent Start Condition
            twi_send_byte(twi_descriptor.dev_addr);  //Send Device Address
            break;
        case TW_REP_START:  //0x10: Sent Repeated Start Condition
            twi_send_byte(twi_descriptor.dev_addr | 1);   //Send Device Address
    245e:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_descriptor>
    2462:	81 60       	ori	r24, 0x01	; 1
    2464:	18 c0       	rjmp	.+48     	; 0x2496 <__vector_24+0xc6>
            break;
        // Master Transmitter & Receiver status codes
        case TW_MT_SLA_ACK: //0x18: Slave Address Acknowledged
        case TW_MT_DATA_ACK:    //0x28: Data Acknowledged
            if(twi_descriptor.state == TWI_MASTER_TX)
    2466:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_descriptor+0x8>
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	09 f0       	breq	.+2      	; 0x2470 <__vector_24+0xa0>
    246e:	6f c0       	rjmp	.+222    	; 0x254e <__vector_24+0x17e>
            {
                if(twi_descriptor.index < twi_descriptor.tx_len)
    2470:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <twi_descriptor+0x7>
    2474:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <twi_descriptor+0x1>
    2478:	98 17       	cp	r25, r24
    247a:	80 f4       	brcc	.+32     	; 0x249c <__vector_24+0xcc>
                {
                    twi_send_byte(twi_descriptor.tx_buf[twi_descriptor.index++]);
    247c:	e0 91 0e 05 	lds	r30, 0x050E	; 0x80050e <twi_descriptor+0x3>
    2480:	f0 91 0f 05 	lds	r31, 0x050F	; 0x80050f <twi_descriptor+0x4>
    2484:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twi_descriptor+0x7>
    2488:	91 e0       	ldi	r25, 0x01	; 1
    248a:	98 0f       	add	r25, r24
    248c:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <twi_descriptor+0x7>
    2490:	e8 0f       	add	r30, r24
    2492:	f1 1d       	adc	r31, r1
    2494:	80 81       	ld	r24, Z

static volatile twi_descriptor_t twi_descriptor;

inline void twi_send_byte(uint8_t data)
{
    TWDR = data;    //Save Data To The TWDR
    2496:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    249a:	33 c0       	rjmp	.+102    	; 0x2502 <__vector_24+0x132>
            {
                if(twi_descriptor.index < twi_descriptor.tx_len)
                {
                    twi_send_byte(twi_descriptor.tx_buf[twi_descriptor.index++]);
                }
                else if(twi_descriptor.rx_len > 0)
    249c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twi_descriptor+0x2>
    24a0:	88 23       	and	r24, r24
    24a2:	a1 f1       	breq	.+104    	; 0x250c <__vector_24+0x13c>
    TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT);   //Begin Send
}

inline void twi_send_start(void)
{
    TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT) | (1 << TWSTA);    //send start condition
    24a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    24a8:	8f 70       	andi	r24, 0x0F	; 15
    24aa:	80 6a       	ori	r24, 0xA0	; 160
    24ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    twi_send_byte(twi_descriptor.tx_buf[twi_descriptor.index++]);
                }
                else if(twi_descriptor.rx_len > 0)
                {
                    twi_send_start();
                    twi_descriptor.index = 0;
    24b0:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <twi_descriptor+0x7>
                    if (twi_descriptor.rx_len == 1)
    24b4:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <twi_descriptor+0x2>
    24b8:	81 30       	cpi	r24, 0x01	; 1
    24ba:	31 f4       	brne	.+12     	; 0x24c8 <__vector_24+0xf8>
                    {
                        TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT);   //Data Byte Will Be Received, Reply With NACK (Final Byte In Transfer)
    24bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    24c0:	8f 70       	andi	r24, 0x0F	; 15
    24c2:	80 68       	ori	r24, 0x80	; 128
    24c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
                    }
                    twi_descriptor.state = TWI_MASTER_RX;
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <twi_descriptor+0x8>
    24ce:	3f c0       	rjmp	.+126    	; 0x254e <__vector_24+0x17e>
                    twi_descriptor.state = TWI_IDLE;
                }
            }
            break;
        case TW_MR_DATA_ACK:    //0x50: Data Received, ACK Reply Issued
            twi_descriptor.rx_buf[twi_descriptor.index++] = TWDR;
    24d0:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <twi_descriptor+0x5>
    24d4:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <twi_descriptor+0x6>
    24d8:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twi_descriptor+0x7>
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	98 0f       	add	r25, r24
    24e0:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <twi_descriptor+0x7>
    24e4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    24e8:	e8 0f       	add	r30, r24
    24ea:	f1 1d       	adc	r31, r1
    24ec:	90 83       	st	Z, r25
            if(twi_descriptor.index + 1 < twi_descriptor.rx_len)
    24ee:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <twi_descriptor+0x7>
    24f2:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <twi_descriptor+0x2>
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	01 96       	adiw	r24, 0x01	; 1
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	82 17       	cp	r24, r18
    24fe:	93 07       	cpc	r25, r19
    2500:	04 f1       	brlt	.+64     	; 0x2542 <__vector_24+0x172>
            {
                TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT) | (1 << TWEA); //Data Byte Will Be Received, Reply With ACK
            }
            else
            {
                TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT);   //Data Byte Will Be Received, Reply With NACK (Final Byte In Transfer)
    2502:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2506:	8f 70       	andi	r24, 0x0F	; 15
    2508:	80 68       	ori	r24, 0x80	; 128
    250a:	1f c0       	rjmp	.+62     	; 0x254a <__vector_24+0x17a>

inline void twi_send_stop(void)
{
    //Transmit Stop Condition
    //Leave With TWEA On For Slave Receiving
    TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT) | (1 << TWEA) | (1 << TWSTO);
    250c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2510:	8f 70       	andi	r24, 0x0F	; 15
    2512:	80 6d       	ori	r24, 0xD0	; 208
    2514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            }
            break;
        case TW_MR_DATA_NACK:   //0x58: Data Received, NACK Reply Issued
            twi_descriptor.rx_buf[twi_descriptor.index++] = TWDR;   //Store Final Received Data Byte
            twi_send_stop();
            if (twi_descriptor.callback)
    2518:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <twi_descriptor+0x9>
    251c:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <twi_descriptor+0xa>
    2520:	89 2b       	or	r24, r25
    2522:	61 f0       	breq	.+24     	; 0x253c <__vector_24+0x16c>
            {
                twi_descriptor.callback();
    2524:	e0 91 14 05 	lds	r30, 0x0514	; 0x800514 <twi_descriptor+0x9>
    2528:	f0 91 15 05 	lds	r31, 0x0515	; 0x800515 <twi_descriptor+0xa>
    252c:	09 95       	icall
    252e:	06 c0       	rjmp	.+12     	; 0x253c <__vector_24+0x16c>

inline void twi_send_stop(void)
{
    //Transmit Stop Condition
    //Leave With TWEA On For Slave Receiving
    TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT) | (1 << TWEA) | (1 << TWSTO);
    2530:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2534:	8f 70       	andi	r24, 0x0F	; 15
    2536:	80 6d       	ori	r24, 0xD0	; 208
    2538:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
        case TW_MR_SLA_NACK:    //0x48: Slave Address Not Acknowledged
        case TW_MT_SLA_NACK:    //0x20: Slave Address Not Acknowledged
        case TW_MT_DATA_NACK:   //0x30: Data Not Acknowledged
            twi_send_stop();  //Transmit Stop Condition, Enable SLA ACK
            twi_descriptor.state = TWI_IDLE;    //Set State
    253c:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <twi_descriptor+0x8>
            break;
    2540:	06 c0       	rjmp	.+12     	; 0x254e <__vector_24+0x17e>
        case TW_MR_SLA_ACK: //0x40: Slave Address Acknowledged
            TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT) | (1 << TWEA); //Data Byte Will Be Received, Reply With ACK
    2542:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2546:	8f 70       	andi	r24, 0x0F	; 15
    2548:	80 6c       	ori	r24, 0xC0	; 192
    254a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    }
}
    254e:	ff 91       	pop	r31
    2550:	ef 91       	pop	r30
    2552:	bf 91       	pop	r27
    2554:	af 91       	pop	r26
    2556:	9f 91       	pop	r25
    2558:	8f 91       	pop	r24
    255a:	7f 91       	pop	r23
    255c:	6f 91       	pop	r22
    255e:	5f 91       	pop	r21
    2560:	4f 91       	pop	r20
    2562:	3f 91       	pop	r19
    2564:	2f 91       	pop	r18
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	0f 90       	pop	r0
    256c:	1f 90       	pop	r1
    256e:	18 95       	reti

00002570 <twi_init>:

void twi_init(void)
{
    uint8_t bitrate_div;

    PORTC |= (1<<PC4) | (1<<PC5);   //Set Pull-up Resistors On TWI Bus Pins (SCL, SDA)
    2570:	88 b1       	in	r24, 0x08	; 8
    2572:	80 63       	ori	r24, 0x30	; 48
    2574:	88 b9       	out	0x08, r24	; 8

    //Set TWI Bitrate
    //SCL freq = F_CPU/(16+2*TWBR))
    //For Processors With Additional Bitrate Division (mega128)
    //SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
    TWSR &= ~((1 << TWPS0) | (1 << TWPS1) );    //Set TWPS To Zero
    2576:	e9 eb       	ldi	r30, 0xB9	; 185
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8c 7f       	andi	r24, 0xFC	; 252
    257e:	80 83       	st	Z, r24
    bitrate_div = ((F_CPU / 1000l) / 400);  //Set twi Bit Rate To 100KHz
    if(bitrate_div >= 16)
        bitrate_div = (bitrate_div - 16) / 2;
    TWBR = bitrate_div;
    2580:	8c e0       	ldi	r24, 0x0C	; 12
    2582:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWCR |= (1 << TWIE) | (1 << TWEA) | (1 << TWEN); //Enable TWI Interrupt, Slave Address ACK, TWI
    2586:	ec eb       	ldi	r30, 0xBC	; 188
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	85 64       	ori	r24, 0x45	; 69
    258e:	80 83       	st	Z, r24
    2590:	08 95       	ret

00002592 <twi_master_transfer>:
}

uint8_t twi_master_transfer(uint8_t dev_addr, uint8_t *tx_buf, uint8_t *rx_buf, uint8_t tx_len, uint8_t rx_len, twi_cb callback)
{
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	98 2f       	mov	r25, r24
    if (twi_descriptor.state != TWI_IDLE)
    259a:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <twi_descriptor+0x8>
    259e:	81 11       	cpse	r24, r1
    25a0:	25 c0       	rjmp	.+74     	; 0x25ec <twi_master_transfer+0x5a>
    {
        return -1;
    }
    twi_descriptor.tx_buf = tx_buf;
    25a2:	70 93 0f 05 	sts	0x050F, r23	; 0x80050f <twi_descriptor+0x4>
    25a6:	60 93 0e 05 	sts	0x050E, r22	; 0x80050e <twi_descriptor+0x3>
    twi_descriptor.rx_buf = rx_buf;
    25aa:	50 93 11 05 	sts	0x0511, r21	; 0x800511 <twi_descriptor+0x6>
    25ae:	40 93 10 05 	sts	0x0510, r20	; 0x800510 <twi_descriptor+0x5>
    twi_descriptor.tx_len = tx_len;
    25b2:	20 93 0c 05 	sts	0x050C, r18	; 0x80050c <twi_descriptor+0x1>
    twi_descriptor.rx_len = rx_len;
    25b6:	00 93 0d 05 	sts	0x050D, r16	; 0x80050d <twi_descriptor+0x2>
    twi_descriptor.index = 0;
    25ba:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <twi_descriptor+0x7>
    twi_descriptor.callback = callback;
    25be:	f0 92 15 05 	sts	0x0515, r15	; 0x800515 <twi_descriptor+0xa>
    25c2:	e0 92 14 05 	sts	0x0514, r14	; 0x800514 <twi_descriptor+0x9>
    if (tx_len > 0)
    25c6:	22 23       	and	r18, r18
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <twi_master_transfer+0x40>
    {
        twi_descriptor.state = TWI_MASTER_TX;
    25ca:	21 e0       	ldi	r18, 0x01	; 1
    25cc:	20 93 13 05 	sts	0x0513, r18	; 0x800513 <twi_descriptor+0x8>
    25d0:	04 c0       	rjmp	.+8      	; 0x25da <twi_master_transfer+0x48>
    }
    else
    {
        twi_descriptor.state = TWI_MASTER_RX;
    25d2:	22 e0       	ldi	r18, 0x02	; 2
    25d4:	20 93 13 05 	sts	0x0513, r18	; 0x800513 <twi_descriptor+0x8>
        dev_addr |= 1;
    25d8:	91 60       	ori	r25, 0x01	; 1
    }
    twi_descriptor.dev_addr = dev_addr;
    25da:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <twi_descriptor>
    TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT);   //Begin Send
}

inline void twi_send_start(void)
{
    TWCR = (TWCR & TWCR_CMD_MASK) | (1 << TWINT) | (1 << TWSTA);    //send start condition
    25de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    25e2:	9f 70       	andi	r25, 0x0F	; 15
    25e4:	90 6a       	ori	r25, 0xA0	; 160
    25e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        twi_descriptor.state = TWI_MASTER_RX;
        dev_addr |= 1;
    }
    twi_descriptor.dev_addr = dev_addr;
    twi_send_start();
    return 0;
    25ea:	01 c0       	rjmp	.+2      	; 0x25ee <twi_master_transfer+0x5c>

uint8_t twi_master_transfer(uint8_t dev_addr, uint8_t *tx_buf, uint8_t *rx_buf, uint8_t tx_len, uint8_t rx_len, twi_cb callback)
{
    if (twi_descriptor.state != TWI_IDLE)
    {
        return -1;
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
        dev_addr |= 1;
    }
    twi_descriptor.dev_addr = dev_addr;
    twi_send_start();
    return 0;
}
    25ee:	0f 91       	pop	r16
    25f0:	ff 90       	pop	r15
    25f2:	ef 90       	pop	r14
    25f4:	08 95       	ret

000025f6 <twi_ready>:

uint8_t twi_ready(void)
{
    return twi_descriptor.state == TWI_IDLE;
    25f6:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <twi_descriptor+0x8>
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	91 11       	cpse	r25, r1
    25fe:	80 e0       	ldi	r24, 0x00	; 0
}
    2600:	08 95       	ret

00002602 <spi_master_init>:
static volatile spi_descriptor_t spi_descriptor;

void spi_master_init(void)
{
    /* Set MOSI and SCK output, all others input */
    DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2);
    2602:	84 b1       	in	r24, 0x04	; 4
    2604:	8c 62       	ori	r24, 0x2C	; 44
    2606:	84 b9       	out	0x04, r24	; 4
    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR0);
    2608:	81 ed       	ldi	r24, 0xD1	; 209
    260a:	8c bd       	out	0x2c, r24	; 44
    260c:	08 95       	ret

0000260e <__vector_17>:
}

SIGNAL(SPI_STC_vect)
{
    260e:	1f 92       	push	r1
    2610:	0f 92       	push	r0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	0f 92       	push	r0
    2616:	11 24       	eor	r1, r1
    2618:	2f 93       	push	r18
    261a:	3f 93       	push	r19
    261c:	4f 93       	push	r20
    261e:	5f 93       	push	r21
    2620:	6f 93       	push	r22
    2622:	7f 93       	push	r23
    2624:	8f 93       	push	r24
    2626:	9f 93       	push	r25
    2628:	af 93       	push	r26
    262a:	bf 93       	push	r27
    262c:	ef 93       	push	r30
    262e:	ff 93       	push	r31
    if (spi_descriptor.rx_buf)
    2630:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <spi_descriptor+0x3>
    2634:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <spi_descriptor+0x4>
    2638:	89 2b       	or	r24, r25
    263a:	61 f0       	breq	.+24     	; 0x2654 <__vector_17+0x46>
    {
        *spi_descriptor.rx_buf++ = SPDR;
    263c:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <spi_descriptor+0x3>
    2640:	f0 91 1a 05 	lds	r31, 0x051A	; 0x80051a <spi_descriptor+0x4>
    2644:	cf 01       	movw	r24, r30
    2646:	01 96       	adiw	r24, 0x01	; 1
    2648:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <spi_descriptor+0x4>
    264c:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <spi_descriptor+0x3>
    2650:	8e b5       	in	r24, 0x2e	; 46
    2652:	80 83       	st	Z, r24
    }
    if (--spi_descriptor.len)
    2654:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <spi_descriptor>
    2658:	81 50       	subi	r24, 0x01	; 1
    265a:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <spi_descriptor>
    265e:	88 23       	and	r24, r24
    2660:	69 f0       	breq	.+26     	; 0x267c <__vector_17+0x6e>
    {
        SPDR = *spi_descriptor.tx_buf++;
    2662:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <spi_descriptor+0x1>
    2666:	f0 91 18 05 	lds	r31, 0x0518	; 0x800518 <spi_descriptor+0x2>
    266a:	cf 01       	movw	r24, r30
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <spi_descriptor+0x2>
    2672:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <spi_descriptor+0x1>
    2676:	80 81       	ld	r24, Z
    2678:	8e bd       	out	0x2e, r24	; 46
    267a:	0d c0       	rjmp	.+26     	; 0x2696 <__vector_17+0x88>
    }
    else
    {
        if (spi_descriptor.callback)
    267c:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <spi_descriptor+0x6>
    2680:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <spi_descriptor+0x7>
    2684:	89 2b       	or	r24, r25
    2686:	29 f0       	breq	.+10     	; 0x2692 <__vector_17+0x84>
        {
            spi_descriptor.callback();
    2688:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <spi_descriptor+0x6>
    268c:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <spi_descriptor+0x7>
    2690:	09 95       	icall
        }
        spi_descriptor.state = SPI_IDLE;
    2692:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <spi_descriptor+0x5>
    }
}
    2696:	ff 91       	pop	r31
    2698:	ef 91       	pop	r30
    269a:	bf 91       	pop	r27
    269c:	af 91       	pop	r26
    269e:	9f 91       	pop	r25
    26a0:	8f 91       	pop	r24
    26a2:	7f 91       	pop	r23
    26a4:	6f 91       	pop	r22
    26a6:	5f 91       	pop	r21
    26a8:	4f 91       	pop	r20
    26aa:	3f 91       	pop	r19
    26ac:	2f 91       	pop	r18
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	0f 90       	pop	r0
    26b4:	1f 90       	pop	r1
    26b6:	18 95       	reti

000026b8 <spi_master_transfer>:

uint8_t spi_master_transfer(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len, spi_cb callback)
{
    26b8:	fc 01       	movw	r30, r24
    if (spi_descriptor.state != SPI_IDLE)
    26ba:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <spi_descriptor+0x5>
    26be:	81 11       	cpse	r24, r1
    26c0:	16 c0       	rjmp	.+44     	; 0x26ee <spi_master_transfer+0x36>
    {
        return -1;
    }
    spi_descriptor.tx_buf = tx_buf + 1;
    26c2:	df 01       	movw	r26, r30
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	b0 93 18 05 	sts	0x0518, r27	; 0x800518 <spi_descriptor+0x2>
    26ca:	a0 93 17 05 	sts	0x0517, r26	; 0x800517 <spi_descriptor+0x1>
    spi_descriptor.rx_buf = rx_buf;
    26ce:	70 93 1a 05 	sts	0x051A, r23	; 0x80051a <spi_descriptor+0x4>
    26d2:	60 93 19 05 	sts	0x0519, r22	; 0x800519 <spi_descriptor+0x3>
    spi_descriptor.len = len;
    26d6:	40 93 16 05 	sts	0x0516, r20	; 0x800516 <spi_descriptor>
    spi_descriptor.callback = callback;
    26da:	30 93 1d 05 	sts	0x051D, r19	; 0x80051d <spi_descriptor+0x7>
    26de:	20 93 1c 05 	sts	0x051C, r18	; 0x80051c <spi_descriptor+0x6>
    spi_descriptor.state = SPI_MASTER_TX;
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <spi_descriptor+0x5>
    SPDR = *tx_buf;
    26e8:	90 81       	ld	r25, Z
    26ea:	9e bd       	out	0x2e, r25	; 46
    return 0;
    26ec:	08 95       	ret

uint8_t spi_master_transfer(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len, spi_cb callback)
{
    if (spi_descriptor.state != SPI_IDLE)
    {
        return -1;
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    spi_descriptor.len = len;
    spi_descriptor.callback = callback;
    spi_descriptor.state = SPI_MASTER_TX;
    SPDR = *tx_buf;
    return 0;
}
    26f0:	08 95       	ret

000026f2 <spi_master_transfer_blocking>:

void spi_master_transfer_blocking(uint8_t *tx_buf, uint8_t *rx_buf, uint8_t len)
{
    while (spi_descriptor.state != SPI_IDLE);
    26f2:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <spi_descriptor+0x5>
    26f6:	21 11       	cpse	r18, r1
    26f8:	fc cf       	rjmp	.-8      	; 0x26f2 <spi_master_transfer_blocking>
    spi_descriptor.tx_buf = tx_buf + 1;
    26fa:	9c 01       	movw	r18, r24
    26fc:	2f 5f       	subi	r18, 0xFF	; 255
    26fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2700:	30 93 18 05 	sts	0x0518, r19	; 0x800518 <spi_descriptor+0x2>
    2704:	20 93 17 05 	sts	0x0517, r18	; 0x800517 <spi_descriptor+0x1>
    spi_descriptor.rx_buf = rx_buf;
    2708:	70 93 1a 05 	sts	0x051A, r23	; 0x80051a <spi_descriptor+0x4>
    270c:	60 93 19 05 	sts	0x0519, r22	; 0x800519 <spi_descriptor+0x3>
    spi_descriptor.len = len;
    2710:	40 93 16 05 	sts	0x0516, r20	; 0x800516 <spi_descriptor>
    spi_descriptor.callback = 0;
    2714:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <spi_descriptor+0x7>
    2718:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <spi_descriptor+0x6>
    spi_descriptor.state = SPI_MASTER_TX;
    271c:	21 e0       	ldi	r18, 0x01	; 1
    271e:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <spi_descriptor+0x5>
    SPDR = *tx_buf;
    2722:	fc 01       	movw	r30, r24
    2724:	80 81       	ld	r24, Z
    2726:	8e bd       	out	0x2e, r24	; 46
    while (spi_descriptor.state != SPI_IDLE);
    2728:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <spi_descriptor+0x5>
    272c:	81 11       	cpse	r24, r1
    272e:	fc cf       	rjmp	.-8      	; 0x2728 <spi_master_transfer_blocking+0x36>
}
    2730:	08 95       	ret

00002732 <spi_ready>:

uint8_t spi_ready(void)
{
    return spi_descriptor.state == SPI_IDLE;
    2732:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <spi_descriptor+0x5>
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	91 11       	cpse	r25, r1
    273a:	80 e0       	ldi	r24, 0x00	; 0
}
    273c:	08 95       	ret

0000273e <_goto_next_field>:
    _calculate_dow();
}

static uint8_t _goto_next_field(uint8_t **buf)
{
    while (*buf < _buf + _index)
    273e:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <_index>
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	2f 5d       	subi	r18, 0xDF	; 223
    2746:	3a 4f       	sbci	r19, 0xFA	; 250
    2748:	dc 01       	movw	r26, r24
    274a:	ed 91       	ld	r30, X+
    274c:	fc 91       	ld	r31, X
    274e:	e2 17       	cp	r30, r18
    2750:	f3 07       	cpc	r31, r19
    2752:	58 f4       	brcc	.+22     	; 0x276a <_goto_next_field+0x2c>
    {
        (*buf)++;
    2754:	af 01       	movw	r20, r30
    2756:	4f 5f       	subi	r20, 0xFF	; 255
    2758:	5f 4f       	sbci	r21, 0xFF	; 255
    275a:	dc 01       	movw	r26, r24
    275c:	4d 93       	st	X+, r20
    275e:	5c 93       	st	X, r21
        if (**buf == ',')
    2760:	41 81       	ldd	r20, Z+1	; 0x01
    2762:	4c 32       	cpi	r20, 0x2C	; 44
    2764:	89 f7       	brne	.-30     	; 0x2748 <_goto_next_field+0xa>
        {
            return 0;
    2766:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return 1;
}
    2768:	08 95       	ret
        if (**buf == ',')
        {
            return 0;
        }
    }
    return 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	08 95       	ret

0000276e <neo7m_init>:
    }
}

void neo7m_init(time_cb cb)
{
    _time_cb = cb;
    276e:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <_time_cb+0x1>
    2772:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <_time_cb>
    uart_init();
    2776:	0c 94 28 11 	jmp	0x2250	; 0x2250 <uart_init>

0000277a <neo7m_handler>:
}

void neo7m_handler(void)
{
    277a:	2f 92       	push	r2
    277c:	3f 92       	push	r3
    277e:	4f 92       	push	r4
    2780:	5f 92       	push	r5
    2782:	6f 92       	push	r6
    2784:	8f 92       	push	r8
    2786:	9f 92       	push	r9
    2788:	af 92       	push	r10
    278a:	bf 92       	push	r11
    278c:	cf 92       	push	r12
    278e:	df 92       	push	r13
    2790:	ef 92       	push	r14
    2792:	ff 92       	push	r15
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	00 d0       	rcall	.+0      	; 0x279c <neo7m_handler+0x22>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
        uart_send_byte('0' + date_bcd_l);
        uart_send_byte('.');
        uart_send_byte('0' + month_bcd_h);
        uart_send_byte('0' + month_bcd_l);
        uart_send_byte('.');
        uart_send_byte('0' + year / 10);
    27a0:	6a e0       	ldi	r22, 0x0A	; 10
    27a2:	66 2e       	mov	r6, r22
{
    int16_t _year = year + 2000;
    int8_t _month = month_bcd_h * 10 + month_bcd_l;
    int8_t _date = date_bcd_h * 10 + date_bcd_l;

    int8_t a = _month < 3 ? 1 : 0;
    27a4:	22 24       	eor	r2, r2
    27a6:	23 94       	inc	r2
    int16_t y = _year - a;
    int8_t m = _month + 12 * a - 2;
    27a8:	7c e0       	ldi	r23, 0x0C	; 12
    27aa:	37 2e       	mov	r3, r23
    dow = (7000 + (_date + y + y / 4 - y / 100 + y / 400 + (31 * m) / 12)) % 7 + 1;
    27ac:	ec e9       	ldi	r30, 0x9C	; 156
    27ae:	ee 2e       	mov	r14, r30
    27b0:	ff 24       	eor	r15, r15
    27b2:	fa 94       	dec	r15
    27b4:	f0 e9       	ldi	r31, 0x90	; 144
    27b6:	cf 2e       	mov	r12, r31
    27b8:	dd 24       	eor	r13, r13
    27ba:	d3 94       	inc	r13
    27bc:	ac e0       	ldi	r26, 0x0C	; 12
    27be:	aa 2e       	mov	r10, r26
    27c0:	b1 2c       	mov	r11, r1
    27c2:	b7 e0       	ldi	r27, 0x07	; 7
    27c4:	8b 2e       	mov	r8, r27
    27c6:	91 2c       	mov	r9, r1

static inline void _correct_february_day_number(void)
{
    if (year & 3 || year == 0)
    {
        days_in_month[2] = 0x29;
    27c8:	19 e2       	ldi	r17, 0x29	; 41
    27ca:	41 2e       	mov	r4, r17
    }
    else
    {
        days_in_month[2] = 0x30;
    27cc:	80 e3       	ldi	r24, 0x30	; 48
    27ce:	58 2e       	mov	r5, r24
    uart_init();
}

void neo7m_handler(void)
{
    while (uart_check_receiver())
    27d0:	0e 94 58 11 	call	0x22b0	; 0x22b0 <uart_check_receiver>
    27d4:	88 23       	and	r24, r24
    27d6:	09 f4       	brne	.+2      	; 0x27da <neo7m_handler+0x60>
    27d8:	05 c2       	rjmp	.+1034   	; 0x2be4 <neo7m_handler+0x46a>
    {
        uint8_t tmp = uart_get_byte();
    27da:	0e 94 6f 11 	call	0x22de	; 0x22de <uart_get_byte>
        // uart_send_byte(tmp);
        // uart_send_hex(tmp);
        if (tmp == START_CODE)
    27de:	84 32       	cpi	r24, 0x24	; 36
    27e0:	19 f4       	brne	.+6      	; 0x27e8 <neo7m_handler+0x6e>
        {
            _index = 0;
    27e2:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_index>
    27e6:	f4 cf       	rjmp	.-24     	; 0x27d0 <neo7m_handler+0x56>
        }
        else if (_index < PACKET_MAX_LEN)
    27e8:	e0 91 20 05 	lds	r30, 0x0520	; 0x800520 <_index>
    27ec:	e0 34       	cpi	r30, 0x40	; 64
    27ee:	80 f7       	brcc	.-32     	; 0x27d0 <neo7m_handler+0x56>
        {
            if (tmp == END_CODE)
    27f0:	8a 32       	cpi	r24, 0x2A	; 42
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <neo7m_handler+0x7c>
    27f4:	ee c1       	rjmp	.+988    	; 0x2bd2 <neo7m_handler+0x458>
            {
                if (_index > PACKET_MIN_LEN)
    27f6:	e9 31       	cpi	r30, 0x19	; 25
    27f8:	58 f3       	brcs	.-42     	; 0x27d0 <neo7m_handler+0x56>
}

// $GPRMC,124123.00,V,,,,,,,160521,,,N*7B
static void _packet_parser(void)
{
    if (_buf[2] == 'R' &&
    27fa:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <_buf+0x2>
    27fe:	82 35       	cpi	r24, 0x52	; 82
    2800:	39 f7       	brne	.-50     	; 0x27d0 <neo7m_handler+0x56>
    2802:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <_buf+0x3>
    2806:	8d 34       	cpi	r24, 0x4D	; 77
    2808:	19 f7       	brne	.-58     	; 0x27d0 <neo7m_handler+0x56>
        _buf[3] == 'M' &&
    280a:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <_buf+0x4>
    280e:	83 34       	cpi	r24, 0x43	; 67
    2810:	f9 f6       	brne	.-66     	; 0x27d0 <neo7m_handler+0x56>
        _buf[4] == 'C')
    {
        uint8_t *_tmp_buf = _buf;
    2812:	21 e2       	ldi	r18, 0x21	; 33
    2814:	35 e0       	ldi	r19, 0x05	; 5
    2816:	3a 83       	std	Y+2, r19	; 0x02
    2818:	29 83       	std	Y+1, r18	; 0x01
        if (_goto_next_field(&_tmp_buf))
    281a:	ce 01       	movw	r24, r28
    281c:	01 96       	adiw	r24, 0x01	; 1
    281e:	0e 94 9f 13 	call	0x273e	; 0x273e <_goto_next_field>
    2822:	81 11       	cpse	r24, r1
    2824:	d5 cf       	rjmp	.-86     	; 0x27d0 <neo7m_handler+0x56>
    return 1;
}

inline uint8_t _read_bcd(uint8_t **buf)
{
    (*buf)++;
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	cf 01       	movw	r24, r30
    282c:	01 96       	adiw	r24, 0x01	; 1
    282e:	9a 83       	std	Y+2, r25	; 0x02
    2830:	89 83       	std	Y+1, r24	; 0x01
        uint8_t *_tmp_buf = _buf;
        if (_goto_next_field(&_tmp_buf))
        {
            return;
        }
        hour_bcd_h = _read_bcd(&_tmp_buf);
    2832:	81 81       	ldd	r24, Z+1	; 0x01
    2834:	80 53       	subi	r24, 0x30	; 48
    2836:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <hour_bcd_h>
        hour_bcd_l = _read_bcd(&_tmp_buf);
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	80 53       	subi	r24, 0x30	; 48
    283e:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <hour_bcd_l>
        minute_bcd_h = _read_bcd(&_tmp_buf);
    2842:	83 81       	ldd	r24, Z+3	; 0x03
    2844:	80 53       	subi	r24, 0x30	; 48
    2846:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <minute_bcd_h>
        minute_bcd_l = _read_bcd(&_tmp_buf);
    284a:	84 81       	ldd	r24, Z+4	; 0x04
    284c:	80 53       	subi	r24, 0x30	; 48
    284e:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <minute_bcd_l>
        second_bcd_h = _read_bcd(&_tmp_buf);
    2852:	85 81       	ldd	r24, Z+5	; 0x05
    2854:	80 53       	subi	r24, 0x30	; 48
    2856:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <second_bcd_h>
    return 1;
}

inline uint8_t _read_bcd(uint8_t **buf)
{
    (*buf)++;
    285a:	cf 01       	movw	r24, r30
    285c:	06 96       	adiw	r24, 0x06	; 6
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
        hour_bcd_h = _read_bcd(&_tmp_buf);
        hour_bcd_l = _read_bcd(&_tmp_buf);
        minute_bcd_h = _read_bcd(&_tmp_buf);
        minute_bcd_l = _read_bcd(&_tmp_buf);
        second_bcd_h = _read_bcd(&_tmp_buf);
        second_bcd_l = _read_bcd(&_tmp_buf);
    2862:	86 81       	ldd	r24, Z+6	; 0x06
    2864:	80 53       	subi	r24, 0x30	; 48
    2866:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <second_bcd_l>
    286a:	17 e0       	ldi	r17, 0x07	; 7
        for (uint8_t i=0; i<7; i++)
        {
            _goto_next_field(&_tmp_buf);
    286c:	ce 01       	movw	r24, r28
    286e:	01 96       	adiw	r24, 0x01	; 1
    2870:	0e 94 9f 13 	call	0x273e	; 0x273e <_goto_next_field>
    2874:	11 50       	subi	r17, 0x01	; 1
        hour_bcd_l = _read_bcd(&_tmp_buf);
        minute_bcd_h = _read_bcd(&_tmp_buf);
        minute_bcd_l = _read_bcd(&_tmp_buf);
        second_bcd_h = _read_bcd(&_tmp_buf);
        second_bcd_l = _read_bcd(&_tmp_buf);
        for (uint8_t i=0; i<7; i++)
    2876:	d1 f7       	brne	.-12     	; 0x286c <neo7m_handler+0xf2>
        {
            _goto_next_field(&_tmp_buf);
        }
        if (_goto_next_field(&_tmp_buf))
    2878:	ce 01       	movw	r24, r28
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	0e 94 9f 13 	call	0x273e	; 0x273e <_goto_next_field>
    2880:	18 2f       	mov	r17, r24
    2882:	81 11       	cpse	r24, r1
    2884:	a5 cf       	rjmp	.-182    	; 0x27d0 <neo7m_handler+0x56>
    return 1;
}

inline uint8_t _read_bcd(uint8_t **buf)
{
    (*buf)++;
    2886:	e9 81       	ldd	r30, Y+1	; 0x01
    2888:	fa 81       	ldd	r31, Y+2	; 0x02
    288a:	cf 01       	movw	r24, r30
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
    return **buf - '0';
    2892:	61 81       	ldd	r22, Z+1	; 0x01
    2894:	60 53       	subi	r22, 0x30	; 48
        }
        if (_goto_next_field(&_tmp_buf))
        {
            return;
        }
        date_bcd_h = _read_bcd(&_tmp_buf);
    2896:	60 93 a9 05 	sts	0x05A9, r22	; 0x8005a9 <date_bcd_h>
}

inline uint8_t _read_bcd(uint8_t **buf)
{
    (*buf)++;
    return **buf - '0';
    289a:	32 81       	ldd	r19, Z+2	; 0x02
    289c:	30 53       	subi	r19, 0x30	; 48
        if (_goto_next_field(&_tmp_buf))
        {
            return;
        }
        date_bcd_h = _read_bcd(&_tmp_buf);
        date_bcd_l = _read_bcd(&_tmp_buf);
    289e:	30 93 b0 05 	sts	0x05B0, r19	; 0x8005b0 <date_bcd_l>
}

inline uint8_t _read_bcd(uint8_t **buf)
{
    (*buf)++;
    return **buf - '0';
    28a2:	23 81       	ldd	r18, Z+3	; 0x03
    28a4:	20 53       	subi	r18, 0x30	; 48
        {
            return;
        }
        date_bcd_h = _read_bcd(&_tmp_buf);
        date_bcd_l = _read_bcd(&_tmp_buf);
        month_bcd_h = _read_bcd(&_tmp_buf);
    28a6:	20 93 a3 05 	sts	0x05A3, r18	; 0x8005a3 <month_bcd_h>
}

inline uint8_t _read_bcd(uint8_t **buf)
{
    (*buf)++;
    return **buf - '0';
    28aa:	94 81       	ldd	r25, Z+4	; 0x04
    28ac:	90 53       	subi	r25, 0x30	; 48
            return;
        }
        date_bcd_h = _read_bcd(&_tmp_buf);
        date_bcd_l = _read_bcd(&_tmp_buf);
        month_bcd_h = _read_bcd(&_tmp_buf);
        month_bcd_l = _read_bcd(&_tmp_buf);
    28ae:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <month_bcd_l>
        year = _read_bcd(&_tmp_buf) * 10;
    28b2:	75 81       	ldd	r23, Z+5	; 0x05
    28b4:	70 53       	subi	r23, 0x30	; 48
    return 1;
}

inline uint8_t _read_bcd(uint8_t **buf)
{
    (*buf)++;
    28b6:	af 01       	movw	r20, r30
    28b8:	4a 5f       	subi	r20, 0xFA	; 250
    28ba:	5f 4f       	sbci	r21, 0xFF	; 255
    28bc:	5a 83       	std	Y+2, r21	; 0x02
    28be:	49 83       	std	Y+1, r20	; 0x01
        date_bcd_h = _read_bcd(&_tmp_buf);
        date_bcd_l = _read_bcd(&_tmp_buf);
        month_bcd_h = _read_bcd(&_tmp_buf);
        month_bcd_l = _read_bcd(&_tmp_buf);
        year = _read_bcd(&_tmp_buf) * 10;
        year += _read_bcd(&_tmp_buf);
    28c0:	86 81       	ldd	r24, Z+6	; 0x06
    28c2:	80 53       	subi	r24, 0x30	; 48
    28c4:	4a e0       	ldi	r20, 0x0A	; 10
    28c6:	74 9f       	mul	r23, r20
    28c8:	80 0d       	add	r24, r0
    28ca:	11 24       	eor	r1, r1
    28cc:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <year>

        if (hour_bcd_h > 9 || hour_bcd_l > 9 ||
    28d0:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <hour_bcd_h>
    28d4:	8a 30       	cpi	r24, 0x0A	; 10
    28d6:	08 f0       	brcs	.+2      	; 0x28da <neo7m_handler+0x160>
    28d8:	7b cf       	rjmp	.-266    	; 0x27d0 <neo7m_handler+0x56>
    28da:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <hour_bcd_l>
    28de:	8a 30       	cpi	r24, 0x0A	; 10
    28e0:	08 f0       	brcs	.+2      	; 0x28e4 <neo7m_handler+0x16a>
    28e2:	76 cf       	rjmp	.-276    	; 0x27d0 <neo7m_handler+0x56>
    28e4:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <minute_bcd_h>
    28e8:	8a 30       	cpi	r24, 0x0A	; 10
    28ea:	08 f0       	brcs	.+2      	; 0x28ee <neo7m_handler+0x174>
    28ec:	71 cf       	rjmp	.-286    	; 0x27d0 <neo7m_handler+0x56>
            minute_bcd_h > 9 || minute_bcd_l > 9 ||
    28ee:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <minute_bcd_l>
    28f2:	8a 30       	cpi	r24, 0x0A	; 10
    28f4:	08 f0       	brcs	.+2      	; 0x28f8 <neo7m_handler+0x17e>
    28f6:	6c cf       	rjmp	.-296    	; 0x27d0 <neo7m_handler+0x56>
    28f8:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <second_bcd_h>
    28fc:	8a 30       	cpi	r24, 0x0A	; 10
    28fe:	08 f0       	brcs	.+2      	; 0x2902 <neo7m_handler+0x188>
    2900:	67 cf       	rjmp	.-306    	; 0x27d0 <neo7m_handler+0x56>
            second_bcd_h > 9 || second_bcd_l > 9 ||
    2902:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <second_bcd_l>
    2906:	8a 30       	cpi	r24, 0x0A	; 10
    2908:	08 f0       	brcs	.+2      	; 0x290c <neo7m_handler+0x192>
    290a:	62 cf       	rjmp	.-316    	; 0x27d0 <neo7m_handler+0x56>
    290c:	6a 30       	cpi	r22, 0x0A	; 10
    290e:	08 f0       	brcs	.+2      	; 0x2912 <neo7m_handler+0x198>
    2910:	5f cf       	rjmp	.-322    	; 0x27d0 <neo7m_handler+0x56>
            date_bcd_h > 9 || date_bcd_l > 9 ||
    2912:	3a 30       	cpi	r19, 0x0A	; 10
    2914:	08 f0       	brcs	.+2      	; 0x2918 <neo7m_handler+0x19e>
    2916:	5c cf       	rjmp	.-328    	; 0x27d0 <neo7m_handler+0x56>
    2918:	2a 30       	cpi	r18, 0x0A	; 10
    291a:	08 f0       	brcs	.+2      	; 0x291e <neo7m_handler+0x1a4>
    291c:	59 cf       	rjmp	.-334    	; 0x27d0 <neo7m_handler+0x56>
            month_bcd_h > 9 || month_bcd_l > 9)
    291e:	9a 30       	cpi	r25, 0x0A	; 10
    2920:	08 f0       	brcs	.+2      	; 0x2924 <neo7m_handler+0x1aa>
    2922:	56 cf       	rjmp	.-340    	; 0x27d0 <neo7m_handler+0x56>
        {
            return;
        }
        uart_send_byte('|');
    2924:	8c e7       	ldi	r24, 0x7C	; 124
    2926:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + hour_bcd_h);
    292a:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <hour_bcd_h>
    292e:	80 5d       	subi	r24, 0xD0	; 208
    2930:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + hour_bcd_l);
    2934:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <hour_bcd_l>
    2938:	80 5d       	subi	r24, 0xD0	; 208
    293a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte(':');
    293e:	8a e3       	ldi	r24, 0x3A	; 58
    2940:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + minute_bcd_h);
    2944:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <minute_bcd_h>
    2948:	80 5d       	subi	r24, 0xD0	; 208
    294a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + minute_bcd_l);
    294e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <minute_bcd_l>
    2952:	80 5d       	subi	r24, 0xD0	; 208
    2954:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte(':');
    2958:	8a e3       	ldi	r24, 0x3A	; 58
    295a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + second_bcd_h);
    295e:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <second_bcd_h>
    2962:	80 5d       	subi	r24, 0xD0	; 208
    2964:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + second_bcd_l);
    2968:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <second_bcd_l>
    296c:	80 5d       	subi	r24, 0xD0	; 208
    296e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte(' ');
    2972:	80 e2       	ldi	r24, 0x20	; 32
    2974:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + date_bcd_h);
    2978:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <date_bcd_h>
    297c:	80 5d       	subi	r24, 0xD0	; 208
    297e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + date_bcd_l);
    2982:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <date_bcd_l>
    2986:	80 5d       	subi	r24, 0xD0	; 208
    2988:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('.');
    298c:	8e e2       	ldi	r24, 0x2E	; 46
    298e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + month_bcd_h);
    2992:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <month_bcd_h>
    2996:	80 5d       	subi	r24, 0xD0	; 208
    2998:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + month_bcd_l);
    299c:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <month_bcd_l>
    29a0:	80 5d       	subi	r24, 0xD0	; 208
    29a2:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('.');
    29a6:	8e e2       	ldi	r24, 0x2E	; 46
    29a8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + year / 10);
    29ac:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <year>
    29b0:	66 2d       	mov	r22, r6
    29b2:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__udivmodqi4>
    29b6:	80 5d       	subi	r24, 0xD0	; 208
    29b8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('0' + year % 10);
    29bc:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <year>
    29c0:	66 2d       	mov	r22, r6
    29c2:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__udivmodqi4>
    29c6:	80 e3       	ldi	r24, 0x30	; 48
    29c8:	89 0f       	add	r24, r25
    29ca:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
        uart_send_byte('|');
    29ce:	8c e7       	ldi	r24, 0x7C	; 124
    29d0:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
    }
}

static inline uint8_t _correct_summer_time(void)
{
    uint8_t month_bcd = (month_bcd_h << 4) + month_bcd_l;
    29d4:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <month_bcd_h>
    29d8:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <month_bcd_l>
    29dc:	39 2f       	mov	r19, r25
    29de:	50 e1       	ldi	r21, 0x10	; 16
    29e0:	45 9f       	mul	r20, r21
    29e2:	30 0d       	add	r19, r0
    29e4:	11 24       	eor	r1, r1
    uint8_t date = date_bcd_h * 10 + date_bcd_l;
    29e6:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <date_bcd_h>
    29ea:	f0 91 b0 05 	lds	r31, 0x05B0	; 0x8005b0 <date_bcd_l>
    29ee:	2f 2f       	mov	r18, r31
    29f0:	6a e0       	ldi	r22, 0x0A	; 10
    29f2:	a6 9f       	mul	r26, r22
    29f4:	20 0d       	add	r18, r0
    29f6:	11 24       	eor	r1, r1
    uint8_t hour_bcd = (hour_bcd_h << 4) + hour_bcd_l;
    29f8:	50 91 aa 05 	lds	r21, 0x05AA	; 0x8005aa <hour_bcd_h>
    29fc:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <hour_bcd_l>
    2a00:	e8 2f       	mov	r30, r24
    2a02:	60 e1       	ldi	r22, 0x10	; 16
    2a04:	56 9f       	mul	r21, r22
    2a06:	e0 0d       	add	r30, r0
    2a08:	11 24       	eor	r1, r1
    if (month_bcd < 0x03 || month_bcd > 0x10) // it is Winter
    2a0a:	6d ef       	ldi	r22, 0xFD	; 253
    2a0c:	63 0f       	add	r22, r19
    2a0e:	6e 30       	cpi	r22, 0x0E	; 14
    2a10:	50 f5       	brcc	.+84     	; 0x2a66 <neo7m_handler+0x2ec>
    {
        return 0;
    }
    if (month_bcd > 0x03 && month_bcd < 0x10) // it is Summer
    2a12:	6c ef       	ldi	r22, 0xFC	; 252
    2a14:	63 0f       	add	r22, r19
    2a16:	6c 30       	cpi	r22, 0x0C	; 12
    2a18:	28 f1       	brcs	.+74     	; 0x2a64 <neo7m_handler+0x2ea>
    {
        return 1;
    }
    if (month_bcd == 0x03) // March
    2a1a:	33 30       	cpi	r19, 0x03	; 3
    2a1c:	81 f4       	brne	.+32     	; 0x2a3e <neo7m_handler+0x2c4>
    {
        if (23 + dow >= date) // before last Sunday
    2a1e:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <dow>
    2a22:	6b 2f       	mov	r22, r27
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	69 5e       	subi	r22, 0xE9	; 233
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	62 17       	cp	r22, r18
    2a2e:	73 07       	cpc	r23, r19
    2a30:	d4 f4       	brge	.+52     	; 0x2a66 <neo7m_handler+0x2ec>
        {
            return 0;
        }
        else
        {
            return 1;
    2a32:	11 e0       	ldi	r17, 0x01	; 1
    {
        if (23 + dow >= date) // before last Sunday
        {
            return 0;
        }
        if (dow == 1 && hour_bcd + TIME_ZONE < 3)  // Sunday before 3
    2a34:	b1 30       	cpi	r27, 0x01	; 1
    2a36:	b9 f4       	brne	.+46     	; 0x2a66 <neo7m_handler+0x2ec>
        {
            return 0;
        }
        else
        {
            return 1;
    2a38:	e1 11       	cpse	r30, r1
    2a3a:	15 c0       	rjmp	.+42     	; 0x2a66 <neo7m_handler+0x2ec>
    2a3c:	11 c0       	rjmp	.+34     	; 0x2a60 <neo7m_handler+0x2e6>
        }
    }
    else if (month_bcd == 0x10) // October
    2a3e:	30 31       	cpi	r19, 0x10	; 16
    2a40:	91 f4       	brne	.+36     	; 0x2a66 <neo7m_handler+0x2ec>
    {
        if (23 + dow >= date) //  before last Sunday
    2a42:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <dow>
    2a46:	6b 2f       	mov	r22, r27
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	69 5e       	subi	r22, 0xE9	; 233
    2a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	62 17       	cp	r22, r18
    2a52:	73 07       	cpc	r23, r19
    2a54:	3c f4       	brge	.+14     	; 0x2a64 <neo7m_handler+0x2ea>
        {
            return 1;
        }
        if (dow == 1 && hour_bcd + TIME_ZONE <= 3)  // Sunday before 3
    2a56:	b1 30       	cpi	r27, 0x01	; 1
    2a58:	31 f4       	brne	.+12     	; 0x2a66 <neo7m_handler+0x2ec>
        {
            return 0;
        }
        else
        {
            return 1;
    2a5a:	11 e0       	ldi	r17, 0x01	; 1
    2a5c:	e2 30       	cpi	r30, 0x02	; 2
    2a5e:	18 f0       	brcs	.+6      	; 0x2a66 <neo7m_handler+0x2ec>
    2a60:	10 e0       	ldi	r17, 0x00	; 0
    2a62:	01 c0       	rjmp	.+2      	; 0x2a66 <neo7m_handler+0x2ec>
    2a64:	11 e0       	ldi	r17, 0x01	; 1
    2a66:	8e 5f       	subi	r24, 0xFE	; 254
    dow = (7000 + (_date + y + y / 4 - y / 100 + y / 400 + (31 * m) / 12)) % 7 + 1;
}

static inline void _correct_february_day_number(void)
{
    if (year & 3 || year == 0)
    2a68:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <year>
    2a6c:	32 2f       	mov	r19, r18
    2a6e:	33 70       	andi	r19, 0x03	; 3
    2a70:	11 f4       	brne	.+4      	; 0x2a76 <neo7m_handler+0x2fc>
    2a72:	21 11       	cpse	r18, r1
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <neo7m_handler+0x302>
    {
        days_in_month[2] = 0x29;
    2a76:	40 92 13 01 	sts	0x0113, r4	; 0x800113 <days_in_month+0x2>
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <neo7m_handler+0x306>
    }
    else
    {
        days_in_month[2] = 0x30;
    2a7c:	50 92 13 01 	sts	0x0113, r5	; 0x800113 <days_in_month+0x2>
static void _correct_time_zone(void)
{
    uint8_t tz = TIME_ZONE;
    tz += _correct_summer_time();
    _correct_february_day_number();
    hour_bcd_l += tz;
    2a80:	81 0f       	add	r24, r17
    2a82:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <hour_bcd_l>
    if (hour_bcd_l >= 10)
    2a86:	8a 30       	cpi	r24, 0x0A	; 10
    2a88:	30 f0       	brcs	.+12     	; 0x2a96 <neo7m_handler+0x31c>
    {
        hour_bcd_l -= 10;
    2a8a:	8a 50       	subi	r24, 0x0A	; 10
    2a8c:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <hour_bcd_l>
        hour_bcd_h++;
    2a90:	5f 5f       	subi	r21, 0xFF	; 255
    2a92:	50 93 aa 05 	sts	0x05AA, r21	; 0x8005aa <hour_bcd_h>
    }
    if (hour_bcd_h == 2 && hour_bcd_l == 4)
    2a96:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <hour_bcd_h>
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <neo7m_handler+0x326>
    2a9e:	47 c0       	rjmp	.+142    	; 0x2b2e <neo7m_handler+0x3b4>
    2aa0:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <hour_bcd_l>
    2aa4:	84 30       	cpi	r24, 0x04	; 4
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <neo7m_handler+0x330>
    2aa8:	42 c0       	rjmp	.+132    	; 0x2b2e <neo7m_handler+0x3b4>
    {
        hour_bcd_l = 0;
    2aaa:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <hour_bcd_l>
        hour_bcd_h = 0;
    2aae:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <hour_bcd_h>
        date_bcd_l++;
    2ab2:	ff 5f       	subi	r31, 0xFF	; 255
    2ab4:	f0 93 b0 05 	sts	0x05B0, r31	; 0x8005b0 <date_bcd_l>
        if (date_bcd_l == 10)
    2ab8:	fa 30       	cpi	r31, 0x0A	; 10
    2aba:	29 f4       	brne	.+10     	; 0x2ac6 <neo7m_handler+0x34c>
        {
            date_bcd_l = 0;
    2abc:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <date_bcd_l>
            date_bcd_h++;
    2ac0:	af 5f       	subi	r26, 0xFF	; 255
    2ac2:	a0 93 a9 05 	sts	0x05A9, r26	; 0x8005a9 <date_bcd_h>
        }
        if ((date_bcd_h << 4) + date_bcd_l == days_in_month[(month_bcd_h << 4) + month_bcd_l])
    2ac6:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <date_bcd_h>
    2aca:	60 91 b0 05 	lds	r22, 0x05B0	; 0x8005b0 <date_bcd_l>
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	30 e1       	ldi	r19, 0x10	; 16
    2ad2:	83 9f       	mul	r24, r19
    2ad4:	60 0d       	add	r22, r0
    2ad6:	71 1d       	adc	r23, r1
    2ad8:	11 24       	eor	r1, r1
    2ada:	50 e1       	ldi	r21, 0x10	; 16
    2adc:	45 9f       	mul	r20, r21
    2ade:	f0 01       	movw	r30, r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	ef 5e       	subi	r30, 0xEF	; 239
    2ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae6:	e9 0f       	add	r30, r25
    2ae8:	f1 1d       	adc	r31, r1
    2aea:	e0 81       	ld	r30, Z
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	6e 17       	cp	r22, r30
    2af0:	7f 07       	cpc	r23, r31
    2af2:	e9 f4       	brne	.+58     	; 0x2b2e <neo7m_handler+0x3b4>
        {
            date_bcd_l = 1;
    2af4:	20 92 b0 05 	sts	0x05B0, r2	; 0x8005b0 <date_bcd_l>
            date_bcd_h = 0;
    2af8:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <date_bcd_h>
            month_bcd_l++;
    2afc:	9f 5f       	subi	r25, 0xFF	; 255
    2afe:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <month_bcd_l>
            if (month_bcd_l == 10)
    2b02:	9a 30       	cpi	r25, 0x0A	; 10
    2b04:	29 f4       	brne	.+10     	; 0x2b10 <neo7m_handler+0x396>
            {
                month_bcd_l = 0;
    2b06:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <month_bcd_l>
                month_bcd_h++;
    2b0a:	4f 5f       	subi	r20, 0xFF	; 255
    2b0c:	40 93 a3 05 	sts	0x05A3, r20	; 0x8005a3 <month_bcd_h>
            }
            if (month_bcd_h == 1 && month_bcd_l == 3)
    2b10:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <month_bcd_h>
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	59 f4       	brne	.+22     	; 0x2b2e <neo7m_handler+0x3b4>
    2b18:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <month_bcd_l>
    2b1c:	93 30       	cpi	r25, 0x03	; 3
    2b1e:	39 f4       	brne	.+14     	; 0x2b2e <neo7m_handler+0x3b4>
            {
                month_bcd_l = 1;
    2b20:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <month_bcd_l>
                month_bcd_h = 0;
    2b24:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <month_bcd_h>
                year++;
    2b28:	2f 5f       	subi	r18, 0xFF	; 255
    2b2a:	20 93 ad 05 	sts	0x05AD, r18	; 0x8005ad <year>
uint16_t year_full;

static void _calculate_dow(void)
{
    int16_t _year = year + 2000;
    int8_t _month = month_bcd_h * 10 + month_bcd_l;
    2b2e:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <month_bcd_h>
    2b32:	40 91 a5 05 	lds	r20, 0x05A5	; 0x8005a5 <month_bcd_l>
    2b36:	6a e0       	ldi	r22, 0x0A	; 10
    2b38:	86 9f       	mul	r24, r22
    2b3a:	40 0d       	add	r20, r0
    2b3c:	11 24       	eor	r1, r1
    int8_t _date = date_bcd_h * 10 + date_bcd_l;

    int8_t a = _month < 3 ? 1 : 0;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	43 30       	cpi	r20, 0x03	; 3
    2b42:	0c f0       	brlt	.+2      	; 0x2b46 <neo7m_handler+0x3cc>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    int16_t y = _year - a;
    2b46:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <year>
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	20 53       	subi	r18, 0x30	; 48
    2b4e:	38 4f       	sbci	r19, 0xF8	; 248
    2b50:	28 1b       	sub	r18, r24
    2b52:	31 09       	sbc	r19, r1
    int8_t m = _month + 12 * a - 2;
    2b54:	42 50       	subi	r20, 0x02	; 2
    2b56:	83 9d       	mul	r24, r3
    2b58:	40 0d       	add	r20, r0
    2b5a:	11 24       	eor	r1, r1
    dow = (7000 + (_date + y + y / 4 - y / 100 + y / 400 + (31 * m) / 12)) % 7 + 1;
    2b5c:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <date_bcd_h>
    2b60:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <date_bcd_l>
    2b64:	5a e0       	ldi	r21, 0x0A	; 10
    2b66:	95 9f       	mul	r25, r21
    2b68:	80 0d       	add	r24, r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	f9 01       	movw	r30, r18
    2b6e:	e8 0f       	add	r30, r24
    2b70:	f1 1d       	adc	r31, r1
    2b72:	87 fd       	sbrc	r24, 7
    2b74:	fa 95       	dec	r31
    2b76:	c9 01       	movw	r24, r18
    2b78:	95 95       	asr	r25
    2b7a:	87 95       	ror	r24
    2b7c:	95 95       	asr	r25
    2b7e:	87 95       	ror	r24
    2b80:	e8 0f       	add	r30, r24
    2b82:	f9 1f       	adc	r31, r25
    2b84:	c9 01       	movw	r24, r18
    2b86:	b7 01       	movw	r22, r14
    2b88:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    2b8c:	e6 0f       	add	r30, r22
    2b8e:	f7 1f       	adc	r31, r23
    2b90:	c9 01       	movw	r24, r18
    2b92:	b6 01       	movw	r22, r12
    2b94:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    2b98:	e6 0f       	add	r30, r22
    2b9a:	f7 1f       	adc	r31, r23
    2b9c:	6f e1       	ldi	r22, 0x1F	; 31
    2b9e:	46 02       	muls	r20, r22
    2ba0:	c0 01       	movw	r24, r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	b5 01       	movw	r22, r10
    2ba6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    2baa:	cf 01       	movw	r24, r30
    2bac:	86 0f       	add	r24, r22
    2bae:	97 1f       	adc	r25, r23
    2bb0:	88 5a       	subi	r24, 0xA8	; 168
    2bb2:	94 4e       	sbci	r25, 0xE4	; 228
    2bb4:	b4 01       	movw	r22, r8
    2bb6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__divmodhi4>
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <dow>
        uart_send_byte('0' + year / 10);
        uart_send_byte('0' + year % 10);
        uart_send_byte('|');

        _correct_time_zone();
        if (_time_cb != NULL)
    2bc0:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <_time_cb>
    2bc4:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <_time_cb+0x1>
    2bc8:	30 97       	sbiw	r30, 0x00	; 0
    2bca:	09 f4       	brne	.+2      	; 0x2bce <neo7m_handler+0x454>
    2bcc:	01 ce       	rjmp	.-1022   	; 0x27d0 <neo7m_handler+0x56>
        {
            _time_cb();
    2bce:	09 95       	icall
    2bd0:	ff cd       	rjmp	.-1026   	; 0x27d0 <neo7m_handler+0x56>
                    _packet_parser();
                }
            }
            else
            {
                _buf[_index++] = tmp;
    2bd2:	91 e0       	ldi	r25, 0x01	; 1
    2bd4:	9e 0f       	add	r25, r30
    2bd6:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <_index>
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	ef 5d       	subi	r30, 0xDF	; 223
    2bde:	fa 4f       	sbci	r31, 0xFA	; 250
    2be0:	80 83       	st	Z, r24
    2be2:	f6 cd       	rjmp	.-1044   	; 0x27d0 <neo7m_handler+0x56>
            }
        }
    }
}
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	1f 91       	pop	r17
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	bf 90       	pop	r11
    2bf8:	af 90       	pop	r10
    2bfa:	9f 90       	pop	r9
    2bfc:	8f 90       	pop	r8
    2bfe:	6f 90       	pop	r6
    2c00:	5f 90       	pop	r5
    2c02:	4f 90       	pop	r4
    2c04:	3f 90       	pop	r3
    2c06:	2f 90       	pop	r2
    2c08:	08 95       	ret

00002c0a <get_second_bcd_l>:

uint8_t get_second_bcd_l(void)
{
    return second_bcd_l;
}
    2c0a:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <second_bcd_l>
    2c0e:	08 95       	ret

00002c10 <get_second_bcd_h>:

uint8_t get_second_bcd_h(void)
{
    return second_bcd_h;
}
    2c10:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <second_bcd_h>
    2c14:	08 95       	ret

00002c16 <get_minute_bcd_l>:

uint8_t get_minute_bcd_l(void)
{
    return minute_bcd_l;
}
    2c16:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <minute_bcd_l>
    2c1a:	08 95       	ret

00002c1c <get_minute_bcd_h>:

uint8_t get_minute_bcd_h(void)
{
    return minute_bcd_h;
}
    2c1c:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <minute_bcd_h>
    2c20:	08 95       	ret

00002c22 <get_hour_bcd_l>:

uint8_t get_hour_bcd_l(void)
{
    return hour_bcd_l;
}
    2c22:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <hour_bcd_l>
    2c26:	08 95       	ret

00002c28 <get_hour_bcd_h>:

uint8_t get_hour_bcd_h(void)
{
    return hour_bcd_h;
}
    2c28:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <hour_bcd_h>
    2c2c:	08 95       	ret

00002c2e <get_dow>:

uint8_t get_dow(void)
{
    return dow;
}
    2c2e:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <dow>
    2c32:	08 95       	ret

00002c34 <get_date_bcd_l>:

uint8_t get_date_bcd_l(void)
{
    return date_bcd_l;
}
    2c34:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <date_bcd_l>
    2c38:	08 95       	ret

00002c3a <get_date_bcd_h>:

uint8_t get_date_bcd_h(void)
{
    return date_bcd_h;
}
    2c3a:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <date_bcd_h>
    2c3e:	08 95       	ret

00002c40 <get_month>:

uint8_t get_month(void)
{
    return month_bcd_h * 10 + month_bcd_l;
    2c40:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <month_bcd_h>
    2c44:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <month_bcd_l>
}
    2c48:	2a e0       	ldi	r18, 0x0A	; 10
    2c4a:	92 9f       	mul	r25, r18
    2c4c:	80 0d       	add	r24, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	08 95       	ret

00002c52 <get_year>:

uint8_t get_year(void)
{
    return year;
}
    2c52:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <year>
    2c56:	08 95       	ret

00002c58 <max7219_cs_cb>:

extern void max7219_load_row(uint8_t row, uint8_t *buf);

static void max7219_cs_cb(void)
{
    MAX7219_CS_PORT &= ~(1 << MAX7219_CS_PIN);
    2c58:	2a 98       	cbi	0x05, 2	; 5
    MAX7219_CS_PORT |= 1 << MAX7219_CS_PIN;
    2c5a:	2a 9a       	sbi	0x05, 2	; 5
    2c5c:	08 95       	ret

00002c5e <max7219_send_all>:
}

static void max7219_send_all(uint8_t reg, uint8_t data)
{
    2c5e:	e2 e6       	ldi	r30, 0x62	; 98
    2c60:	f5 e0       	ldi	r31, 0x05	; 5
    uint8_t *buf=spi_buf;
    for (uint8_t i=0; i<MAX7219_NUMBER; i++)
    {
        *buf++ = reg;
    2c62:	80 83       	st	Z, r24
        *buf++ = data;
    2c64:	61 83       	std	Z+1, r22	; 0x01
    2c66:	32 96       	adiw	r30, 0x02	; 2
}

static void max7219_send_all(uint8_t reg, uint8_t data)
{
    uint8_t *buf=spi_buf;
    for (uint8_t i=0; i<MAX7219_NUMBER; i++)
    2c68:	95 e0       	ldi	r25, 0x05	; 5
    2c6a:	ea 37       	cpi	r30, 0x7A	; 122
    2c6c:	f9 07       	cpc	r31, r25
    2c6e:	c9 f7       	brne	.-14     	; 0x2c62 <max7219_send_all+0x4>
    {
        *buf++ = reg;
        *buf++ = data;
    }
    spi_master_send(spi_buf, MAX7219_NUMBER*2, max7219_cs_cb);
    2c70:	2c e2       	ldi	r18, 0x2C	; 44
    2c72:	36 e1       	ldi	r19, 0x16	; 22
    2c74:	48 e1       	ldi	r20, 0x18	; 24
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	82 e6       	ldi	r24, 0x62	; 98
    2c7c:	95 e0       	ldi	r25, 0x05	; 5
    2c7e:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <spi_master_transfer>

00002c82 <max7219_init>:
}

void max7219_init(void)
{
    MAX7219_CS_DDR |= 1 << MAX7219_CS_PIN;
    2c82:	22 9a       	sbi	0x04, 2	; 4
    max7219_send_all(MAX7219_REG_SCAN_LIMIT, MAX7219_REG_SCAN_LIMIT_VALUE);
    2c84:	67 e0       	ldi	r22, 0x07	; 7
    2c86:	8b e0       	ldi	r24, 0x0B	; 11
    2c88:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <max7219_send_all>
    while (!spi_ready());
    2c8c:	0e 94 99 13 	call	0x2732	; 0x2732 <spi_ready>
    2c90:	88 23       	and	r24, r24
    2c92:	e1 f3       	breq	.-8      	; 0x2c8c <max7219_init+0xa>
    max7219_send_all(MAX7219_REG_DECODE_MODE, MAX7219_REG_DECODE_MODE_VALUE);
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	89 e0       	ldi	r24, 0x09	; 9
    2c98:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <max7219_send_all>
    while (!spi_ready());
    2c9c:	0e 94 99 13 	call	0x2732	; 0x2732 <spi_ready>
    2ca0:	88 23       	and	r24, r24
    2ca2:	e1 f3       	breq	.-8      	; 0x2c9c <max7219_init+0x1a>
    max7219_send_all(MAX7219_REG_SHUTDOWN, MAX7219_REG_SHUTDOWN_VALUE);
    2ca4:	61 e0       	ldi	r22, 0x01	; 1
    2ca6:	8c e0       	ldi	r24, 0x0C	; 12
    2ca8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <max7219_send_all>
    while (!spi_ready());
    2cac:	0e 94 99 13 	call	0x2732	; 0x2732 <spi_ready>
    2cb0:	88 23       	and	r24, r24
    2cb2:	e1 f3       	breq	.-8      	; 0x2cac <max7219_init+0x2a>
    max7219_send_all(MAX7219_REG_DISPLAY_TEST, MAX7219_REG_DISPLAY_TEST_VALUE);
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	8f e0       	ldi	r24, 0x0F	; 15
    2cb8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <max7219_send_all>
    while (!spi_ready());
    2cbc:	0e 94 99 13 	call	0x2732	; 0x2732 <spi_ready>
    2cc0:	88 23       	and	r24, r24
    2cc2:	e1 f3       	breq	.-8      	; 0x2cbc <max7219_init+0x3a>
    max7219_send_all(MAX7219_REG_INTENSITY, 0x0f & MAX7219_REG_INTENSITY_VALUE);
    2cc4:	61 e0       	ldi	r22, 0x01	; 1
    2cc6:	8a e0       	ldi	r24, 0x0A	; 10
    2cc8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <max7219_send_all>
    while (!spi_ready());
    2ccc:	0e 94 99 13 	call	0x2732	; 0x2732 <spi_ready>
    2cd0:	88 23       	and	r24, r24
    2cd2:	e1 f3       	breq	.-8      	; 0x2ccc <max7219_init+0x4a>
}
    2cd4:	08 95       	ret

00002cd6 <max7219_update>:

void max7219_update(void)
{
    max7219_row = MAX7219_ROWS;
    2cd6:	88 e0       	ldi	r24, 0x08	; 8
    2cd8:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <max7219_row>
    2cdc:	08 95       	ret

00002cde <max7219_update_with_config>:
}

void max7219_update_with_config(void)
{
    max7219_row = MAX7219_REG_DISPLAY_TEST + 1;
    2cde:	80 e1       	ldi	r24, 0x10	; 16
    2ce0:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <max7219_row>
    2ce4:	08 95       	ret

00002ce6 <max7219_handler>:
}

void max7219_handler(void)
{
    if (max7219_row == 0)
    2ce6:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <max7219_row>
    2cea:	88 23       	and	r24, r24
    2cec:	59 f1       	breq	.+86     	; 0x2d44 <max7219_handler+0x5e>
    {
        return;
    }
    if (!spi_ready())
    2cee:	0e 94 99 13 	call	0x2732	; 0x2732 <spi_ready>
    2cf2:	88 23       	and	r24, r24
    2cf4:	39 f1       	breq	.+78     	; 0x2d44 <max7219_handler+0x5e>
    {
        return;
    }
    max7219_row--;
    2cf6:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <max7219_row>
    2cfa:	81 50       	subi	r24, 0x01	; 1
    2cfc:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <max7219_row>
    if (max7219_row < MAX7219_ROWS)
    2d00:	88 30       	cpi	r24, 0x08	; 8
    2d02:	68 f4       	brcc	.+26     	; 0x2d1e <max7219_handler+0x38>
    {
        max7219_load_row(max7219_row, spi_buf);
    2d04:	62 e6       	ldi	r22, 0x62	; 98
    2d06:	75 e0       	ldi	r23, 0x05	; 5
    2d08:	0e 94 3a 10 	call	0x2074	; 0x2074 <max7219_load_row>
        spi_master_send(spi_buf, MAX7219_NUMBER*2, max7219_cs_cb);
    2d0c:	2c e2       	ldi	r18, 0x2C	; 44
    2d0e:	36 e1       	ldi	r19, 0x16	; 22
    2d10:	48 e1       	ldi	r20, 0x18	; 24
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	70 e0       	ldi	r23, 0x00	; 0
    2d16:	82 e6       	ldi	r24, 0x62	; 98
    2d18:	95 e0       	ldi	r25, 0x05	; 5
    2d1a:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <spi_master_transfer>
    }
    else
    {
        uint8_t data;
        switch (max7219_row)
    2d1e:	8b 30       	cpi	r24, 0x0B	; 11
    2d20:	71 f0       	breq	.+28     	; 0x2d3e <max7219_handler+0x58>
    2d22:	28 f4       	brcc	.+10     	; 0x2d2e <max7219_handler+0x48>
    2d24:	89 30       	cpi	r24, 0x09	; 9
    2d26:	39 f0       	breq	.+14     	; 0x2d36 <max7219_handler+0x50>
    2d28:	8a 30       	cpi	r24, 0x0A	; 10
    2d2a:	39 f0       	breq	.+14     	; 0x2d3a <max7219_handler+0x54>
    2d2c:	08 95       	ret
    2d2e:	8c 30       	cpi	r24, 0x0C	; 12
    2d30:	21 f0       	breq	.+8      	; 0x2d3a <max7219_handler+0x54>
    2d32:	8f 30       	cpi	r24, 0x0F	; 15
    2d34:	39 f4       	brne	.+14     	; 0x2d44 <max7219_handler+0x5e>
        {
            case MAX7219_REG_SCAN_LIMIT:
                data = MAX7219_REG_SCAN_LIMIT_VALUE;
                break;
            case MAX7219_REG_DECODE_MODE:
                data = MAX7219_REG_DECODE_MODE_VALUE;
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	03 c0       	rjmp	.+6      	; 0x2d40 <max7219_handler+0x5a>
                break;
            case MAX7219_REG_DISPLAY_TEST:
                data = MAX7219_REG_DISPLAY_TEST_VALUE;
                break;
            case MAX7219_REG_INTENSITY:
                data = MAX7219_REG_INTENSITY_VALUE;
    2d3a:	61 e0       	ldi	r22, 0x01	; 1
                break;
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <max7219_handler+0x5a>
    {
        uint8_t data;
        switch (max7219_row)
        {
            case MAX7219_REG_SCAN_LIMIT:
                data = MAX7219_REG_SCAN_LIMIT_VALUE;
    2d3e:	67 e0       	ldi	r22, 0x07	; 7
                data = MAX7219_REG_INTENSITY_VALUE;
                break;
            default:
                return;
        }
        max7219_send_all(max7219_row, data);
    2d40:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <max7219_send_all>
    2d44:	08 95       	ret

00002d46 <onewire_init>:
static volatile uint8_t onewire_counter;
static onewire_cb onewire_callback;

void onewire_init(void)
{
    ONEWIRE_PORT &= ~(1 << ONEWIRE_PIN);
    2d46:	5a 98       	cbi	0x0b, 2	; 11
    ONEWIRE_DDR &= ~(1 << ONEWIRE_PIN);
    2d48:	52 98       	cbi	0x0a, 2	; 10
    TCCR0A = 1 << WGM01; // CTC mode
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 0;
    2d4e:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0;
    2d50:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    2d54:	08 95       	ret

00002d56 <onewire_master_pull_down>:
}

void onewire_master_pull_down(onewire_cb callback)
{
    ONEWIRE_DDR |= 1 << ONEWIRE_PIN;
    2d56:	52 9a       	sbi	0x0a, 2	; 10
    ONEWIRE_PORT &= ~(1 << ONEWIRE_PIN);
    2d58:	5a 98       	cbi	0x0b, 2	; 11
    onewire_counter = 0;
    2d5a:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <onewire_counter>
    onewire_callback = callback;
    2d5e:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <onewire_callback+0x1>
    2d62:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <onewire_callback>
    TCNT0 = 0;
    2d66:	16 bc       	out	0x26, r1	; 38
    OCR0A = RESET_WRITE_PERIOD;
    2d68:	8d e7       	ldi	r24, 0x7D	; 125
    2d6a:	87 bd       	out	0x27, r24	; 39
    TIMSK0 = (1 << OCIE0B) | (1 << OCIE0A);
    2d6c:	86 e0       	ldi	r24, 0x06	; 6
    2d6e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    TCCR0B = (1 << CS01) | (1 << CS00); // clk/64
    2d72:	83 e0       	ldi	r24, 0x03	; 3
    2d74:	85 bd       	out	0x25, r24	; 37
    2d76:	08 95       	ret

00002d78 <onewire_master_pull_up>:
}

void onewire_master_pull_up(onewire_cb callback)
{
    ONEWIRE_DDR &= ~(1 << ONEWIRE_PIN);
    2d78:	52 98       	cbi	0x0a, 2	; 10
    ONEWIRE_PORT &= ~(1 << ONEWIRE_PIN);
    2d7a:	5a 98       	cbi	0x0b, 2	; 11
    onewire_counter = 0;
    2d7c:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <onewire_counter>
    onewire_data = 0;
    2d80:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <onewire_data>
    onewire_callback = callback;
    2d84:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <onewire_callback+0x1>
    2d88:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <onewire_callback>
    TCNT0 = 0;
    2d8c:	16 bc       	out	0x26, r1	; 38
    OCR0A = RESET_WRITE_PERIOD;
    2d8e:	8d e7       	ldi	r24, 0x7D	; 125
    2d90:	87 bd       	out	0x27, r24	; 39
    OCR0B = RESET_READ_PERIOD;
    2d92:	8c e0       	ldi	r24, 0x0C	; 12
    2d94:	88 bd       	out	0x28, r24	; 40
    TIMSK0 = (1 << OCIE0B) | (1 << OCIE0A);
    2d96:	86 e0       	ldi	r24, 0x06	; 6
    2d98:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    TCCR0B = (1 << CS01) | (1 << CS00); // clk/64
    2d9c:	83 e0       	ldi	r24, 0x03	; 3
    2d9e:	85 bd       	out	0x25, r24	; 37
    2da0:	08 95       	ret

00002da2 <onewire_master_write>:
}

void onewire_master_write(uint8_t data, onewire_cb callback)
{
    ONEWIRE_DDR &= ~(1 << ONEWIRE_PIN);
    2da2:	52 98       	cbi	0x0a, 2	; 10
    ONEWIRE_PORT &= ~(1 << ONEWIRE_PIN);
    2da4:	5a 98       	cbi	0x0b, 2	; 11
    onewire_counter = 8;
    2da6:	98 e0       	ldi	r25, 0x08	; 8
    2da8:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <onewire_counter>
    onewire_data = data;
    2dac:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <onewire_data>
    onewire_callback = callback;
    2db0:	70 93 7b 05 	sts	0x057B, r23	; 0x80057b <onewire_callback+0x1>
    2db4:	60 93 7a 05 	sts	0x057A, r22	; 0x80057a <onewire_callback>
    TCNT0 = 0;
    2db8:	16 bc       	out	0x26, r1	; 38
    OCR0A = HIGH_PULL_DOWN_PERIOD;
    2dba:	84 e1       	ldi	r24, 0x14	; 20
    2dbc:	87 bd       	out	0x27, r24	; 39
    TIMSK0 = 1 << OCIE0A;
    2dbe:	82 e0       	ldi	r24, 0x02	; 2
    2dc0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    TCCR0B = 1 << CS01; // clk/8
    2dc4:	85 bd       	out	0x25, r24	; 37
    2dc6:	08 95       	ret

00002dc8 <onewire_master_read>:
}

void onewire_master_read(onewire_cb callback)
{
    ONEWIRE_DDR &= ~(1 << ONEWIRE_PIN);
    2dc8:	52 98       	cbi	0x0a, 2	; 10
    ONEWIRE_PORT &= ~(1 << ONEWIRE_PIN);
    2dca:	5a 98       	cbi	0x0b, 2	; 11
    onewire_counter = 8;
    2dcc:	28 e0       	ldi	r18, 0x08	; 8
    2dce:	20 93 7c 05 	sts	0x057C, r18	; 0x80057c <onewire_counter>
    onewire_data = 0xFF;
    2dd2:	2f ef       	ldi	r18, 0xFF	; 255
    2dd4:	20 93 7d 05 	sts	0x057D, r18	; 0x80057d <onewire_data>
    onewire_callback = callback;
    2dd8:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <onewire_callback+0x1>
    2ddc:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <onewire_callback>
    TCNT0 = 0;
    2de0:	16 bc       	out	0x26, r1	; 38
    OCR0A = HIGH_PULL_DOWN_PERIOD;
    2de2:	84 e1       	ldi	r24, 0x14	; 20
    2de4:	87 bd       	out	0x27, r24	; 39
    OCR0B = READ_PERIOD;
    2de6:	88 bd       	out	0x28, r24	; 40
    TIMSK0 = (1 << OCIE0B) | (1 << OCIE0A);
    2de8:	86 e0       	ldi	r24, 0x06	; 6
    2dea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    TCCR0B = 1 << CS01; // clk/8
    2dee:	82 e0       	ldi	r24, 0x02	; 2
    2df0:	85 bd       	out	0x25, r24	; 37
    2df2:	08 95       	ret

00002df4 <__vector_14>:
}

SIGNAL(TIMER0_COMPA_vect)
{
    2df4:	1f 92       	push	r1
    2df6:	0f 92       	push	r0
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	0f 92       	push	r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	2f 93       	push	r18
    2e00:	3f 93       	push	r19
    2e02:	4f 93       	push	r20
    2e04:	5f 93       	push	r21
    2e06:	6f 93       	push	r22
    2e08:	7f 93       	push	r23
    2e0a:	8f 93       	push	r24
    2e0c:	9f 93       	push	r25
    2e0e:	af 93       	push	r26
    2e10:	bf 93       	push	r27
    2e12:	ef 93       	push	r30
    2e14:	ff 93       	push	r31
    if (onewire_counter == 0)
    2e16:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <onewire_counter>
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	0d c0       	rjmp	.+26     	; 0x2e38 <__vector_14+0x44>
    {
        TCCR0B = 0;
    2e1e:	15 bc       	out	0x25, r1	; 37
        TIMSK0 = 0;
    2e20:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
        if (onewire_callback)
    2e24:	e0 91 7a 05 	lds	r30, 0x057A	; 0x80057a <onewire_callback>
    2e28:	f0 91 7b 05 	lds	r31, 0x057B	; 0x80057b <onewire_callback+0x1>
    2e2c:	30 97       	sbiw	r30, 0x00	; 0
    2e2e:	19 f1       	breq	.+70     	; 0x2e76 <__vector_14+0x82>
        {
            onewire_callback(onewire_data);
    2e30:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <onewire_data>
    2e34:	09 95       	icall
    2e36:	1f c0       	rjmp	.+62     	; 0x2e76 <__vector_14+0x82>
        }
        return;
    }
    if (ONEWIRE_DDR & (1 << ONEWIRE_PIN))
    2e38:	52 9b       	sbis	0x0a, 2	; 10
    2e3a:	14 c0       	rjmp	.+40     	; 0x2e64 <__vector_14+0x70>
    {
        ONEWIRE_DDR &= ~(1 << ONEWIRE_PIN);
    2e3c:	52 98       	cbi	0x0a, 2	; 10
        if (1 & onewire_data)
    2e3e:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <onewire_data>
    2e42:	80 ff       	sbrs	r24, 0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <__vector_14+0x56>
        {
            OCR0A = HIGH_PULL_UP_PERIOD;
    2e46:	8a ea       	ldi	r24, 0xAA	; 170
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <__vector_14+0x58>
        }
        else
        {
            OCR0A = LOW_PULL_UP_PERIOD;
    2e4a:	8e e1       	ldi	r24, 0x1E	; 30
    2e4c:	87 bd       	out	0x27, r24	; 39
        }
        onewire_counter--;
    2e4e:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <onewire_counter>
    2e52:	81 50       	subi	r24, 0x01	; 1
    2e54:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <onewire_counter>
        onewire_data >>= 1;
    2e58:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <onewire_data>
    2e5c:	86 95       	lsr	r24
    2e5e:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <onewire_data>
    2e62:	09 c0       	rjmp	.+18     	; 0x2e76 <__vector_14+0x82>
    }
    else
    {
        ONEWIRE_DDR |= 1 << ONEWIRE_PIN;
    2e64:	52 9a       	sbi	0x0a, 2	; 10
        if (1 & onewire_data)
    2e66:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <onewire_data>
    2e6a:	80 ff       	sbrs	r24, 0
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <__vector_14+0x7e>
        {
            OCR0A = HIGH_PULL_DOWN_PERIOD;
    2e6e:	84 e1       	ldi	r24, 0x14	; 20
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <__vector_14+0x80>
        }
        else
        {
            OCR0A = LOW_PULL_DOWN_PERIOD;
    2e72:	80 ea       	ldi	r24, 0xA0	; 160
    2e74:	87 bd       	out	0x27, r24	; 39
        }
    }
}
    2e76:	ff 91       	pop	r31
    2e78:	ef 91       	pop	r30
    2e7a:	bf 91       	pop	r27
    2e7c:	af 91       	pop	r26
    2e7e:	9f 91       	pop	r25
    2e80:	8f 91       	pop	r24
    2e82:	7f 91       	pop	r23
    2e84:	6f 91       	pop	r22
    2e86:	5f 91       	pop	r21
    2e88:	4f 91       	pop	r20
    2e8a:	3f 91       	pop	r19
    2e8c:	2f 91       	pop	r18
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

00002e98 <__vector_15>:

SIGNAL(TIMER0_COMPB_vect)
{
    2e98:	1f 92       	push	r1
    2e9a:	0f 92       	push	r0
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	0f 92       	push	r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	8f 93       	push	r24
    if (ONEWIRE_PORT_IN & (1 << ONEWIRE_PIN))
    2ea4:	4a 9b       	sbis	0x09, 2	; 9
    2ea6:	05 c0       	rjmp	.+10     	; 0x2eb2 <__vector_15+0x1a>
    {
        onewire_data |= 0x80;
    2ea8:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <onewire_data>
    2eac:	80 68       	ori	r24, 0x80	; 128
    2eae:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <onewire_data>
    }
}
    2eb2:	8f 91       	pop	r24
    2eb4:	0f 90       	pop	r0
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	0f 90       	pop	r0
    2eba:	1f 90       	pop	r1
    2ebc:	18 95       	reti

00002ebe <_convert_t_cb>:
static uint16_t temperature=0;

void _convert_t_cb(uint8_t data)
{
#ifdef PARASITE_POWER
    ONEWIRE_PORT |= 1 << ONEWIRE_PIN;
    2ebe:	5a 9a       	sbi	0x0b, 2	; 11
    ONEWIRE_DDR |= 1 << ONEWIRE_PIN;
    2ec0:	52 9a       	sbi	0x0a, 2	; 10
#endif
    state = DS18B20_READY;
    2ec2:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <state>
    2ec6:	08 95       	ret

00002ec8 <_read_temperature_2_cb>:
    return 0;
}

void _read_temperature_2_cb(uint8_t data)
{
    temperature |= data << 8;
    2ec8:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <temperature>
    2ecc:	30 91 7f 05 	lds	r19, 0x057F	; 0x80057f <temperature+0x1>
    2ed0:	a9 01       	movw	r20, r18
    2ed2:	58 2b       	or	r21, r24
    2ed4:	ca 01       	movw	r24, r20
    2ed6:	50 93 7f 05 	sts	0x057F, r21	; 0x80057f <temperature+0x1>
    2eda:	40 93 7e 05 	sts	0x057E, r20	; 0x80057e <temperature>
    if (ds18b20_callback)
    2ede:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <ds18b20_callback>
    2ee2:	f0 91 81 05 	lds	r31, 0x0581	; 0x800581 <ds18b20_callback+0x1>
    2ee6:	30 97       	sbiw	r30, 0x00	; 0
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <_read_temperature_2_cb+0x24>
    {
        ds18b20_callback(temperature);
    2eea:	09 95       	icall
    }
    state = DS18B20_READY;
    2eec:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <state>
    2ef0:	08 95       	ret

00002ef2 <_convert_skip_rom_cb>:
    state = DS18B20_READY;
}

void _convert_skip_rom_cb(uint8_t data)
{
    onewire_master_write(CMD_CONVERT_T, _convert_t_cb);
    2ef2:	6f e5       	ldi	r22, 0x5F	; 95
    2ef4:	77 e1       	ldi	r23, 0x17	; 23
    2ef6:	84 e4       	ldi	r24, 0x44	; 68
    2ef8:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <onewire_master_write>

00002efc <_read_skip_rom_cb>:
    onewire_master_read(_read_temperature_1_cb);
}

void _read_skip_rom_cb(uint8_t data)
{
    onewire_master_write(CMD_READ_SCRATCHPAD, _read_scratchpad_cb);
    2efc:	64 e9       	ldi	r22, 0x94	; 148
    2efe:	77 e1       	ldi	r23, 0x17	; 23
    2f00:	8e eb       	ldi	r24, 0xBE	; 190
    2f02:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <onewire_master_write>

00002f06 <_pull_down2_cb>:
    onewire_master_write(CMD_SKIP_ROM, _convert_skip_rom_cb);
}

void _pull_down2_cb(uint8_t data)
{
    onewire_master_pull_up(_pull_up2_cb);
    2f06:	88 e9       	ldi	r24, 0x98	; 152
    2f08:	97 e1       	ldi	r25, 0x17	; 23
    2f0a:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <onewire_master_pull_up>

00002f0e <_pull_down1_cb>:
    onewire_master_write(CMD_SKIP_ROM, _read_skip_rom_cb);
}

void _pull_down1_cb(uint8_t data)
{
    onewire_master_pull_up(_pull_up1_cb);
    2f0e:	82 ea       	ldi	r24, 0xA2	; 162
    2f10:	97 e1       	ldi	r25, 0x17	; 23
    2f12:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <onewire_master_pull_up>

00002f16 <_read_temperature_1_cb>:
    state = DS18B20_READY;
}

void _read_temperature_1_cb(uint8_t data)
{
    temperature = data;
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <temperature+0x1>
    2f1c:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <temperature>
    onewire_master_read(_read_temperature_2_cb);
    2f20:	84 e6       	ldi	r24, 0x64	; 100
    2f22:	97 e1       	ldi	r25, 0x17	; 23
    2f24:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <onewire_master_read>

00002f28 <_read_scratchpad_cb>:
}

void _read_scratchpad_cb(uint8_t data)
{
    onewire_master_read(_read_temperature_1_cb);
    2f28:	8b e8       	ldi	r24, 0x8B	; 139
    2f2a:	97 e1       	ldi	r25, 0x17	; 23
    2f2c:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <onewire_master_read>

00002f30 <_pull_up2_cb>:
    onewire_master_write(CMD_CONVERT_T, _convert_t_cb);
}

void _pull_up2_cb(uint8_t data)
{
    if (data)
    2f30:	88 23       	and	r24, r24
    2f32:	19 f0       	breq	.+6      	; 0x2f3a <_pull_up2_cb+0xa>
    {
        state = DS18B20_READY;
    2f34:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <state>
        return;
    2f38:	08 95       	ret
    }
    onewire_master_write(CMD_SKIP_ROM, _convert_skip_rom_cb);
    2f3a:	69 e7       	ldi	r22, 0x79	; 121
    2f3c:	77 e1       	ldi	r23, 0x17	; 23
    2f3e:	8c ec       	ldi	r24, 0xCC	; 204
    2f40:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <onewire_master_write>

00002f44 <_pull_up1_cb>:
    onewire_master_write(CMD_READ_SCRATCHPAD, _read_scratchpad_cb);
}

void _pull_up1_cb(uint8_t data)
{
    if (data)
    2f44:	88 23       	and	r24, r24
    2f46:	61 f0       	breq	.+24     	; 0x2f60 <_pull_up1_cb+0x1c>
    {
        if (ds18b20_callback)
    2f48:	e0 91 80 05 	lds	r30, 0x0580	; 0x800580 <ds18b20_callback>
    2f4c:	f0 91 81 05 	lds	r31, 0x0581	; 0x800581 <ds18b20_callback+0x1>
    2f50:	30 97       	sbiw	r30, 0x00	; 0
    2f52:	19 f0       	breq	.+6      	; 0x2f5a <_pull_up1_cb+0x16>
        {
            ds18b20_callback(DS18B20_INVALID_TEMPERATURE);
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e8       	ldi	r25, 0x80	; 128
    2f58:	09 95       	icall
        }
        state = DS18B20_READY;
    2f5a:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <state>
        return;
    2f5e:	08 95       	ret
    }
    onewire_master_write(CMD_SKIP_ROM, _read_skip_rom_cb);
    2f60:	6e e7       	ldi	r22, 0x7E	; 126
    2f62:	77 e1       	ldi	r23, 0x17	; 23
    2f64:	8c ec       	ldi	r24, 0xCC	; 204
    2f66:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <onewire_master_write>

00002f6a <ds18b20_convert>:
{
    onewire_master_pull_up(_pull_up2_cb);
}

uint8_t ds18b20_convert(void)
{
    2f6a:	cf 93       	push	r28
    if (state != DS18B20_READY)
    2f6c:	c0 91 82 05 	lds	r28, 0x0582	; 0x800582 <state>
    2f70:	c1 11       	cpse	r28, r1
    2f72:	08 c0       	rjmp	.+16     	; 0x2f84 <ds18b20_convert+0x1a>
    {
        return 1;
    }
    state = DS18B20_BUSY;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <state>
    onewire_master_pull_down(_pull_down2_cb);
    2f7a:	83 e8       	ldi	r24, 0x83	; 131
    2f7c:	97 e1       	ldi	r25, 0x17	; 23
    2f7e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <onewire_master_pull_down>
    return 0;
    2f82:	01 c0       	rjmp	.+2      	; 0x2f86 <ds18b20_convert+0x1c>

uint8_t ds18b20_convert(void)
{
    if (state != DS18B20_READY)
    {
        return 1;
    2f84:	c1 e0       	ldi	r28, 0x01	; 1
    }
    state = DS18B20_BUSY;
    onewire_master_pull_down(_pull_down2_cb);
    return 0;
}
    2f86:	8c 2f       	mov	r24, r28
    2f88:	cf 91       	pop	r28
    2f8a:	08 95       	ret

00002f8c <ds18b20_read_temperature>:
{
    onewire_master_pull_up(_pull_up1_cb);
}

uint8_t ds18b20_read_temperature(ds18b20_cb callback)
{
    2f8c:	cf 93       	push	r28
    if (state != DS18B20_READY)
    2f8e:	c0 91 82 05 	lds	r28, 0x0582	; 0x800582 <state>
    2f92:	c1 11       	cpse	r28, r1
    2f94:	0c c0       	rjmp	.+24     	; 0x2fae <ds18b20_read_temperature+0x22>
    {
        return 1;
    }
    state = DS18B20_BUSY;
    2f96:	21 e0       	ldi	r18, 0x01	; 1
    2f98:	20 93 82 05 	sts	0x0582, r18	; 0x800582 <state>
    ds18b20_callback = callback;
    2f9c:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <ds18b20_callback+0x1>
    2fa0:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <ds18b20_callback>
    onewire_master_pull_down(_pull_down1_cb);
    2fa4:	87 e8       	ldi	r24, 0x87	; 135
    2fa6:	97 e1       	ldi	r25, 0x17	; 23
    2fa8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <onewire_master_pull_down>
    return 0;
    2fac:	01 c0       	rjmp	.+2      	; 0x2fb0 <ds18b20_read_temperature+0x24>

uint8_t ds18b20_read_temperature(ds18b20_cb callback)
{
    if (state != DS18B20_READY)
    {
        return 1;
    2fae:	c1 e0       	ldi	r28, 0x01	; 1
    }
    state = DS18B20_BUSY;
    ds18b20_callback = callback;
    onewire_master_pull_down(_pull_down1_cb);
    return 0;
}
    2fb0:	8c 2f       	mov	r24, r28
    2fb2:	cf 91       	pop	r28
    2fb4:	08 95       	ret

00002fb6 <bmp_temp_ready>:
    bmp_state = BMP_TEMP_READ;
}

static void bmp_temp_ready(void)
{
    bmp_state = BMP_PRES_CONVERSION;
    2fb6:	83 e0       	ldi	r24, 0x03	; 3
    2fb8:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bmp_state>
    2fbc:	08 95       	ret

00002fbe <bmp_pres_ready>:
    bmp_state = BMP_PRES_READ;
}

static void bmp_pres_ready(void)
{
    bmp_state = BMP_PRES_READY;
    2fbe:	85 e0       	ldi	r24, 0x05	; 5
    2fc0:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bmp_state>
    2fc4:	08 95       	ret

00002fc6 <bmp_read>:
static bmp180_temperature_cb temperature_cb;
static bmp180_pressure_cb pressure_cb;

static void bmp_read(void)
{
    timer_stop(BMP180_TIMER_ID);
    2fc6:	84 e0       	ldi	r24, 0x04	; 4
    2fc8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <timer_stop>
    bmp_state = BMP_TEMP_CONVERSION;
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bmp_state>
    2fd2:	08 95       	ret

00002fd4 <bmp_pres_read>:
    bmp_state = BMP_PRES_CONVERSION;
}

static void bmp_pres_read(void)
{
    timer_stop(BMP180_TIMER_ID);
    2fd4:	84 e0       	ldi	r24, 0x04	; 4
    2fd6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <timer_stop>
    bmp_state = BMP_PRES_READ;
    2fda:	84 e0       	ldi	r24, 0x04	; 4
    2fdc:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bmp_state>
    2fe0:	08 95       	ret

00002fe2 <bmp_temp_read>:
    bmp_state = BMP_TEMP_CONVERSION;
}

static void bmp_temp_read(void)
{
    timer_stop(BMP180_TIMER_ID);
    2fe2:	84 e0       	ldi	r24, 0x04	; 4
    2fe4:	0e 94 2c 0a 	call	0x1458	; 0x1458 <timer_stop>
    bmp_state = BMP_TEMP_READ;
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <bmp_state>
    2fee:	08 95       	ret

00002ff0 <bmp180_init>:
{
    bmp_state = BMP_PRES_READY;
}

void bmp180_init(bmp180_temperature_cb t_cb, bmp180_pressure_cb p_cb)
{
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	66 97       	sbiw	r28, 0x16	; 22
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	5c 01       	movw	r10, r24
    3014:	6b 01       	movw	r12, r22
    uint8_t tmp_buf[22];
    while (!twi_ready());
    3016:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <twi_ready>
    301a:	88 23       	and	r24, r24
    301c:	e1 f3       	breq	.-8      	; 0x3016 <bmp180_init+0x26>
    tmp_buf[0] = REG_SOFT_RESET;
    301e:	80 ee       	ldi	r24, 0xE0	; 224
    3020:	89 83       	std	Y+1, r24	; 0x01
    tmp_buf[1] = CMD_SOFT_RESET;
    3022:	86 eb       	ldi	r24, 0xB6	; 182
    3024:	8a 83       	std	Y+2, r24	; 0x02
    if (twi_master_send(BMPx8x_ADDRESS, tmp_buf, 2, 0) != 0)
    3026:	e1 2c       	mov	r14, r1
    3028:	f1 2c       	mov	r15, r1
    302a:	00 e0       	ldi	r16, 0x00	; 0
    302c:	22 e0       	ldi	r18, 0x02	; 2
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	be 01       	movw	r22, r28
    3034:	6f 5f       	subi	r22, 0xFF	; 255
    3036:	7f 4f       	sbci	r23, 0xFF	; 255
    3038:	8e ee       	ldi	r24, 0xEE	; 238
    303a:	0e 94 c9 12 	call	0x2592	; 0x2592 <twi_master_transfer>
    303e:	81 11       	cpse	r24, r1
    3040:	85 c0       	rjmp	.+266    	; 0x314c <bmp180_init+0x15c>
    {
        return;
    }
    while (!twi_ready());
    3042:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <twi_ready>
    3046:	88 23       	and	r24, r24
    3048:	e1 f3       	breq	.-8      	; 0x3042 <bmp180_init+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    304a:	8f e1       	ldi	r24, 0x1F	; 31
    304c:	9e e4       	ldi	r25, 0x4E	; 78
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <bmp180_init+0x5e>
    3052:	00 c0       	rjmp	.+0      	; 0x3054 <bmp180_init+0x64>
    3054:	00 00       	nop
    _delay_ms(5);
    tmp_buf[0] = REG_AC1;
    3056:	8a ea       	ldi	r24, 0xAA	; 170
    3058:	89 83       	std	Y+1, r24	; 0x01
    if (twi_master_transfer(BMPx8x_ADDRESS, tmp_buf, tmp_buf, 1, 22, 0) != 0)
    305a:	e1 2c       	mov	r14, r1
    305c:	f1 2c       	mov	r15, r1
    305e:	06 e1       	ldi	r16, 0x16	; 22
    3060:	21 e0       	ldi	r18, 0x01	; 1
    3062:	ae 01       	movw	r20, r28
    3064:	4f 5f       	subi	r20, 0xFF	; 255
    3066:	5f 4f       	sbci	r21, 0xFF	; 255
    3068:	ba 01       	movw	r22, r20
    306a:	8e ee       	ldi	r24, 0xEE	; 238
    306c:	0e 94 c9 12 	call	0x2592	; 0x2592 <twi_master_transfer>
    3070:	81 11       	cpse	r24, r1
    3072:	6c c0       	rjmp	.+216    	; 0x314c <bmp180_init+0x15c>
    {
        return;
    }
    while (!twi_ready());
    3074:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <twi_ready>
    3078:	88 23       	and	r24, r24
    307a:	e1 f3       	breq	.-8      	; 0x3074 <bmp180_init+0x84>
    bmp_ac1 = ((tmp_buf[0]<<8) | tmp_buf[1]);
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	98 27       	eor	r25, r24
    3082:	89 27       	eor	r24, r25
    3084:	98 27       	eor	r25, r24
    3086:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <bmp_ac1+0x1>
    308a:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <bmp_ac1>
    bmp_ac2 = ((tmp_buf[2]<<8) | tmp_buf[3]);
    308e:	8b 81       	ldd	r24, Y+3	; 0x03
    3090:	9c 81       	ldd	r25, Y+4	; 0x04
    3092:	98 27       	eor	r25, r24
    3094:	89 27       	eor	r24, r25
    3096:	98 27       	eor	r25, r24
    3098:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <bmp_ac2+0x1>
    309c:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <bmp_ac2>
    bmp_ac3 = ((tmp_buf[4]<<8) | tmp_buf[5]);
    30a0:	8d 81       	ldd	r24, Y+5	; 0x05
    30a2:	9e 81       	ldd	r25, Y+6	; 0x06
    30a4:	98 27       	eor	r25, r24
    30a6:	89 27       	eor	r24, r25
    30a8:	98 27       	eor	r25, r24
    30aa:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <bmp_ac3+0x1>
    30ae:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <bmp_ac3>
    bmp_ac4 = ((tmp_buf[6]<<8) | tmp_buf[7]);
    30b2:	8f 81       	ldd	r24, Y+7	; 0x07
    30b4:	98 85       	ldd	r25, Y+8	; 0x08
    30b6:	98 27       	eor	r25, r24
    30b8:	89 27       	eor	r24, r25
    30ba:	98 27       	eor	r25, r24
    30bc:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <bmp_ac4+0x1>
    30c0:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <bmp_ac4>
    bmp_ac5 = ((tmp_buf[8]<<8) | tmp_buf[9]);
    30c4:	89 85       	ldd	r24, Y+9	; 0x09
    30c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c8:	98 27       	eor	r25, r24
    30ca:	89 27       	eor	r24, r25
    30cc:	98 27       	eor	r25, r24
    30ce:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <bmp_ac5+0x1>
    30d2:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <bmp_ac5>
    bmp_ac6 = ((tmp_buf[10]<<8) | tmp_buf[11]);
    30d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    30d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    30da:	98 27       	eor	r25, r24
    30dc:	89 27       	eor	r24, r25
    30de:	98 27       	eor	r25, r24
    30e0:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <bmp_ac6+0x1>
    30e4:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <bmp_ac6>
    bmp_b1 = ((tmp_buf[12]<<8) | tmp_buf[13]);
    30e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ec:	98 27       	eor	r25, r24
    30ee:	89 27       	eor	r24, r25
    30f0:	98 27       	eor	r25, r24
    30f2:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <bmp_b1+0x1>
    30f6:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <bmp_b1>
    bmp_b2 = ((tmp_buf[14]<<8) | tmp_buf[15]);
    30fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30fc:	98 89       	ldd	r25, Y+16	; 0x10
    30fe:	98 27       	eor	r25, r24
    3100:	89 27       	eor	r24, r25
    3102:	98 27       	eor	r25, r24
    3104:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <bmp_b2+0x1>
    3108:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <bmp_b2>
    bmp_mb = ((tmp_buf[16]<<8) | tmp_buf[17]);
    bmp_mc = ((tmp_buf[18]<<8) | tmp_buf[19]);
    310c:	8b 89       	ldd	r24, Y+19	; 0x13
    310e:	9c 89       	ldd	r25, Y+20	; 0x14
    3110:	98 27       	eor	r25, r24
    3112:	89 27       	eor	r24, r25
    3114:	98 27       	eor	r25, r24
    3116:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <bmp_mc+0x1>
    311a:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <bmp_mc>
    bmp_md = ((tmp_buf[20]<<8) | tmp_buf[21]);
    311e:	8d 89       	ldd	r24, Y+21	; 0x15
    3120:	9e 89       	ldd	r25, Y+22	; 0x16
    3122:	98 27       	eor	r25, r24
    3124:	89 27       	eor	r24, r25
    3126:	98 27       	eor	r25, r24
    3128:	90 93 8c 05 	sts	0x058C, r25	; 0x80058c <bmp_md+0x1>
    312c:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <bmp_md>
    temperature_cb = t_cb;
    3130:	b0 92 86 05 	sts	0x0586, r11	; 0x800586 <temperature_cb+0x1>
    3134:	a0 92 85 05 	sts	0x0585, r10	; 0x800585 <temperature_cb>
    pressure_cb = p_cb;
    3138:	d0 92 84 05 	sts	0x0584, r13	; 0x800584 <pressure_cb+0x1>
    313c:	c0 92 83 05 	sts	0x0583, r12	; 0x800583 <pressure_cb>
    timer_register(BMP180_TIMER_ID, BMP180_READ_PERIOD_S*10, bmp_read);
    3140:	43 ee       	ldi	r20, 0xE3	; 227
    3142:	57 e1       	ldi	r21, 0x17	; 23
    3144:	68 ec       	ldi	r22, 0xC8	; 200
    3146:	84 e0       	ldi	r24, 0x04	; 4
    3148:	0e 94 19 0a 	call	0x1432	; 0x1432 <timer_register>
}
    314c:	66 96       	adiw	r28, 0x16	; 22
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	0f 91       	pop	r16
    315e:	ff 90       	pop	r15
    3160:	ef 90       	pop	r14
    3162:	df 90       	pop	r13
    3164:	cf 90       	pop	r12
    3166:	bf 90       	pop	r11
    3168:	af 90       	pop	r10
    316a:	08 95       	ret

0000316c <bmp180_handler>:
        pressure_cb(p);
    }
}

void bmp180_handler(void)
{
    316c:	2f 92       	push	r2
    316e:	3f 92       	push	r3
    3170:	4f 92       	push	r4
    3172:	5f 92       	push	r5
    3174:	6f 92       	push	r6
    3176:	7f 92       	push	r7
    3178:	8f 92       	push	r8
    317a:	9f 92       	push	r9
    317c:	af 92       	push	r10
    317e:	bf 92       	push	r11
    3180:	cf 92       	push	r12
    3182:	df 92       	push	r13
    3184:	ef 92       	push	r14
    3186:	ff 92       	push	r15
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    if (!twi_ready())
    3190:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <twi_ready>
    3194:	88 23       	and	r24, r24
    3196:	09 f4       	brne	.+2      	; 0x319a <bmp180_handler+0x2e>
    3198:	d7 c1       	rjmp	.+942    	; 0x3548 <bmp180_handler+0x3dc>
    {
        return;
    }
    switch (bmp_state)
    319a:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <bmp_state>
    319e:	83 30       	cpi	r24, 0x03	; 3
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <bmp180_handler+0x38>
    31a2:	3f c0       	rjmp	.+126    	; 0x3222 <bmp180_handler+0xb6>
    31a4:	70 f4       	brcc	.+28     	; 0x31c2 <bmp180_handler+0x56>
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	91 f0       	breq	.+36     	; 0x31ce <bmp180_handler+0x62>
    31aa:	82 30       	cpi	r24, 0x02	; 2
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <bmp180_handler+0x44>
    31ae:	cc c1       	rjmp	.+920    	; 0x3548 <bmp180_handler+0x3dc>
            }
            bmp_state = BMP_IDLE;
            timer_register(BMP180_TIMER_ID, 1, bmp_temp_read);
            return;
        case BMP_TEMP_READ:
            bmp_buf[0] = REG_OUT_MSB;
    31b0:	86 ef       	ldi	r24, 0xF6	; 246
    31b2:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bmp_buf>
            if (twi_master_transfer(BMPx8x_ADDRESS, bmp_buf, bmp_buf, 1, 2, bmp_temp_ready) != 0)
    31b6:	3b ed       	ldi	r19, 0xDB	; 219
    31b8:	e3 2e       	mov	r14, r19
    31ba:	37 e1       	ldi	r19, 0x17	; 23
    31bc:	f3 2e       	mov	r15, r19
    31be:	02 e0       	ldi	r16, 0x02	; 2
    31c0:	26 c0       	rjmp	.+76     	; 0x320e <bmp180_handler+0xa2>
{
    if (!twi_ready())
    {
        return;
    }
    switch (bmp_state)
    31c2:	84 30       	cpi	r24, 0x04	; 4
    31c4:	e1 f0       	breq	.+56     	; 0x31fe <bmp180_handler+0x92>
    31c6:	85 30       	cpi	r24, 0x05	; 5
    31c8:	09 f4       	brne	.+2      	; 0x31cc <bmp180_handler+0x60>
    31ca:	b1 c0       	rjmp	.+354    	; 0x332e <bmp180_handler+0x1c2>
    31cc:	bd c1       	rjmp	.+890    	; 0x3548 <bmp180_handler+0x3dc>
    {
        case BMP_IDLE:
            return;
        case BMP_TEMP_CONVERSION:
            bmp_buf[0] = REG_CTRL_MEAS;
    31ce:	84 ef       	ldi	r24, 0xF4	; 244
    31d0:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bmp_buf>
            bmp_buf[1] = CMD_TEMP_CONVERSION;
    31d4:	8e e2       	ldi	r24, 0x2E	; 46
    31d6:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <bmp_buf+0x1>
            if (twi_master_send(BMPx8x_ADDRESS, bmp_buf, 2, 0) != 0)
    31da:	e1 2c       	mov	r14, r1
    31dc:	f1 2c       	mov	r15, r1
    31de:	00 e0       	ldi	r16, 0x00	; 0
    31e0:	22 e0       	ldi	r18, 0x02	; 2
    31e2:	40 e0       	ldi	r20, 0x00	; 0
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	68 e8       	ldi	r22, 0x88	; 136
    31e8:	75 e0       	ldi	r23, 0x05	; 5
    31ea:	8e ee       	ldi	r24, 0xEE	; 238
    31ec:	0e 94 c9 12 	call	0x2592	; 0x2592 <twi_master_transfer>
    31f0:	81 11       	cpse	r24, r1
    31f2:	aa c1       	rjmp	.+852    	; 0x3548 <bmp180_handler+0x3dc>
            {
                return;
            }
            bmp_state = BMP_IDLE;
    31f4:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <bmp_state>
            timer_register(BMP180_TIMER_ID, 1, bmp_temp_read);
    31f8:	41 ef       	ldi	r20, 0xF1	; 241
    31fa:	57 e1       	ldi	r21, 0x17	; 23
    31fc:	82 c0       	rjmp	.+260    	; 0x3302 <bmp180_handler+0x196>
            }
            bmp_state = BMP_IDLE;
            timer_register(BMP180_TIMER_ID, 1, bmp_pres_read);
            return;
        case BMP_PRES_READ:
            bmp_buf[0] = REG_OUT_MSB;
    31fe:	86 ef       	ldi	r24, 0xF6	; 246
    3200:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bmp_buf>
            if (twi_master_transfer(BMPx8x_ADDRESS, bmp_buf, bmp_buf, 1, 3, bmp_pres_ready) != 0)
    3204:	df ed       	ldi	r29, 0xDF	; 223
    3206:	ed 2e       	mov	r14, r29
    3208:	d7 e1       	ldi	r29, 0x17	; 23
    320a:	fd 2e       	mov	r15, r29
    320c:	03 e0       	ldi	r16, 0x03	; 3
            bmp_state = BMP_IDLE;
            timer_register(BMP180_TIMER_ID, 1, bmp_temp_read);
            return;
        case BMP_TEMP_READ:
            bmp_buf[0] = REG_OUT_MSB;
            if (twi_master_transfer(BMPx8x_ADDRESS, bmp_buf, bmp_buf, 1, 2, bmp_temp_ready) != 0)
    320e:	21 e0       	ldi	r18, 0x01	; 1
    3210:	48 e8       	ldi	r20, 0x88	; 136
    3212:	55 e0       	ldi	r21, 0x05	; 5
    3214:	ba 01       	movw	r22, r20
    3216:	8e ee       	ldi	r24, 0xEE	; 238
    3218:	0e 94 c9 12 	call	0x2592	; 0x2592 <twi_master_transfer>
    321c:	81 11       	cpse	r24, r1
    321e:	94 c1       	rjmp	.+808    	; 0x3548 <bmp180_handler+0x3dc>
    3220:	91 c1       	rjmp	.+802    	; 0x3544 <bmp180_handler+0x3d8>
}

static void calculate_temperature(void)
{
    int32_t x1, x2;
    x1 = (uint16_t)((bmp_buf[0]<<8) | bmp_buf[1]);
    3222:	20 91 88 05 	lds	r18, 0x0588	; 0x800588 <bmp_buf>
    3226:	30 91 89 05 	lds	r19, 0x0589	; 0x800589 <bmp_buf+0x1>
    322a:	32 27       	eor	r19, r18
    322c:	23 27       	eor	r18, r19
    322e:	32 27       	eor	r19, r18
    3230:	a9 01       	movw	r20, r18
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	70 e0       	ldi	r23, 0x00	; 0
    x1 -= (int32_t)bmp_ac6;
    3236:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <bmp_ac6>
    323a:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <bmp_ac6+0x1>
    323e:	9a 01       	movw	r18, r20
    3240:	ab 01       	movw	r20, r22
    3242:	28 1b       	sub	r18, r24
    3244:	39 0b       	sbc	r19, r25
    3246:	41 09       	sbc	r20, r1
    3248:	51 09       	sbc	r21, r1
    x1 *= (int32_t)bmp_ac5;
    324a:	a0 91 97 05 	lds	r26, 0x0597	; 0x800597 <bmp_ac5>
    324e:	b0 91 98 05 	lds	r27, 0x0598	; 0x800598 <bmp_ac5+0x1>
    3252:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__muluhisi3>
    x1 >>= 15;
    3256:	6b 01       	movw	r12, r22
    3258:	7c 01       	movw	r14, r24
    325a:	1f e0       	ldi	r17, 0x0F	; 15
    325c:	f5 94       	asr	r15
    325e:	e7 94       	ror	r14
    3260:	d7 94       	ror	r13
    3262:	c7 94       	ror	r12
    3264:	1a 95       	dec	r17
    3266:	d1 f7       	brne	.-12     	; 0x325c <bmp180_handler+0xf0>
    x2 = bmp_mc;
    3268:	60 91 8d 05 	lds	r22, 0x058D	; 0x80058d <bmp_mc>
    326c:	70 91 8e 05 	lds	r23, 0x058E	; 0x80058e <bmp_mc+0x1>
    3270:	cb 01       	movw	r24, r22
    3272:	77 0f       	add	r23, r23
    3274:	aa 0b       	sbc	r26, r26
    3276:	bb 0b       	sbc	r27, r27
    x2 <<= 11;
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0b e0       	ldi	r16, 0x0B	; 11
    327e:	66 0f       	add	r22, r22
    3280:	77 1f       	adc	r23, r23
    3282:	88 1f       	adc	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	0a 95       	dec	r16
    3288:	d1 f7       	brne	.-12     	; 0x327e <bmp180_handler+0x112>
    x2 /= x1 + bmp_md;
    bmp_b5 = x1 + x2;
    328a:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <bmp_md>
    328e:	30 91 8c 05 	lds	r19, 0x058C	; 0x80058c <bmp_md+0x1>
    3292:	89 01       	movw	r16, r18
    3294:	33 0f       	add	r19, r19
    3296:	22 0b       	sbc	r18, r18
    3298:	33 0b       	sbc	r19, r19
    329a:	a9 01       	movw	r20, r18
    329c:	98 01       	movw	r18, r16
    329e:	2c 0d       	add	r18, r12
    32a0:	3d 1d       	adc	r19, r13
    32a2:	4e 1d       	adc	r20, r14
    32a4:	5f 1d       	adc	r21, r15
    32a6:	0e 94 24 1b 	call	0x3648	; 0x3648 <__divmodsi4>
    32aa:	c2 0e       	add	r12, r18
    32ac:	d3 1e       	adc	r13, r19
    32ae:	d0 92 90 05 	sts	0x0590, r13	; 0x800590 <bmp_b5+0x1>
    32b2:	c0 92 8f 05 	sts	0x058F, r12	; 0x80058f <bmp_b5>
    int16_t t = ((bmp_b5 + 8) >> 4);  // temp in 0.1
    32b6:	88 e0       	ldi	r24, 0x08	; 8
    32b8:	c8 0e       	add	r12, r24
    32ba:	d1 1c       	adc	r13, r1
    32bc:	c6 01       	movw	r24, r12
    32be:	24 e0       	ldi	r18, 0x04	; 4
    32c0:	95 95       	asr	r25
    32c2:	87 95       	ror	r24
    32c4:	2a 95       	dec	r18
    32c6:	e1 f7       	brne	.-8      	; 0x32c0 <bmp180_handler+0x154>
    if (temperature_cb)
    32c8:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <temperature_cb>
    32cc:	f0 91 86 05 	lds	r31, 0x0586	; 0x800586 <temperature_cb+0x1>
    32d0:	30 97       	sbiw	r30, 0x00	; 0
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <bmp180_handler+0x16a>
    {
        temperature_cb(t);
    32d4:	09 95       	icall
            }
            bmp_state = BMP_IDLE;
            return;
        case BMP_PRES_CONVERSION:
            calculate_temperature();
            bmp_buf[0] = REG_CTRL_MEAS;
    32d6:	84 ef       	ldi	r24, 0xF4	; 244
    32d8:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <bmp_buf>
            bmp_buf[1] = CMD_PRES_CONVERSION;
    32dc:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <bmp_buf+0x1>
            if (twi_master_send(BMPx8x_ADDRESS, bmp_buf, 2, 0) != 0)
    32e0:	e1 2c       	mov	r14, r1
    32e2:	f1 2c       	mov	r15, r1
    32e4:	00 e0       	ldi	r16, 0x00	; 0
    32e6:	22 e0       	ldi	r18, 0x02	; 2
    32e8:	40 e0       	ldi	r20, 0x00	; 0
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    32ec:	68 e8       	ldi	r22, 0x88	; 136
    32ee:	75 e0       	ldi	r23, 0x05	; 5
    32f0:	8e ee       	ldi	r24, 0xEE	; 238
    32f2:	0e 94 c9 12 	call	0x2592	; 0x2592 <twi_master_transfer>
    32f6:	81 11       	cpse	r24, r1
    32f8:	27 c1       	rjmp	.+590    	; 0x3548 <bmp180_handler+0x3dc>
            {
                return;
            }
            bmp_state = BMP_IDLE;
    32fa:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <bmp_state>
            timer_register(BMP180_TIMER_ID, 1, bmp_pres_read);
    32fe:	4a ee       	ldi	r20, 0xEA	; 234
    3300:	57 e1       	ldi	r21, 0x17	; 23
    3302:	61 e0       	ldi	r22, 0x01	; 1
    3304:	84 e0       	ldi	r24, 0x04	; 4
            calculate_pressure();
            timer_register(BMP180_TIMER_ID, BMP180_READ_PERIOD_S*10, bmp_read);
            bmp_state = BMP_IDLE;
            return;
    }
}
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	1f 91       	pop	r17
    330c:	0f 91       	pop	r16
    330e:	ff 90       	pop	r15
    3310:	ef 90       	pop	r14
    3312:	df 90       	pop	r13
    3314:	cf 90       	pop	r12
    3316:	bf 90       	pop	r11
    3318:	af 90       	pop	r10
    331a:	9f 90       	pop	r9
    331c:	8f 90       	pop	r8
    331e:	7f 90       	pop	r7
    3320:	6f 90       	pop	r6
    3322:	5f 90       	pop	r5
    3324:	4f 90       	pop	r4
    3326:	3f 90       	pop	r3
    3328:	2f 90       	pop	r2
            if (twi_master_send(BMPx8x_ADDRESS, bmp_buf, 2, 0) != 0)
            {
                return;
            }
            bmp_state = BMP_IDLE;
            timer_register(BMP180_TIMER_ID, 1, bmp_pres_read);
    332a:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <timer_register>
    332e:	c0 90 88 05 	lds	r12, 0x0588	; 0x800588 <bmp_buf>
    3332:	d0 90 89 05 	lds	r13, 0x0589	; 0x800589 <bmp_buf+0x1>
    3336:	dc 24       	eor	r13, r12
    3338:	cd 24       	eor	r12, r13
    333a:	dc 24       	eor	r13, r12
    333c:	e1 2c       	mov	r14, r1
    333e:	f1 2c       	mov	r15, r1
    int32_t up, x1, x2, x3, b3, b6, p;
    uint32_t b4, b7;
    up = bmp_buf[0];
    up <<= 8;
    up |= bmp_buf[1];
    up <<= 8;
    3340:	fe 2c       	mov	r15, r14
    3342:	ed 2c       	mov	r14, r13
    3344:	dc 2c       	mov	r13, r12
    3346:	cc 24       	eor	r12, r12
    up |= bmp_buf[2];
    3348:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <bmp_buf+0x2>
    334c:	c8 2a       	or	r12, r24
    up >>= 8 - BMP_PRES_OSS;

    b6 = bmp_b5 - 4000;
    334e:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <bmp_b5>
    3352:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <bmp_b5+0x1>
    3356:	e0 5a       	subi	r30, 0xA0	; 160
    3358:	ff 40       	sbci	r31, 0x0F	; 15
    x1 = (bmp_b2 * (b6 * b6) >> 12) >> 11;
    335a:	9f 01       	movw	r18, r30
    335c:	df 01       	movw	r26, r30
    335e:	0e 94 43 1b 	call	0x3686	; 0x3686 <__mulhisi3>
    3362:	4b 01       	movw	r8, r22
    3364:	5c 01       	movw	r10, r24
    x2 = (bmp_ac2 * b6) >> 11;
    3366:	c0 91 9d 05 	lds	r28, 0x059D	; 0x80059d <bmp_ac2>
    336a:	d0 91 9e 05 	lds	r29, 0x059E	; 0x80059e <bmp_ac2+0x1>
    x3 = x1 + x2;
    b3 = (((((int32_t)bmp_ac1) * 4 + x3) << BMP_PRES_OSS) + 2) >> 2;
    336e:	20 90 9f 05 	lds	r2, 0x059F	; 0x80059f <bmp_ac1>
    3372:	30 90 a0 05 	lds	r3, 0x05A0	; 0x8005a0 <bmp_ac1+0x1>

    x1 = (bmp_ac3 * b6) >> 13;
    3376:	00 91 9b 05 	lds	r16, 0x059B	; 0x80059b <bmp_ac3>
    337a:	10 91 9c 05 	lds	r17, 0x059C	; 0x80059c <bmp_ac3+0x1>
    x2 = (bmp_b1 * ((b6 * b6) >> 12)) >> 16;
    x3 = ((x1 + x2) + 2) >> 2;
    b4 = (bmp_ac4 * (uint32_t)(x3 + 32768)) >> 15;
    337e:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <bmp_b1>
    3382:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <bmp_b1+0x1>
    3386:	9b 01       	movw	r18, r22
    3388:	ac 01       	movw	r20, r24
    338a:	8c e0       	ldi	r24, 0x0C	; 12
    338c:	55 95       	asr	r21
    338e:	47 95       	ror	r20
    3390:	37 95       	ror	r19
    3392:	27 95       	ror	r18
    3394:	8a 95       	dec	r24
    3396:	d1 f7       	brne	.-12     	; 0x338c <bmp180_handler+0x220>
    3398:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__mulshisi3>
    339c:	2c 01       	movw	r4, r24
    339e:	77 24       	eor	r7, r7
    33a0:	57 fc       	sbrc	r5, 7
    33a2:	70 94       	com	r7
    33a4:	67 2c       	mov	r6, r7
    33a6:	9f 01       	movw	r18, r30
    33a8:	d8 01       	movw	r26, r16
    33aa:	0e 94 43 1b 	call	0x3686	; 0x3686 <__mulhisi3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	3d e0       	ldi	r19, 0x0D	; 13
    33b4:	b5 95       	asr	r27
    33b6:	a7 95       	ror	r26
    33b8:	97 95       	ror	r25
    33ba:	87 95       	ror	r24
    33bc:	3a 95       	dec	r19
    33be:	d1 f7       	brne	.-12     	; 0x33b4 <bmp180_handler+0x248>
    33c0:	84 0d       	add	r24, r4
    33c2:	95 1d       	adc	r25, r5
    33c4:	a6 1d       	adc	r26, r6
    33c6:	b7 1d       	adc	r27, r7
    33c8:	02 96       	adiw	r24, 0x02	; 2
    33ca:	a1 1d       	adc	r26, r1
    33cc:	b1 1d       	adc	r27, r1
    33ce:	42 e0       	ldi	r20, 0x02	; 2
    33d0:	b5 95       	asr	r27
    33d2:	a7 95       	ror	r26
    33d4:	97 95       	ror	r25
    33d6:	87 95       	ror	r24
    33d8:	4a 95       	dec	r20
    33da:	d1 f7       	brne	.-12     	; 0x33d0 <bmp180_handler+0x264>
    33dc:	9c 01       	movw	r18, r24
    33de:	ad 01       	movw	r20, r26
    33e0:	30 58       	subi	r19, 0x80	; 128
    33e2:	4f 4f       	sbci	r20, 0xFF	; 255
    33e4:	5f 4f       	sbci	r21, 0xFF	; 255
    33e6:	a0 91 99 05 	lds	r26, 0x0599	; 0x800599 <bmp_ac4>
    33ea:	b0 91 9a 05 	lds	r27, 0x059A	; 0x80059a <bmp_ac4+0x1>
    33ee:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__muluhisi3>
    33f2:	2b 01       	movw	r4, r22
    33f4:	3c 01       	movw	r6, r24
    33f6:	5f e0       	ldi	r21, 0x0F	; 15
    33f8:	76 94       	lsr	r7
    33fa:	67 94       	ror	r6
    33fc:	57 94       	ror	r5
    33fe:	47 94       	ror	r4
    3400:	5a 95       	dec	r21
    3402:	d1 f7       	brne	.-12     	; 0x33f8 <bmp180_handler+0x28c>

    b7 = ((uint32_t)(up - b3) * (50000 >> BMP_PRES_OSS));
    3404:	65 e0       	ldi	r22, 0x05	; 5
    3406:	f5 94       	asr	r15
    3408:	e7 94       	ror	r14
    340a:	d7 94       	ror	r13
    340c:	c7 94       	ror	r12
    340e:	6a 95       	dec	r22
    3410:	d1 f7       	brne	.-12     	; 0x3406 <bmp180_handler+0x29a>
    3412:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <bmp_b2>
    3416:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <bmp_b2+0x1>
    341a:	a5 01       	movw	r20, r10
    341c:	94 01       	movw	r18, r8
    341e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <__mulshisi3>
    3422:	4b 01       	movw	r8, r22
    3424:	5c 01       	movw	r10, r24
    3426:	77 e1       	ldi	r23, 0x17	; 23
    3428:	b5 94       	asr	r11
    342a:	a7 94       	ror	r10
    342c:	97 94       	ror	r9
    342e:	87 94       	ror	r8
    3430:	7a 95       	dec	r23
    3432:	d1 f7       	brne	.-12     	; 0x3428 <bmp180_handler+0x2bc>
    3434:	9f 01       	movw	r18, r30
    3436:	de 01       	movw	r26, r28
    3438:	0e 94 43 1b 	call	0x3686	; 0x3686 <__mulhisi3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	eb e0       	ldi	r30, 0x0B	; 11
    3442:	b5 95       	asr	r27
    3444:	a7 95       	ror	r26
    3446:	97 95       	ror	r25
    3448:	87 95       	ror	r24
    344a:	ea 95       	dec	r30
    344c:	d1 f7       	brne	.-12     	; 0x3442 <bmp180_handler+0x2d6>
    344e:	88 0d       	add	r24, r8
    3450:	99 1d       	adc	r25, r9
    3452:	aa 1d       	adc	r26, r10
    3454:	bb 1d       	adc	r27, r11
    3456:	a1 01       	movw	r20, r2
    3458:	33 0c       	add	r3, r3
    345a:	66 0b       	sbc	r22, r22
    345c:	77 0b       	sbc	r23, r23
    345e:	f2 e0       	ldi	r31, 0x02	; 2
    3460:	44 0f       	add	r20, r20
    3462:	55 1f       	adc	r21, r21
    3464:	66 1f       	adc	r22, r22
    3466:	77 1f       	adc	r23, r23
    3468:	fa 95       	dec	r31
    346a:	d1 f7       	brne	.-12     	; 0x3460 <bmp180_handler+0x2f4>
    346c:	84 0f       	add	r24, r20
    346e:	95 1f       	adc	r25, r21
    3470:	a6 1f       	adc	r26, r22
    3472:	b7 1f       	adc	r27, r23
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	aa 1f       	adc	r26, r26
    347a:	bb 1f       	adc	r27, r27
    347c:	a7 01       	movw	r20, r14
    347e:	96 01       	movw	r18, r12
    3480:	28 1b       	sub	r18, r24
    3482:	39 0b       	sbc	r19, r25
    3484:	4a 0b       	sbc	r20, r26
    3486:	5b 0b       	sbc	r21, r27
    3488:	aa e6       	ldi	r26, 0x6A	; 106
    348a:	b8 e1       	ldi	r27, 0x18	; 24
    348c:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__muluhisi3>
    if (b7 < 0x80000000)
    3490:	97 fd       	sbrc	r25, 7
    3492:	0b c0       	rjmp	.+22     	; 0x34aa <bmp180_handler+0x33e>
    {
        p = (b7 << 1) / b4;
    3494:	66 0f       	add	r22, r22
    3496:	77 1f       	adc	r23, r23
    3498:	88 1f       	adc	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	a3 01       	movw	r20, r6
    349e:	92 01       	movw	r18, r4
    34a0:	0e 94 02 1b 	call	0x3604	; 0x3604 <__udivmodsi4>
    34a4:	49 01       	movw	r8, r18
    34a6:	5a 01       	movw	r10, r20
    34a8:	0a c0       	rjmp	.+20     	; 0x34be <bmp180_handler+0x352>
    }
    else
    {
        p = (b7 / b4) << 1;
    34aa:	a3 01       	movw	r20, r6
    34ac:	92 01       	movw	r18, r4
    34ae:	0e 94 02 1b 	call	0x3604	; 0x3604 <__udivmodsi4>
    34b2:	49 01       	movw	r8, r18
    34b4:	5a 01       	movw	r10, r20
    34b6:	88 0c       	add	r8, r8
    34b8:	99 1c       	adc	r9, r9
    34ba:	aa 1c       	adc	r10, r10
    34bc:	bb 1c       	adc	r11, r11
    }

    x1 = (p >> 8) * (p >> 8);
    34be:	99 27       	eor	r25, r25
    34c0:	b7 fc       	sbrc	r11, 7
    34c2:	9a 95       	dec	r25
    34c4:	8b 2d       	mov	r24, r11
    34c6:	7a 2d       	mov	r23, r10
    34c8:	69 2d       	mov	r22, r9
    x1 = (x1 * 3038) >> 16;
    34ca:	9b 01       	movw	r18, r22
    34cc:	ac 01       	movw	r20, r24
    34ce:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <__mulsi3>
    34d2:	9b 01       	movw	r18, r22
    34d4:	ac 01       	movw	r20, r24
    34d6:	ae ed       	ldi	r26, 0xDE	; 222
    34d8:	bb e0       	ldi	r27, 0x0B	; 11
    34da:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__muluhisi3>
    34de:	6b 01       	movw	r12, r22
    34e0:	7c 01       	movw	r14, r24
    x2 = (-7357 * p) >> 16;
    p += (x1 + x2 + 3791) >> 4;
    34e2:	a3 e4       	ldi	r26, 0x43	; 67
    34e4:	b3 ee       	ldi	r27, 0xE3	; 227
    34e6:	a5 01       	movw	r20, r10
    34e8:	94 01       	movw	r18, r8
    34ea:	0e 94 6f 1b 	call	0x36de	; 0x36de <__mulohisi3>
    34ee:	bb 27       	eor	r27, r27
    34f0:	97 fd       	sbrc	r25, 7
    34f2:	b0 95       	com	r27
    34f4:	ab 2f       	mov	r26, r27
    34f6:	67 01       	movw	r12, r14
    34f8:	ff 24       	eor	r15, r15
    34fa:	d7 fc       	sbrc	r13, 7
    34fc:	f0 94       	com	r15
    34fe:	ef 2c       	mov	r14, r15
    3500:	8c 0d       	add	r24, r12
    3502:	9d 1d       	adc	r25, r13
    3504:	ae 1d       	adc	r26, r14
    3506:	bf 1d       	adc	r27, r15
    3508:	81 53       	subi	r24, 0x31	; 49
    350a:	91 4f       	sbci	r25, 0xF1	; 241
    350c:	af 4f       	sbci	r26, 0xFF	; 255
    350e:	bf 4f       	sbci	r27, 0xFF	; 255
    3510:	44 e0       	ldi	r20, 0x04	; 4
    3512:	b5 95       	asr	r27
    3514:	a7 95       	ror	r26
    3516:	97 95       	ror	r25
    3518:	87 95       	ror	r24
    351a:	4a 95       	dec	r20
    351c:	d1 f7       	brne	.-12     	; 0x3512 <bmp180_handler+0x3a6>
    351e:	bc 01       	movw	r22, r24
    3520:	cd 01       	movw	r24, r26
    3522:	68 0d       	add	r22, r8
    3524:	79 1d       	adc	r23, r9
    3526:	8a 1d       	adc	r24, r10
    3528:	9b 1d       	adc	r25, r11
    if (pressure_cb)
    352a:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pressure_cb>
    352e:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pressure_cb+0x1>
    3532:	30 97       	sbiw	r30, 0x00	; 0
    3534:	09 f0       	breq	.+2      	; 0x3538 <bmp180_handler+0x3cc>
    {
        pressure_cb(p);
    3536:	09 95       	icall
            }
            bmp_state = BMP_IDLE;
            return;
        case BMP_PRES_READY:
            calculate_pressure();
            timer_register(BMP180_TIMER_ID, BMP180_READ_PERIOD_S*10, bmp_read);
    3538:	43 ee       	ldi	r20, 0xE3	; 227
    353a:	57 e1       	ldi	r21, 0x17	; 23
    353c:	68 ec       	ldi	r22, 0xC8	; 200
    353e:	84 e0       	ldi	r24, 0x04	; 4
    3540:	0e 94 19 0a 	call	0x1432	; 0x1432 <timer_register>
            bmp_state = BMP_IDLE;
    3544:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <bmp_state>
            return;
    }
}
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	1f 91       	pop	r17
    354e:	0f 91       	pop	r16
    3550:	ff 90       	pop	r15
    3552:	ef 90       	pop	r14
    3554:	df 90       	pop	r13
    3556:	cf 90       	pop	r12
    3558:	bf 90       	pop	r11
    355a:	af 90       	pop	r10
    355c:	9f 90       	pop	r9
    355e:	8f 90       	pop	r8
    3560:	7f 90       	pop	r7
    3562:	6f 90       	pop	r6
    3564:	5f 90       	pop	r5
    3566:	4f 90       	pop	r4
    3568:	3f 90       	pop	r3
    356a:	2f 90       	pop	r2
    356c:	08 95       	ret

0000356e <main>:

}

int main(void)
{
    setup();
    356e:	0e 94 cc 09 	call	0x1398	; 0x1398 <setup>
    uart_send_byte('S');
    3572:	83 e5       	ldi	r24, 0x53	; 83
    3574:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <uart_send_byte>
    convert_temperature();
    3578:	0e 94 93 09 	call	0x1326	; 0x1326 <convert_temperature>
        // if (ADC < ILLUMINANCE_ON_VALUE)
        // {
        //     LED_CONTROL_PORT |= 1 << LED_CONTROL_PIN;
        // }
        display_activate();
        idle_counter = IDLE_COUNTER_INIT_VALUE;
    357c:	ce e1       	ldi	r28, 0x1E	; 30
    // motion interrupt
}

inline static void motion_handler(void)
{
    if (idle_counter == 0 && MOTION_PIN)
    357e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
    3582:	81 11       	cpse	r24, r1
    3584:	06 c0       	rjmp	.+12     	; 0x3592 <main+0x24>
    3586:	4e 9b       	sbis	0x09, 6	; 9
    3588:	04 c0       	rjmp	.+8      	; 0x3592 <main+0x24>
    {
        // if (ADC < ILLUMINANCE_ON_VALUE)
        // {
        //     LED_CONTROL_PORT |= 1 << LED_CONTROL_PIN;
        // }
        display_activate();
    358a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <display_activate>
        idle_counter = IDLE_COUNTER_INIT_VALUE;
    358e:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <__data_end>
    {
#ifdef MOTION_SENSOR_ENABLED
        motion_handler();
#endif
#ifdef DISPLAY_ENABLED
        max7219_handler();
    3592:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <max7219_handler>
#endif
        neo7m_handler();
    3596:	0e 94 bd 13 	call	0x277a	; 0x277a <neo7m_handler>
        bmp180_handler();
    359a:	0e 94 b6 18 	call	0x316c	; 0x316c <bmp180_handler>
        timer_handler();
    359e:	0e 94 48 0a 	call	0x1490	; 0x1490 <timer_handler>
    }
    35a2:	ed cf       	rjmp	.-38     	; 0x357e <main+0x10>

000035a4 <__mulsi3>:
    35a4:	db 01       	movw	r26, r22
    35a6:	8f 93       	push	r24
    35a8:	9f 93       	push	r25
    35aa:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__muluhisi3>
    35ae:	bf 91       	pop	r27
    35b0:	af 91       	pop	r26
    35b2:	a2 9f       	mul	r26, r18
    35b4:	80 0d       	add	r24, r0
    35b6:	91 1d       	adc	r25, r1
    35b8:	a3 9f       	mul	r26, r19
    35ba:	90 0d       	add	r25, r0
    35bc:	b2 9f       	mul	r27, r18
    35be:	90 0d       	add	r25, r0
    35c0:	11 24       	eor	r1, r1
    35c2:	08 95       	ret

000035c4 <__udivmodqi4>:
    35c4:	99 1b       	sub	r25, r25
    35c6:	79 e0       	ldi	r23, 0x09	; 9
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <__udivmodqi4_ep>

000035ca <__udivmodqi4_loop>:
    35ca:	99 1f       	adc	r25, r25
    35cc:	96 17       	cp	r25, r22
    35ce:	08 f0       	brcs	.+2      	; 0x35d2 <__udivmodqi4_ep>
    35d0:	96 1b       	sub	r25, r22

000035d2 <__udivmodqi4_ep>:
    35d2:	88 1f       	adc	r24, r24
    35d4:	7a 95       	dec	r23
    35d6:	c9 f7       	brne	.-14     	; 0x35ca <__udivmodqi4_loop>
    35d8:	80 95       	com	r24
    35da:	08 95       	ret

000035dc <__divmodhi4>:
    35dc:	97 fb       	bst	r25, 7
    35de:	07 2e       	mov	r0, r23
    35e0:	16 f4       	brtc	.+4      	; 0x35e6 <__divmodhi4+0xa>
    35e2:	00 94       	com	r0
    35e4:	07 d0       	rcall	.+14     	; 0x35f4 <__divmodhi4_neg1>
    35e6:	77 fd       	sbrc	r23, 7
    35e8:	09 d0       	rcall	.+18     	; 0x35fc <__divmodhi4_neg2>
    35ea:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__udivmodhi4>
    35ee:	07 fc       	sbrc	r0, 7
    35f0:	05 d0       	rcall	.+10     	; 0x35fc <__divmodhi4_neg2>
    35f2:	3e f4       	brtc	.+14     	; 0x3602 <__divmodhi4_exit>

000035f4 <__divmodhi4_neg1>:
    35f4:	90 95       	com	r25
    35f6:	81 95       	neg	r24
    35f8:	9f 4f       	sbci	r25, 0xFF	; 255
    35fa:	08 95       	ret

000035fc <__divmodhi4_neg2>:
    35fc:	70 95       	com	r23
    35fe:	61 95       	neg	r22
    3600:	7f 4f       	sbci	r23, 0xFF	; 255

00003602 <__divmodhi4_exit>:
    3602:	08 95       	ret

00003604 <__udivmodsi4>:
    3604:	a1 e2       	ldi	r26, 0x21	; 33
    3606:	1a 2e       	mov	r1, r26
    3608:	aa 1b       	sub	r26, r26
    360a:	bb 1b       	sub	r27, r27
    360c:	fd 01       	movw	r30, r26
    360e:	0d c0       	rjmp	.+26     	; 0x362a <__udivmodsi4_ep>

00003610 <__udivmodsi4_loop>:
    3610:	aa 1f       	adc	r26, r26
    3612:	bb 1f       	adc	r27, r27
    3614:	ee 1f       	adc	r30, r30
    3616:	ff 1f       	adc	r31, r31
    3618:	a2 17       	cp	r26, r18
    361a:	b3 07       	cpc	r27, r19
    361c:	e4 07       	cpc	r30, r20
    361e:	f5 07       	cpc	r31, r21
    3620:	20 f0       	brcs	.+8      	; 0x362a <__udivmodsi4_ep>
    3622:	a2 1b       	sub	r26, r18
    3624:	b3 0b       	sbc	r27, r19
    3626:	e4 0b       	sbc	r30, r20
    3628:	f5 0b       	sbc	r31, r21

0000362a <__udivmodsi4_ep>:
    362a:	66 1f       	adc	r22, r22
    362c:	77 1f       	adc	r23, r23
    362e:	88 1f       	adc	r24, r24
    3630:	99 1f       	adc	r25, r25
    3632:	1a 94       	dec	r1
    3634:	69 f7       	brne	.-38     	; 0x3610 <__udivmodsi4_loop>
    3636:	60 95       	com	r22
    3638:	70 95       	com	r23
    363a:	80 95       	com	r24
    363c:	90 95       	com	r25
    363e:	9b 01       	movw	r18, r22
    3640:	ac 01       	movw	r20, r24
    3642:	bd 01       	movw	r22, r26
    3644:	cf 01       	movw	r24, r30
    3646:	08 95       	ret

00003648 <__divmodsi4>:
    3648:	05 2e       	mov	r0, r21
    364a:	97 fb       	bst	r25, 7
    364c:	1e f4       	brtc	.+6      	; 0x3654 <__divmodsi4+0xc>
    364e:	00 94       	com	r0
    3650:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__negsi2>
    3654:	57 fd       	sbrc	r21, 7
    3656:	07 d0       	rcall	.+14     	; 0x3666 <__divmodsi4_neg2>
    3658:	0e 94 02 1b 	call	0x3604	; 0x3604 <__udivmodsi4>
    365c:	07 fc       	sbrc	r0, 7
    365e:	03 d0       	rcall	.+6      	; 0x3666 <__divmodsi4_neg2>
    3660:	4e f4       	brtc	.+18     	; 0x3674 <__divmodsi4_exit>
    3662:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__negsi2>

00003666 <__divmodsi4_neg2>:
    3666:	50 95       	com	r21
    3668:	40 95       	com	r20
    366a:	30 95       	com	r19
    366c:	21 95       	neg	r18
    366e:	3f 4f       	sbci	r19, 0xFF	; 255
    3670:	4f 4f       	sbci	r20, 0xFF	; 255
    3672:	5f 4f       	sbci	r21, 0xFF	; 255

00003674 <__divmodsi4_exit>:
    3674:	08 95       	ret

00003676 <__negsi2>:
    3676:	90 95       	com	r25
    3678:	80 95       	com	r24
    367a:	70 95       	com	r23
    367c:	61 95       	neg	r22
    367e:	7f 4f       	sbci	r23, 0xFF	; 255
    3680:	8f 4f       	sbci	r24, 0xFF	; 255
    3682:	9f 4f       	sbci	r25, 0xFF	; 255
    3684:	08 95       	ret

00003686 <__mulhisi3>:
    3686:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__umulhisi3>
    368a:	33 23       	and	r19, r19
    368c:	12 f4       	brpl	.+4      	; 0x3692 <__mulhisi3+0xc>
    368e:	8a 1b       	sub	r24, r26
    3690:	9b 0b       	sbc	r25, r27
    3692:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <__usmulhisi3_tail>

00003696 <__umulhisi3>:
    3696:	a2 9f       	mul	r26, r18
    3698:	b0 01       	movw	r22, r0
    369a:	b3 9f       	mul	r27, r19
    369c:	c0 01       	movw	r24, r0
    369e:	a3 9f       	mul	r26, r19
    36a0:	70 0d       	add	r23, r0
    36a2:	81 1d       	adc	r24, r1
    36a4:	11 24       	eor	r1, r1
    36a6:	91 1d       	adc	r25, r1
    36a8:	b2 9f       	mul	r27, r18
    36aa:	70 0d       	add	r23, r0
    36ac:	81 1d       	adc	r24, r1
    36ae:	11 24       	eor	r1, r1
    36b0:	91 1d       	adc	r25, r1
    36b2:	08 95       	ret

000036b4 <__usmulhisi3>:
    36b4:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__umulhisi3>

000036b8 <__usmulhisi3_tail>:
    36b8:	b7 ff       	sbrs	r27, 7
    36ba:	08 95       	ret
    36bc:	82 1b       	sub	r24, r18
    36be:	93 0b       	sbc	r25, r19
    36c0:	08 95       	ret

000036c2 <__muluhisi3>:
    36c2:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__umulhisi3>
    36c6:	a5 9f       	mul	r26, r21
    36c8:	90 0d       	add	r25, r0
    36ca:	b4 9f       	mul	r27, r20
    36cc:	90 0d       	add	r25, r0
    36ce:	a4 9f       	mul	r26, r20
    36d0:	80 0d       	add	r24, r0
    36d2:	91 1d       	adc	r25, r1
    36d4:	11 24       	eor	r1, r1
    36d6:	08 95       	ret

000036d8 <__mulshisi3>:
    36d8:	b7 ff       	sbrs	r27, 7
    36da:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__muluhisi3>

000036de <__mulohisi3>:
    36de:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__muluhisi3>
    36e2:	82 1b       	sub	r24, r18
    36e4:	93 0b       	sbc	r25, r19
    36e6:	08 95       	ret

000036e8 <__udivmodhi4>:
    36e8:	aa 1b       	sub	r26, r26
    36ea:	bb 1b       	sub	r27, r27
    36ec:	51 e1       	ldi	r21, 0x11	; 17
    36ee:	07 c0       	rjmp	.+14     	; 0x36fe <__udivmodhi4_ep>

000036f0 <__udivmodhi4_loop>:
    36f0:	aa 1f       	adc	r26, r26
    36f2:	bb 1f       	adc	r27, r27
    36f4:	a6 17       	cp	r26, r22
    36f6:	b7 07       	cpc	r27, r23
    36f8:	10 f0       	brcs	.+4      	; 0x36fe <__udivmodhi4_ep>
    36fa:	a6 1b       	sub	r26, r22
    36fc:	b7 0b       	sbc	r27, r23

000036fe <__udivmodhi4_ep>:
    36fe:	88 1f       	adc	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	5a 95       	dec	r21
    3704:	a9 f7       	brne	.-22     	; 0x36f0 <__udivmodhi4_loop>
    3706:	80 95       	com	r24
    3708:	90 95       	com	r25
    370a:	bc 01       	movw	r22, r24
    370c:	cd 01       	movw	r24, r26
    370e:	08 95       	ret

00003710 <_exit>:
    3710:	f8 94       	cli

00003712 <__stop_program>:
    3712:	ff cf       	rjmp	.-2      	; 0x3712 <__stop_program>
